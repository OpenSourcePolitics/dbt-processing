{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.7", "generated_at": "2024-09-27T14:10:05.847371Z", "invocation_id": "abd1849f-2f07-41b8-9fd3-963d4daf1290", "env": {}, "project_name": "test_lyon", "project_id": "d8e56c488ab880a5d9339647e9a91e77", "user_id": "adcb453e-1d39-47b3-9baa-63abbc85451c", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.test_lyon.int_decidim_awesome_proposal_extra_fields": {"database": "test_lyon", "schema": "prod", "name": "int_decidim_awesome_proposal_extra_fields", "resource_type": "model", "package_name": "test_lyon", "path": "intermediate/decidim_awesome/int_decidim_awesome_proposal_extra_fields.sql", "original_file_path": "models/intermediate/decidim_awesome/int_decidim_awesome_proposal_extra_fields.sql", "unique_id": "model.test_lyon.int_decidim_awesome_proposal_extra_fields", "fqn": ["test_lyon", "intermediate", "decidim_awesome", "int_decidim_awesome_proposal_extra_fields"], "alias": "int_decidim_awesome_proposal_extra_fields", "checksum": {"name": "sha256", "checksum": "b835485e439f483316d7c11e01c190988a7f3415d43d63a0de0bf2c7a6eeae79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.500312, "relation_name": "\"test_lyon\".\"prod\".\"int_decidim_awesome_proposal_extra_fields\"", "raw_code": "WITH parsed_data AS (\n    SELECT\n        decidim_awesome_proposal_extra_fields.id,\n        decidim_awesome_proposal_extra_fields.proposal_id,\n        xpath('//text()', unnest(xpath('//dt', xml_data)))::text AS private_field_description,\n        unnest(xpath('//dd/div/text()', unnest(xpath('//dd', xml_data))))::text AS private_field_content\n    FROM\n        {{ ref (\"stg_decidim_awesome_proposal_extra_fields\")}} AS decidim_awesome_proposal_extra_fields,\n        LATERAL xmlparse(document private_body_clear) AS xml_data\n)\nSELECT\n    parsed_data.id,\n    parsed_data.proposal_id,\n    replace(replace(private_field_description, '{\"', ''), '\"}', '') AS private_field_description,\n    parsed_data.private_field_content\nFROM\n    parsed_data\nWHERE\n    private_field_content IS NOT NULL", "language": "sql", "refs": [{"name": "stg_decidim_awesome_proposal_extra_fields", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_attachments": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_attachments", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_attachments.sql", "original_file_path": "models/staging/decidim/stg_decidim_attachments.sql", "unique_id": "model.demo.stg_decidim_attachments", "fqn": ["demo", "staging", "decidim", "stg_decidim_attachments"], "alias": "stg_decidim_attachments", "checksum": {"name": "sha256", "checksum": "8e4c1762127b7fb4a32fb9ba5b67d7c1cdcab73077043069303f971d6f764b49"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.509962, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_attachments\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_attachments') }}\n),\nrenamed as (\n    SELECT\n        id,\n        title,\n        description,\n        file,\n        content_type,\n        file_size,\n        attached_to_id,\n        created_at,\n        updated_at,\n        attached_to_type,\n        weight,\n        attachment_collection_id\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_attachments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_attachments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_components": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_components", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_components.sql", "original_file_path": "models/staging/decidim/stg_decidim_components.sql", "unique_id": "model.demo.stg_decidim_components", "fqn": ["demo", "staging", "decidim", "stg_decidim_components"], "alias": "stg_decidim_components", "checksum": {"name": "sha256", "checksum": "e7f975f26d0129f6fc9d4b6367e672974c4e9f49b8c4486bafe7ae796bba5d12"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.5110981, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_components\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_components') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        manifest_name,\n        name::jsonb->>'fr' AS name,\n        participatory_space_id,\n        participatory_space_type,\n        settings,\n        weight,\n        permissions,\n        published_at,\n        created_at,\n        updated_at\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_components"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_endorsements": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_endorsements", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_endorsements.sql", "original_file_path": "models/staging/decidim/stg_decidim_endorsements.sql", "unique_id": "model.demo.stg_decidim_endorsements", "fqn": ["demo", "staging", "decidim", "stg_decidim_endorsements"], "alias": "stg_decidim_endorsements", "checksum": {"name": "sha256", "checksum": "9bec191fd84606c6ffcc454c65c75ce685790295ca46168991848f4bb0184968"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.512197, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_endorsements\"", "raw_code": "SELECT\n    id,\n    resource_type,\n    resource_id,\n    decidim_author_type,\n    decidim_author_id,\n    decidim_user_group_id,\n    created_at,\n    updated_at\nFROM {{ source('decidim', 'decidim_endorsements') }}", "language": "sql", "refs": [], "sources": [["decidim", "decidim_endorsements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_endorsements"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_follows": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_follows", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_follows.sql", "original_file_path": "models/staging/decidim/stg_decidim_follows.sql", "unique_id": "model.demo.stg_decidim_follows", "fqn": ["demo", "staging", "decidim", "stg_decidim_follows"], "alias": "stg_decidim_follows", "checksum": {"name": "sha256", "checksum": "845bec0e562eec37206c673c0afc83cacf07402c414370dd5ddd97e13dd98f39"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.513283, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_follows\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_follows') }}\n),\nrenamed as (\n    SELECT\n        id,\n        decidim_user_id,\n        updated_at,\n        created_at,\n        decidim_followable_type,\n        decidim_followable_id\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_follows"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_follows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_comments": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_comments", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_comments.sql", "original_file_path": "models/staging/decidim/stg_decidim_comments.sql", "unique_id": "model.demo.stg_decidim_comments", "fqn": ["demo", "staging", "decidim", "stg_decidim_comments"], "alias": "stg_decidim_comments", "checksum": {"name": "sha256", "checksum": "79b502cf06a2626b020049fb4b680547e6dbf7487a4f51ffe9a2579c91172337"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.514428, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_comments\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_comments_comments') }}\n),\nrenamed as (\n    SELECT\n        id,\n        decidim_commentable_type,\n        decidim_commentable_id,\n        decidim_author_id,\n        created_at,\n        updated_at,\n        depth,\n        alignment,\n        decidim_user_group_id,\n        decidim_root_commentable_type,\n        decidim_root_commentable_id,\n        decidim_author_type,\n        body::jsonb->>'fr' as body,\n        comments_count\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_comments_comments"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_comments_comments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_meetings_registrations": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_meetings_registrations", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_meetings_registrations.sql", "original_file_path": "models/staging/decidim/stg_decidim_meetings_registrations.sql", "unique_id": "model.demo.stg_decidim_meetings_registrations", "fqn": ["demo", "staging", "decidim", "stg_decidim_meetings_registrations"], "alias": "stg_decidim_meetings_registrations", "checksum": {"name": "sha256", "checksum": "293379745fa39579f8f128e1ed40eab024dcff4fbc9527c62497da0d24ff70f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.5154839, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_meetings_registrations\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_meetings_registrations') }}\n),\nrenamed AS (\n    select\n        id,\n        decidim_user_id,\n        decidim_meeting_id,\n        created_at,\n        updated_at,\n        code,\n        validated_at,\n        decidim_user_group_id\n    FROM source\n)\nselect * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_meetings_registrations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_meetings_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_participatory_processes": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_participatory_processes", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_participatory_processes.sql", "original_file_path": "models/staging/decidim/stg_decidim_participatory_processes.sql", "unique_id": "model.demo.stg_decidim_participatory_processes", "fqn": ["demo", "staging", "decidim", "stg_decidim_participatory_processes"], "alias": "stg_decidim_participatory_processes", "checksum": {"name": "sha256", "checksum": "76b94379422e2efc8138274d1d77289c93ee8ed7e3cb9b94f4b16bc80d4f6d57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.516536, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_participatory_processes\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_participatory_processes') }}\n),\nrenamed AS (\n    SELECT \n        id, \n        published_at, \n        title::jsonb->>'fr' AS title,\n        subtitle::jsonb->>'fr' as subtitle, \n        slug, \n        'Decidim::ParticipatoryProcess' as type,\n        'processes' as space_type_slug,\n        decidim_organization_id\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_participatory_processes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_participatory_processes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_users": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_users", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_users.sql", "original_file_path": "models/staging/decidim/stg_decidim_users.sql", "unique_id": "model.demo.stg_decidim_users", "fqn": ["demo", "staging", "decidim", "stg_decidim_users"], "alias": "stg_decidim_users", "checksum": {"name": "sha256", "checksum": "e2c91dfd9f730fc788d2adf9bb88f58d84445a81a24f863fe747a139241bd8d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.517567, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_users\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_users') }}\n),\nrenamed AS (\n    SELECT \n        id,\n        email,\n        sign_in_count,\n        last_sign_in_at,\n        created_at,\n        updated_at,\n        invitation_created_at,\n        invitation_sent_at,\n        invitation_accepted_at,\n        invited_by_id,\n        invited_by_type,\n        decidim_organization_id,\n        confirmed_at,\n        confirmation_token,\n        unconfirmed_email,\n        name,\n        locale,\n        deleted_at,\n        admin,\n        managed,\n        roles::text AS roles,\n        nickname,\n        accepted_tos_version,\n        type,\n        following_count,\n        followers_count,\n        failed_attempts,\n        locked_at,\n        admin_terms_accepted_at,\n        blocked,\n        blocked_at,\n        (CASE WHEN confirmed_at IS NULL THEN false ELSE true END) AS \"confirmed\",\n        extended_data\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_participatory_process_steps": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_participatory_process_steps", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_participatory_process_steps.sql", "original_file_path": "models/staging/decidim/stg_decidim_participatory_process_steps.sql", "unique_id": "model.demo.stg_decidim_participatory_process_steps", "fqn": ["demo", "staging", "decidim", "stg_decidim_participatory_process_steps"], "alias": "stg_decidim_participatory_process_steps", "checksum": {"name": "sha256", "checksum": "d8a8fe723174bcddf09a5900d0598c0c6c86c72947fcb462cb664e6dbdde860b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.518616, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_participatory_process_steps\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_participatory_process_steps') }}\n),\nrenamed AS (\n    select\n        id,\n        title::jsonb->>'fr' as title,\n        title::jsonb->>'fr' as description,\n        start_date,\n        end_date,\n        decidim_participatory_process_id,\n        created_at,\n        updated_at,\n        active,\n        position,\n        cta_text,\n        cta_path\n\n    FROM source\n)\nselect * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_participatory_process_steps"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_participatory_process_steps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_coauthorships": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_coauthorships", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_coauthorships.sql", "original_file_path": "models/staging/decidim/stg_decidim_coauthorships.sql", "unique_id": "model.demo.stg_decidim_coauthorships", "fqn": ["demo", "staging", "decidim", "stg_decidim_coauthorships"], "alias": "stg_decidim_coauthorships", "checksum": {"name": "sha256", "checksum": "9fed6dbe61618f54b9f08d7f60b5c8ec41046eda17cd24064dedb7b380b3cd63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["decidim_author_id"], "type": "btree"}, {"columns": ["coauthorable_id"], "type": "btree"}, {"columns": ["coauthorable_type"], "type": "btree"}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["decidim_author_id"], "type": "btree"}, {"columns": ["coauthorable_id"], "type": "btree"}, {"columns": ["coauthorable_type"], "type": "btree"}]}, "created_at": 1727441769.519694, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_coauthorships\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n      {'columns': ['decidim_author_id'], 'type': 'btree'},\n      {'columns': ['coauthorable_id'], 'type': 'btree'},\n      {'columns': ['coauthorable_type'], 'type': 'btree'},\n    ]\n)}}\n\nWITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_coauthorships') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_author_id,\n        decidim_user_group_id,\n        coauthorable_type,\n        coauthorable_id,\n        created_at,\n        updated_at,\n        decidim_author_type\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_coauthorships"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_coauthorships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_meetings": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_meetings", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_meetings.sql", "original_file_path": "models/staging/decidim/stg_decidim_meetings.sql", "unique_id": "model.demo.stg_decidim_meetings", "fqn": ["demo", "staging", "decidim", "stg_decidim_meetings"], "alias": "stg_decidim_meetings", "checksum": {"name": "sha256", "checksum": "cc97aa4855ffbe86bc253d3dbbf5e4d1a9411b4869271f5208574c4add1fa025"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.521081, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_meetings\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_meetings_meetings') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        title::jsonb->>'fr' AS title,\n        regexp_replace(description::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') AS description,\n        coalesce(nullif(address,''), 'Pas d''adresse') as address,\n        coalesce(attendees_count, 0) as attendees_count,\n        created_at,\n        decidim_scope_id,\n        decidim_component_id,\n        start_time,\n        end_time,\n        registration_url,\n        type_of_meeting,\n        private_meeting,\n        decidim_author_id,\n        'Decidim::Meetings::Meeting' as resource_type\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_meetings_meetings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_meetings_meetings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_accountability_results": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_accountability_results", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_accountability_results.sql", "original_file_path": "models/staging/decidim/stg_decidim_accountability_results.sql", "unique_id": "model.demo.stg_decidim_accountability_results", "fqn": ["demo", "staging", "decidim", "stg_decidim_accountability_results"], "alias": "stg_decidim_accountability_results", "checksum": {"name": "sha256", "checksum": "49855fb3280a786e77b03797472d8eceb9f3d3b5b1ed9e01cd0ac5aae55049db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.522144, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_accountability_results\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_accountability_results') }}\n),\nrenamed as (\n    select\n        id,\n        title,\n        description,\n        reference,\n        start_date,\n        end_date,\n        progress,\n        parent_id,\n        decidim_accountability_status_id,\n        decidim_component_id,\n        decidim_scope_id,\n        created_at,\n        updated_at,\n        children_count,\n        weight,\n        external_id,\n        comments_count\n    FROM source\n)\nselect * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_accountability_results"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_accountability_results"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_moderations": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_moderations", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_moderations.sql", "original_file_path": "models/staging/decidim/stg_decidim_moderations.sql", "unique_id": "model.demo.stg_decidim_moderations", "fqn": ["demo", "staging", "decidim", "stg_decidim_moderations"], "alias": "stg_decidim_moderations", "checksum": {"name": "sha256", "checksum": "56f85d7867823a3974795f077bff219974db2feefcfd50d41d995cbdb073d688"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.523198, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_moderations\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_moderations') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_participatory_space_id,\n        decidim_reportable_type,\n        decidim_reportable_id,\n        report_count,\n        hidden_at,\n        created_at,\n        updated_at,\n        decidim_participatory_space_type,\n        reported_content\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_moderations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_moderations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_surveys": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_surveys", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/stg_decidim_surveys.sql", "original_file_path": "models/staging/decidim/stg_decidim_surveys.sql", "unique_id": "model.demo.stg_decidim_surveys", "fqn": ["demo", "staging", "decidim", "stg_decidim_surveys"], "alias": "stg_decidim_surveys", "checksum": {"name": "sha256", "checksum": "23fa810230da2fc8db40b75648be3fd792a004c782e6b97380ebcc3a3a8a00f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.524245, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_surveys\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_surveys_surveys') }}\n),\nrenamed as (\n    SELECT\n        id,\n        decidim_component_id,\n        created_at,\n        updated_at\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_surveys_surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_surveys_surveys"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_organizations": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_organizations", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/organizations/stg_decidim_organizations.sql", "original_file_path": "models/staging/decidim/organizations/stg_decidim_organizations.sql", "unique_id": "model.demo.stg_decidim_organizations", "fqn": ["demo", "staging", "decidim", "organizations", "stg_decidim_organizations"], "alias": "stg_decidim_organizations", "checksum": {"name": "sha256", "checksum": "06c363b526b111c1e9b06a9c27ae49175dc6deee5d1c016b8e6e271639ba219b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A staging model for Decidim organizations", "columns": {"id": {"name": "id", "description": "Unique identifier for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "host": {"name": "host", "description": "Host URL for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_locale": {"name": "default_locale", "description": "Default locale for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_locales": {"name": "available_locales", "description": "List of available locales for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secondary_hosts": {"name": "secondary_hosts", "description": "Secondary hosts for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_authorizations": {"name": "available_authorizations", "description": "List of available authorizations for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "header_snippets": {"name": "header_snippets", "description": "Header snippets for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tos_version": {"name": "tos_version", "description": "Version of the terms of service", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "badges_enabled": {"name": "badges_enabled", "description": "Indicates if badges are enabled. Badges in Decidim recognize participant actions and progress, enhancing engagement through gamification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "send_welcome_notification": {"name": "send_welcome_notification", "description": "Flag indicating if welcome notifications are sent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "users_registration_mode": {"name": "users_registration_mode", "description": "Mode of user registration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Time zone of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/organizations/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.763382, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_organizations\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_organizations') }}\n),\nrenamed AS (\n    SELECT \n        id,\n        name,\n        host,\n        default_locale,\n        available_locales::text as available_locales,\n        created_at,\n        description,\n        secondary_hosts::text as secondary_hosts,\n        available_authorizations::text as available_authorizations,\n        header_snippets,\n        tos_version,\n        badges_enabled,\n        send_welcome_notification,\n        users_registration_mode,\n        time_zone\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_organizations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_organizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_forms_question_matrix_rows": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_forms_question_matrix_rows", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/forms/stg_decidim_forms_question_matrix_rows.sql", "original_file_path": "models/staging/decidim/forms/stg_decidim_forms_question_matrix_rows.sql", "unique_id": "model.demo.stg_decidim_forms_question_matrix_rows", "fqn": ["demo", "staging", "decidim", "forms", "stg_decidim_forms_question_matrix_rows"], "alias": "stg_decidim_forms_question_matrix_rows", "checksum": {"name": "sha256", "checksum": "814b4c0e437783633cd55c4813020ca4952f42adf8b0be80653d2d7dbe192a8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for forms question of type matrix.", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_question_id": {"name": "decidim_question_id", "description": "Foreign key to the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position": {"name": "position", "description": "Position of the matrix row.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the matrix row.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.766201, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_forms_question_matrix_rows\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_forms_question_matrix_rows') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_question_id,\n        position,\n        TRIM(body::jsonb->>'fr') AS body\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_forms_question_matrix_rows"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_forms_answers": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_forms_answers", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/forms/stg_decidim_forms_answers.sql", "original_file_path": "models/staging/decidim/forms/stg_decidim_forms_answers.sql", "unique_id": "model.demo.stg_decidim_forms_answers", "fqn": ["demo", "staging", "decidim", "forms", "stg_decidim_forms_answers"], "alias": "stg_decidim_forms_answers", "checksum": {"name": "sha256", "checksum": "ac9f9dc1a41cdb8330bd5cea54fb7dcc9533baf451d2ed5ca34864cccb85eedf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for forms answer when the answer is not in a matrix or optional and sorting question. (i.e long_answer and short_answer)", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the answer. It is null if the question is a matrix or option, or sorting. It can be 'separator' if the question is a separator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_user_id": {"name": "decidim_user_id", "description": "Foreign key to the user who gave the answer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_questionnaire_id": {"name": "decidim_questionnaire_id", "description": "Foreign key to the questionnaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_question_id": {"name": "decidim_question_id", "description": "Foreign key to the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the answer was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the answer was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_token": {"name": "session_token", "description": "Session token of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_hash": {"name": "ip_hash", "description": "Hashed IP address of the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.765903, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_forms_answers\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_forms_answers') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        body,\n        decidim_user_id,\n        decidim_questionnaire_id,\n        decidim_question_id,\n        created_at,\n        updated_at,\n        session_token,\n        ip_hash\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_forms_answers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_forms_answers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_forms_questions": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_forms_questions", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/forms/stg_decidim_forms_questions.sql", "original_file_path": "models/staging/decidim/forms/stg_decidim_forms_questions.sql", "unique_id": "model.demo.stg_decidim_forms_questions", "fqn": ["demo", "staging", "decidim", "forms", "stg_decidim_forms_questions"], "alias": "stg_decidim_forms_questions", "checksum": {"name": "sha256", "checksum": "05cb213ca7e5693567492a2593f1166ab83d4efff9cc02add61aacb18a01465f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["decidim_questionnaire_id"], "type": "btree"}, {"type": "btree", "columns": ["question_type"]}]}, "tags": [], "description": "Table for forms questions", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_questionnaire_id": {"name": "decidim_questionnaire_id", "description": "Foreign key to the questionnaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position": {"name": "position", "description": "Position of the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "question_type": {"name": "question_type", "description": "Type of the question (e.g., short_answer, long_answer, single_matrix ...).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mandatory": {"name": "mandatory", "description": "Boolean that indicates whether the question is mandatory.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_choices": {"name": "max_choices", "description": "Maximum number of choices allowed for the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the question was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the question was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_characters": {"name": "max_characters", "description": "Maximum number of characters allowed for the question.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["decidim_questionnaire_id"], "type": "btree"}, {"type": "btree", "columns": ["question_type"]}]}, "created_at": 1727441769.769504, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_forms_questions\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n      {'columns': ['decidim_questionnaire_id'], 'type': 'btree'},\n      {'columns': ['question_type'], 'type': 'btree'},\n    ]\n)}}\n\nWITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_forms_questions') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_questionnaire_id,\n        position,\n        question_type,\n        mandatory,\n        body::jsonb->>'fr' AS body,\n        description,\n        max_choices,\n        created_at,\n        updated_at,\n        max_characters\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_forms_questions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_forms_questions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_forms_questionnaires": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_forms_questionnaires", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/forms/stg_decidim_forms_questionnaires.sql", "original_file_path": "models/staging/decidim/forms/stg_decidim_forms_questionnaires.sql", "unique_id": "model.demo.stg_decidim_forms_questionnaires", "fqn": ["demo", "staging", "decidim", "forms", "stg_decidim_forms_questionnaires"], "alias": "stg_decidim_forms_questionnaires", "checksum": {"name": "sha256", "checksum": "2817595f60f5e32a08a712a7e37b9b45c3b7aae5ce698abe19f841f9728a6d10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for forms questionnaires", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the questionnaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the questionnaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tos": {"name": "tos", "description": "Terms of service associated with the questionnaire.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "questionnaire_for_type": {"name": "questionnaire_for_type", "description": "Type of entity the questionnaire is for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "questionnaire_for_id": {"name": "questionnaire_for_id", "description": "ID of the entity the questionnaire is for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "Timestamp when the questionnaire was published.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the questionnaire was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the questionnaire was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "salt": {"name": "salt", "description": "Salt used for hashing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.768296, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_forms_questionnaires\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_forms_questionnaires') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        title,\n        description,\n        tos,\n        questionnaire_for_type,\n        questionnaire_for_id,\n        published_at,\n        created_at,\n        updated_at,\n        salt\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_forms_questionnaires"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_forms_questionnaires"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_forms_answer_choices": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_forms_answer_choices", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/forms/stg_decidim_forms_answer_choices.sql", "original_file_path": "models/staging/decidim/forms/stg_decidim_forms_answer_choices.sql", "unique_id": "model.demo.stg_decidim_forms_answer_choices", "fqn": ["demo", "staging", "decidim", "forms", "stg_decidim_forms_answer_choices"], "alias": "stg_decidim_forms_answer_choices", "checksum": {"name": "sha256", "checksum": "4589e69fcd414bd03e8a0b7fab9090f630dd97b20b8b2723a04cf5c115327383"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for forms answer choices when the answer is in a matrix question or in a sorting or optional question, this table stores the choice of the answerer.", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_answer_id": {"name": "decidim_answer_id", "description": "Foreign key to the answer this choice belongs to from the table decidim_forms_answers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_answer_option_id": {"name": "decidim_answer_option_id", "description": "Foreign key to the answer option from the table decidim_forms_answer_options. (Currently not used)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "position": {"name": "position", "description": "Position of the answer choice when the question is of type sorting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the answer choice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "custom_body": {"name": "custom_body", "description": "Custom body for the answer choice when the answer is of type free text.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_question_matrix_row_id": {"name": "decidim_question_matrix_row_id", "description": "Foreign key to the question matrix row when the question is of type matrix. It matches the matrix rows.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.764865, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_forms_answer_choices\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_forms_answer_choices') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_answer_id,\n        decidim_answer_option_id,\n        position,\n        body::text AS body,\n        custom_body,\n        decidim_question_matrix_row_id\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_forms_answer_choices"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_area_types": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_area_types", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/areas/stg_decidim_area_types.sql", "original_file_path": "models/staging/decidim/areas/stg_decidim_area_types.sql", "unique_id": "model.demo.stg_decidim_area_types", "fqn": ["demo", "staging", "decidim", "areas", "stg_decidim_area_types"], "alias": "stg_decidim_area_types", "checksum": {"name": "sha256", "checksum": "980236296434c2d141aae8aa6f07ad8753edf8f6e0d8b91e6e9be4b3e8f7199a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for (deprecated) area types. Area types are used mainly as categories and super categories for decidim area.", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/areas/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.782188, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_area_types\"", "raw_code": "WITH source as (\n      SELECT * FROM {{ source('decidim', 'decidim_area_types') }}\n),\nrenamed as (\n    SELECT\n        id,\n        decidim_organization_id,\n        name,\n        plural\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_area_types"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_area_types"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_areas": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_areas", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/areas/stg_decidim_areas.sql", "original_file_path": "models/staging/decidim/areas/stg_decidim_areas.sql", "unique_id": "model.demo.stg_decidim_areas", "fqn": ["demo", "staging", "decidim", "areas", "stg_decidim_areas"], "alias": "stg_decidim_areas", "checksum": {"name": "sha256", "checksum": "00d6180e582e438635a273ae76448a025dd2e2a41c9f4ba8d8c8f75ef943472c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for (deprecated) areas. Areas are sub categories for area types.", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "area_type_id": {"name": "area_type_id", "description": "Id of the area type, the area is linked to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/areas/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.782549, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_areas\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_areas') }}\n),\nrenamed as (\n    select\n        id,\n        name,\n        area_type_id,\n        decidim_organization_id,\n        created_at,\n        updated_at\n    FROM source\n)\nselect * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_areas"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_areas"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_blogs_posts": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_blogs_posts", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/blogs_posts/stg_decidim_blogs_posts.sql", "original_file_path": "models/staging/decidim/blogs_posts/stg_decidim_blogs_posts.sql", "unique_id": "model.demo.stg_decidim_blogs_posts", "fqn": ["demo", "staging", "decidim", "blogs_posts", "stg_decidim_blogs_posts"], "alias": "stg_decidim_blogs_posts", "checksum": {"name": "sha256", "checksum": "a0d517da497c87b66748cd2983933375b788f2d42954ddbb457dc77b6b1e031e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.533806, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_blogs_posts\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_blogs_posts') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        title::jsonb->>'fr' AS title,\n        regexp_replace(body::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') AS body,\n        decidim_component_id,\n        created_at,\n        decidim_author_id,\n        'Decidim::Blogs::Post' AS resource_type\n    FROM source \n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_blogs_posts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_blogs_posts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_assemblies": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_assemblies", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/assemblies/stg_decidim_assemblies.sql", "original_file_path": "models/staging/decidim/assemblies/stg_decidim_assemblies.sql", "unique_id": "model.demo.stg_decidim_assemblies", "fqn": ["demo", "staging", "decidim", "assemblies", "stg_decidim_assemblies"], "alias": "stg_decidim_assemblies", "checksum": {"name": "sha256", "checksum": "1015fbb9b8eaf4ec92de03aeaeb6d537b866ad4c1e4e16e8e3eb0d42272d4acf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model represents the assemblies in Decidim, with selected and renamed fields for easier analysis.", "columns": {"id": {"name": "id", "description": "Unique identifier of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "slug": {"name": "slug", "description": "Readable unique identifier of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "hashtag": {"name": "hashtag", "description": "Hashtag associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "decidim_organization_id": {"name": "decidim_organization_id", "description": "Identifier of the associated Decidim organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "created_at": {"name": "created_at", "description": "Date when the assembly was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "timestamp"}, "updated_at": {"name": "updated_at", "description": "Date when the assembly was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "timestamp"}, "title": {"name": "title", "description": "Title of the assembly in French.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "subtitle": {"name": "subtitle", "description": "Subtitle of the assembly in French.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "short_description": {"name": "short_description", "description": "Short description of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "description": {"name": "description", "description": "Full description of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "hero_image": {"name": "hero_image", "description": "Hero image of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "banner_image": {"name": "banner_image", "description": "Banner image of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "promoted": {"name": "promoted", "description": "Indicator if the assembly is promoted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "boolean"}, "published_at": {"name": "published_at", "description": "Date when the assembly was published.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "timestamp"}, "developer_group": {"name": "developer_group", "description": "Developer group associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "meta_scope": {"name": "meta_scope", "description": "Meta scope of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "local_area": {"name": "local_area", "description": "Local area related to the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "target": {"name": "target", "description": "Target audience of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "participatory_scope": {"name": "participatory_scope", "description": "Participatory scope of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "participatory_structure": {"name": "participatory_structure", "description": "Participatory structure of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "show_statistics": {"name": "show_statistics", "description": "Indicator if statistics are shown for the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "boolean"}, "decidim_scope_id": {"name": "decidim_scope_id", "description": "Identifier of the Decidim scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "scopes_enabled": {"name": "scopes_enabled", "description": "Indicator if scopes are enabled for the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "boolean"}, "private_space": {"name": "private_space", "description": "Indicator if the assembly is in a private space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "boolean"}, "reference": {"name": "reference", "description": "Reference identifier of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "decidim_area_id": {"name": "decidim_area_id", "description": "Identifier of the Decidim area.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "parent_id": {"name": "parent_id", "description": "Identifier of the parent assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "parents_path": {"name": "parents_path", "description": "Path of parent assemblies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "children_count": {"name": "children_count", "description": "Count of child assemblies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "purpose_of_action": {"name": "purpose_of_action", "description": "Purpose of the assembly's action.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "composition": {"name": "composition", "description": "Composition of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "creation_date": {"name": "creation_date", "description": "Creation date of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "date"}, "created_by": {"name": "created_by", "description": "User who created the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "created_by_other": {"name": "created_by_other", "description": "Other entity that created the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "duration": {"name": "duration", "description": "Duration of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "date"}, "included_at": {"name": "included_at", "description": "Date when the assembly was included.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "date"}, "closing_date": {"name": "closing_date", "description": "Closing date of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "date"}, "closing_date_reason": {"name": "closing_date_reason", "description": "Reason for the assembly's closing date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "internal_organisation": {"name": "internal_organisation", "description": "Internal organization associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "is_transparent": {"name": "is_transparent", "description": "Indicator if the assembly is transparent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "boolean"}, "special_features": {"name": "special_features", "description": "Special features of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "twitter_handler": {"name": "twitter_handler", "description": "Twitter handle associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "instagram_handler": {"name": "instagram_handler", "description": "Instagram handle associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "facebook_handler": {"name": "facebook_handler", "description": "Facebook handle associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "youtube_handler": {"name": "youtube_handler", "description": "YouTube handle associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "github_handler": {"name": "github_handler", "description": "GitHub handle associated with the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "decidim_assemblies_type_id": {"name": "decidim_assemblies_type_id", "description": "Identifier of the Decidim assembly type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "weight": {"name": "weight", "description": "Weight of the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "follows_count": {"name": "follows_count", "description": "Count of follows for the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "bigint"}, "announcement": {"name": "announcement", "description": "Announcements related to the assembly.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}, "_airbyte_ab_id": {"name": "_airbyte_ab_id", "description": "Airbyte unique identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "varchar"}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "Timestamp when the record was emitted by Airbyte.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "timestamp with time zone"}, "_airbyte_normalized_at": {"name": "_airbyte_normalized_at", "description": "Timestamp when the record was normalized by Airbyte.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "timestamp with time zone"}, "_airbyte_decidim_assemblies_hashid": {"name": "_airbyte_decidim_assemblies_hashid", "description": "Hash identifier for the Decidim assemblies record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "type": "text"}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/assemblies/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.790986, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_assemblies\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_assemblies') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        slug,\n        hashtag,\n        decidim_organization_id,\n        created_at,\n        updated_at,\n        title::jsonb->>'fr' AS title,\n        subtitle::jsonb->>'fr' AS subtitle,\n        short_description,\n        description,\n        hero_image,\n        banner_image,\n        promoted,\n        published_at,\n        developer_group,\n        meta_scope,\n        local_area,\n        target,\n        participatory_scope,\n        participatory_structure,\n        show_statistics,\n        decidim_scope_id,\n        scopes_enabled,\n        private_space,\n        reference,\n        decidim_area_id,\n        parent_id,\n        parents_path,\n        children_count,\n        purpose_of_action,\n        composition,\n        creation_date,\n        created_by,\n        created_by_other,\n        duration,\n        included_at,\n        closing_date,\n        closing_date_reason,\n        internal_organisation,\n        is_transparent,\n        special_features,\n        twitter_handler,\n        instagram_handler,\n        facebook_handler,\n        youtube_handler,\n        github_handler,\n        decidim_assemblies_type_id,\n        weight,\n        follows_count\n\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_assemblies"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_assemblies"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_debates": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_debates", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/debates/stg_decidim_debates.sql", "original_file_path": "models/staging/decidim/debates/stg_decidim_debates.sql", "unique_id": "model.demo.stg_decidim_debates", "fqn": ["demo", "staging", "decidim", "debates", "stg_decidim_debates"], "alias": "stg_decidim_debates", "checksum": {"name": "sha256", "checksum": "5c0b32b3ec2a2483a475d371bde8ddc92c7368e303029bb62e5a63880db2406c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.535916, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_debates\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_debates_debates') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        title::jsonb->>'fr' as title,\n        regexp_replace(description::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') as description,\n        start_time,\n        end_time,\n        decidim_component_id,\n        decidim_author_id,\n        created_at,\n        closed_at,\n        'Decidim::Debates::Debate' as resource_type\n    FROM source \n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_debates_debates"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_debates_debates"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_budgets_line_items": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_budgets_line_items", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/budgets/stg_decidim_budgets_line_items.sql", "original_file_path": "models/staging/decidim/budgets/stg_decidim_budgets_line_items.sql", "unique_id": "model.demo.stg_decidim_budgets_line_items", "fqn": ["demo", "staging", "decidim", "budgets", "stg_decidim_budgets_line_items"], "alias": "stg_decidim_budgets_line_items", "checksum": {"name": "sha256", "checksum": "72e0383100994445b0c8276bbbed676427fdcc9b65ade7ad26374d46669e6332"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A line item links a given order to a given budget project", "columns": {"id": {"name": "id", "description": "Unique identifier of the line item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_order_id": {"name": "decidim_order_id", "description": "ID of the issued order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_project_id": {"name": "decidim_project_id", "description": "ID of the budget project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/budgets/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.794361, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_budgets_line_items\"", "raw_code": "WITH source as (\n      SELECT * FROM {{ source('decidim', 'decidim_budgets_line_items') }}\n),\nrenamed as (\n    select\n        id,\n        decidim_order_id,\n        decidim_project_id\n    FROM source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_budgets_line_items"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_budgets_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_budgets_projects": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_budgets_projects", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/budgets/stg_decidim_budgets_projects.sql", "original_file_path": "models/staging/decidim/budgets/stg_decidim_budgets_projects.sql", "unique_id": "model.demo.stg_decidim_budgets_projects", "fqn": ["demo", "staging", "decidim", "budgets", "stg_decidim_budgets_projects"], "alias": "stg_decidim_budgets_projects", "checksum": {"name": "sha256", "checksum": "38ba6a896c76883b85f479bffced7d415dd7db1e56daf191e57d4f88c0b5e402"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Lists every project for every budget on the platform", "columns": {"id": {"name": "id", "description": "Unique identifier for a project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation of the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_scope_id": {"name": "decidim_scope_id", "description": "ID of the scope to which the project may be linked to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_amount": {"name": "project_amount", "description": "Cost of the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "selected_at": {"name": "selected_at", "description": "Timestamp of the selection of the project (if selected)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_budgets_budget_id": {"name": "decidim_budgets_budget_id", "description": "ID of the related budget", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "Hardcoded resource type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/budgets/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.793084, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_budgets_projects\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_budgets_projects') }}\n),\nrenamed AS (\n    SELECT\n    id, \n    title::jsonb->>'fr' as title,\n    regexp_replace(description::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') as description,\n    created_at,\n    decidim_scope_id, \n    budget_amount as project_amount,\n    selected_at,\n    decidim_budgets_budget_id,\n    'Decidim::Budgets::Project' as resource_type\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_budgets_projects"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_budgets_projects"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_budgets_orders": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_budgets_orders", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/budgets/stg_decidim_budgets_orders.sql", "original_file_path": "models/staging/decidim/budgets/stg_decidim_budgets_orders.sql", "unique_id": "model.demo.stg_decidim_budgets_orders", "fqn": ["demo", "staging", "decidim", "budgets", "stg_decidim_budgets_orders"], "alias": "stg_decidim_budgets_orders", "checksum": {"name": "sha256", "checksum": "3b3b9f2641d07ac85ded9cda4d4650ebbef60a90071fe7e5cc162dc856cf4cfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An order is a vote from a single user to a given budget, and can be linked to one or several budget projects", "columns": {"id": {"name": "id", "description": "Unique identifier for an order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_user_id": {"name": "decidim_user_id", "description": "ID of the user who has issued the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checked_out_at": {"name": "checked_out_at", "description": "Timestamp of the completion of the order. Blank if the user has not completed the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the creation of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the last modification of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_budgets_budget_id": {"name": "decidim_budgets_budget_id", "description": "ID of the budget for which the order is issued", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/budgets/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.793715, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_budgets_orders\"", "raw_code": "WITH source as (\n      SELECT * FROM {{ source('decidim', 'decidim_budgets_orders') }}\n),\nrenamed as (\n    select\n        id,\n        decidim_user_id,\n        checked_out_at,\n        created_at,\n        updated_at,\n        decidim_budgets_budget_id\n    FROM source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_budgets_orders"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_budgets_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_budgets": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_budgets", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/budgets/stg_decidim_budgets.sql", "original_file_path": "models/staging/decidim/budgets/stg_decidim_budgets.sql", "unique_id": "model.demo.stg_decidim_budgets", "fqn": ["demo", "staging", "decidim", "budgets", "stg_decidim_budgets"], "alias": "stg_decidim_budgets", "checksum": {"name": "sha256", "checksum": "273d0e8ca55e8b9a6bdf6f696db0b5c626309254dcee5060197d62edbb3be147"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Lists every budget on the platform and their component", "columns": {"id": {"name": "id", "description": "Unique identifier for a budget", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the budget", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_component_id": {"name": "decidim_component_id", "description": "ID of the component to which the budget is linked to. Multiple budgets can share the same component", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/budgets/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.79217, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_budgets\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_budgets_budgets') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        title::jsonb->>'fr' as title,\n        decidim_component_id\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_budgets_budgets"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_budgets_budgets"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_categories": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_categories", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/categories/stg_decidim_categories.sql", "original_file_path": "models/staging/decidim/categories/stg_decidim_categories.sql", "unique_id": "model.demo.stg_decidim_categories", "fqn": ["demo", "staging", "decidim", "categories", "stg_decidim_categories"], "alias": "stg_decidim_categories", "checksum": {"name": "sha256", "checksum": "65d0ed6e7ec2006b035af60381a5786cce520d33a5144af16b29fc62ea025f3e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table describing categories (and sub categories) attributes used to classify ressources within a space.", "columns": {"id": {"name": "id", "description": "Unique identifier of the category.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the category. ex: Sports, Environment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "String describing the category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Unique identifier of the parent category. Can be null if the category is not a sub category", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_participatory_space_id": {"name": "decidim_participatory_space_id", "description": "Unique identifier of the participatory space the category is in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_participatory_space_type": {"name": "decidim_participatory_space_type", "description": "Type of the participatory space the category is in. ex: Decidim::ParticipatoryProcess", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weight": {"name": "weight", "description": "Optional field. Which order will it have in relation to the other categories. Having a lower number means a higher priority. For instance, if you have two categories, 'Category a' with weight '10' and 'Category b' with weight '0', then 'Category b' will be first when ordering.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/categories/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.8061051, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_categories\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_categories') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        name::jsonb->>'fr' AS name,\n        description,\n        parent_id,\n        decidim_participatory_space_id,\n        decidim_participatory_space_type,\n        weight\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_categories"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_categorizations": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_categorizations", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/categories/stg_decidim_categorizations.sql", "original_file_path": "models/staging/decidim/categories/stg_decidim_categorizations.sql", "unique_id": "model.demo.stg_decidim_categorizations", "fqn": ["demo", "staging", "decidim", "categories", "stg_decidim_categorizations"], "alias": "stg_decidim_categorizations", "checksum": {"name": "sha256", "checksum": "b79de09812a3faf75232e5d456b3354fd58ea0553726e7c0b01d734595d64b34"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table describing entities that are categorized (and sub categorized) within a participatory space", "columns": {"id": {"name": "id", "description": "Unique incremental identifier of the table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_category_id": {"name": "decidim_category_id", "description": "Unique idientifier of the category defined in the 'decidim_categories' table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "categorizable_type": {"name": "categorizable_type", "description": "Type of the entities categorized. ex: 'Decidim::Proposals::Proposal', 'Decidim::Budgets::Project', 'Decidim::Accountability::Result'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "categorizable_id": {"name": "categorizable_id", "description": "For each categorizable type, there is a unique identifier. The categorizable id is that identifier. However multiple categorizable entities can have the same idientifier. ex : All three of these 'Decidim::Proposals::Proposal', 'Decidim::Budgets::Project' and 'Decidim::Accountability::Result' can have the categorizable_id 52.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Creation date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Update date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/categories/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.8067222, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_categorizations\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_categorizations') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_category_id,\n        categorizable_type,\n        categorizable_id,\n        created_at,\n        updated_at\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_categorizations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_categorizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_scopes": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_scopes", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/scopes/stg_decidim_scopes.sql", "original_file_path": "models/staging/decidim/scopes/stg_decidim_scopes.sql", "unique_id": "model.demo.stg_decidim_scopes", "fqn": ["demo", "staging", "decidim", "scopes", "stg_decidim_scopes"], "alias": "stg_decidim_scopes", "checksum": {"name": "sha256", "checksum": "78fb052a78c3ec5ff86af8887b59253923aa986d35fee713b9b57422a4d840e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Scopes are the set of territories or subjects that an Organization has. A scope may have child scopes.", "columns": {"id": {"name": "id", "description": "Unique identifier for the scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_organization_id": {"name": "decidim_organization_id", "description": "Identifier for the Decidim organization to which the scope belongs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the scope was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the scope was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scope_type_id": {"name": "scope_type_id", "description": "Identifier for the type of scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Identifier for the parent scope, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Code associated with the scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "part_of": {"name": "part_of", "description": "IDs of the parent-child scope relationship", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/staging/decidim/scopes/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.811626, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_scopes\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_scopes') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_organization_id,\n        created_at,\n        updated_at,\n        name::jsonb->>'fr' AS name,\n        scope_type_id,\n        parent_id,\n        code,\n        part_of\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_scopes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_scopes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_proposals_votes": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_proposals_votes", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/proposals/stg_decidim_proposals_votes.sql", "original_file_path": "models/staging/decidim/proposals/stg_decidim_proposals_votes.sql", "unique_id": "model.demo.stg_decidim_proposals_votes", "fqn": ["demo", "staging", "decidim", "proposals", "stg_decidim_proposals_votes"], "alias": "stg_decidim_proposals_votes", "checksum": {"name": "sha256", "checksum": "9e3bde2943a6c3cfd7afa06d4acab78502ca706a2bbfc83abe03a4cae27d59a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.544272, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_proposals_votes\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_proposals_proposal_votes') }}\n),\nrenamed AS (\n    SELECT\n        id,\n        decidim_proposal_id,\n        decidim_author_id,\n        created_at,\n        updated_at,\n        weight,\n        temporary\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_proposals_proposal_votes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_proposals_proposal_votes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_proposals_collaborative_drafts": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_proposals_collaborative_drafts", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/proposals/stg_decidim_proposals_collaborative_drafts.sql", "original_file_path": "models/staging/decidim/proposals/stg_decidim_proposals_collaborative_drafts.sql", "unique_id": "model.demo.stg_decidim_proposals_collaborative_drafts", "fqn": ["demo", "staging", "decidim", "proposals", "stg_decidim_proposals_collaborative_drafts"], "alias": "stg_decidim_proposals_collaborative_drafts", "checksum": {"name": "sha256", "checksum": "759545c94982b9f7a19556309bc2eb2be8dc5aa79f473c7d8c433c6b1b85e260"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.545302, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_proposals_collaborative_drafts\"", "raw_code": "WITH source as (\n      SELECT * FROM {{ source('decidim', 'decidim_proposals_collaborative_drafts') }}\n),\nrenamed as (\n    select\n        id,\n        title,\n        body,\n        decidim_component_id,\n        decidim_scope_id,\n        state,\n        reference,\n        address,\n        latitude,\n        longitude,\n        published_at,\n        authors_count,\n        versions_count,\n        contributions_count,\n        created_at,\n        updated_at,\n        coauthorships_count,\n        comments_count,\n        follows_count\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["decidim", "decidim_proposals_collaborative_drafts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_proposals_collaborative_drafts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.stg_decidim_proposals": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_proposals", "resource_type": "model", "package_name": "demo", "path": "staging/decidim/proposals/stg_decidim_proposals.sql", "original_file_path": "models/staging/decidim/proposals/stg_decidim_proposals.sql", "unique_id": "model.demo.stg_decidim_proposals", "fqn": ["demo", "staging", "decidim", "proposals", "stg_decidim_proposals"], "alias": "stg_decidim_proposals", "checksum": {"name": "sha256", "checksum": "c5734b71c06a368a300e5d191fdf8fdea3257641195ec4ed8045421e2ce80130"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.5467541, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_proposals\"", "raw_code": "SELECT\n    id,\n    regexp_replace(title::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') as title,\n    regexp_replace(body::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') as body,\n    'Decidim::Proposals::Proposal' as resource_type,\n    decidim_component_id,\n    decidim_scope_id,\n    created_at,\n    published_at,\n    state,\n    comments_count,\n    endorsements_count,\n    address\nFROM {{ source('decidim', 'decidim_proposals_proposals') }}", "language": "sql", "refs": [], "sources": [["decidim", "decidim_proposals_proposals"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.demo.decidim.decidim_proposals_proposals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.organizations": {"database": "test_lyon", "schema": "prod", "name": "organizations", "resource_type": "model", "package_name": "demo", "path": "marts/organizations.sql", "original_file_path": "models/marts/organizations.sql", "unique_id": "model.demo.organizations", "fqn": ["demo", "marts", "organizations"], "alias": "organizations", "checksum": {"name": "sha256", "checksum": "ddd77d68867258fdee09d89570ff743ec6ff90abf8bd8d3d929d8e41e0a2282c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.580381, "relation_name": "\"test_lyon\".\"prod\".\"organizations\"", "raw_code": "SELECT\n*\nFROM {{ ref (\"int_organizations\")}} AS decidim_organizations", "language": "sql", "refs": [{"name": "int_organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.int_organizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.participations": {"database": "test_lyon", "schema": "prod", "name": "participations", "resource_type": "model", "package_name": "demo", "path": "marts/participations.sql", "original_file_path": "models/marts/participations.sql", "unique_id": "model.demo.participations", "fqn": ["demo", "marts", "participations"], "alias": "participations", "checksum": {"name": "sha256", "checksum": "a31604539d031cc2ecee5548176a89fb9108a14a13e2a8b0daa97f6ed02e83ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.581425, "relation_name": "\"test_lyon\".\"prod\".\"participations\"", "raw_code": "WITH participations_proposals AS (\n            SELECT decidim_users.id,\n                decidim_proposals_proposals.decidim_component_id,\n                'Decidim::Proposals::Proposal' AS \"participation_type\",\n                decidim_proposals_proposals.id::text AS \"participation_id\",\n                decidim_proposals_proposals.created_at AS participation_date\n            FROM {{ ref(\"proposals\")}} AS decidim_proposals_proposals\n                JOIN decidim_coauthorships on decidim_coauthorships.coauthorable_id = decidim_proposals_proposals.id\n                JOIN decidim_users on decidim_users.id = decidim_coauthorships.decidim_author_id\n            where coauthorable_type = 'Decidim::Proposals::Proposal'\n    ), participations_endorsements as (\n            SELECT decidim_users.id,\n                decidim_endorsements.decidim_component_id,\n                'Decidim::Endorsements::Endorsement' as \"participation_type\",\n                decidim_endorsements.id::text as \"participation_id\", \n                decidim_endorsements.created_at as participation_date\n            FROM {{ ref(\"endorsements\")}} as decidim_endorsements\n                JOIN decidim_users on decidim_users.id = decidim_endorsements.decidim_author_id\n    ), participations_comments as (\n            SELECT decidim_users.id,\n                decidim_component_id,\n                'Decidim::Comments::Comment' as \"participation_type\",\n                decidim_comments_comments.id::text as \"participation_id\",\n                decidim_comments_comments.created_at as contribution_date\n            FROM {{ ref(\"comments\")}} decidim_comments_comments\n                JOIN decidim_users on decidim_users.id = decidim_comments_comments.decidim_author_id\n    ), participations_proposal_votes as (\n            SELECT decidim_users.id,\n                decidim_proposals_proposals.decidim_component_id,\n                'Decidim::Proposals::ProposalVote' as \"participation_type\",\n                decidim_proposals_proposal_votes.id::text as \"participation_id\",\n                decidim_proposals_proposal_votes.created_at as participation_date\n            FROM {{ ref(\"proposals_votes\")}} as decidim_proposals_proposal_votes\n                JOIN decidim_users on decidim_users.id = decidim_author_id\n                JOIN {{ ref(\"proposals\")}} as decidim_proposals_proposals on decidim_proposals_proposal_votes.decidim_proposal_id = decidim_proposals_proposals.id\n    ), participations_answers as (\n            SELECT distinct\n                decidim_user_id,\n                decidim_component_id,\n                'Decidim::Forms::Answer' as \"participation_type\",\n              ('x'||lpad(decidim_forms_answers.session_token,16,'0'))::bit(64)::bigint::text as \"participation_id\",\n              decidim_forms_answers.created_at::date as participation_date\n            FROM {{ ref(\"forms_answers\")}} as decidim_forms_answers\n    ), participations_debates as (\n            SELECT decidim_author_id as decidim_user_id,\n                decidim_component_id,\n                'Decidim::Debates::Debate' as \"participation_type\",\n                id::text as participation_id,\n                created_at as participation_date\n            FROM {{ ref(\"debates\")}} decidim_debates_debates\n    ), participations_budgets_projects_votes as (\n            SELECT\n                decidim_user_id,\n                decidim_component_id,\n                'Decidim::Budgets::Project::Vote' as participation_type,\n                order_id::text as participation_id,\n                created_at as participation_date\n            FROM {{ ref(\"projects_votes\")}} decidim_bugdets_projects_votes\n    ), participations_meetings_registrations as (\n            SELECT\n                decidim_user_id,\n                decidim_component_id,\n                'Decidim::Meetings::Registration' as participation_type,\n                decidim_meetings_meetings.id::text as participation_id,\n                decidim_meetings_registrations.created_at as participation_date\n            FROM {{ ref(\"meetings\")}} decidim_meetings_meetings\n                join decidim_meetings_registrations on decidim_meetings_registrations.decidim_meeting_id = decidim_meetings_meetings.id\n    ), participations as (\n        SELECT * FROM participations_proposals union all\n        SELECT * FROM participations_endorsements union all\n        SELECT * FROM participations_comments union all\n        SELECT * FROM participations_proposal_votes union all\n        SELECT * from participations_answers union all\n        SELECT * from participations_debates union all\n        SELECT * from participations_budgets_projects_votes union all\n        SELECT * from participations_meetings_registrations\n    )\n    SELECT\n        distinct participations.id as \"user_id\",\n        substr(participation_id,1,10)::bigint as participation_id,\n        decidim_component_id,\n        participation_type,\n        participation_date\n    from participations", "language": "sql", "refs": [{"name": "proposals", "package": null, "version": null}, {"name": "endorsements", "package": null, "version": null}, {"name": "comments", "package": null, "version": null}, {"name": "proposals_votes", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "forms_answers", "package": null, "version": null}, {"name": "debates", "package": null, "version": null}, {"name": "projects_votes", "package": null, "version": null}, {"name": "meetings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.proposals", "model.demo.endorsements", "model.demo.comments", "model.demo.proposals_votes", "model.demo.forms_answers", "model.demo.debates", "model.demo.projects_votes", "model.demo.meetings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.attachments": {"database": "test_lyon", "schema": "prod", "name": "attachments", "resource_type": "model", "package_name": "demo", "path": "marts/attachments.sql", "original_file_path": "models/marts/attachments.sql", "unique_id": "model.demo.attachments", "fqn": ["demo", "marts", "attachments"], "alias": "attachments", "checksum": {"name": "sha256", "checksum": "ee218fea222850e098dba008928a144007e80c0a64925d81c164d14a644220d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.5828009, "relation_name": "\"test_lyon\".\"prod\".\"attachments\"", "raw_code": "WITH org AS (\n    -- Assumption: There is only one organization, so we select the first available host\n    SELECT host\n    FROM {{ ref(\"organizations\") }}\n    LIMIT 1\n)\nSELECT\n    decidim_attachments.id,\n    decidim_attachments.file,\n    decidim_attachments.attached_to_id,\n    decidim_attachments.attached_to_type,\n    concat('https://', org.host, '/uploads/decidim/attachment/file/', decidim_attachments.id, '/', decidim_attachments.file) AS url\nFROM\n    {{ ref(\"stg_decidim_attachments\") }} AS decidim_attachments\nCROSS JOIN org", "language": "sql", "refs": [{"name": "organizations", "package": null, "version": null}, {"name": "stg_decidim_attachments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.organizations", "model.demo.stg_decidim_attachments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.comments": {"database": "test_lyon", "schema": "prod", "name": "comments", "resource_type": "model", "package_name": "demo", "path": "marts/comments/comments.sql", "original_file_path": "models/marts/comments/comments.sql", "unique_id": "model.demo.comments", "fqn": ["demo", "marts", "comments", "comments"], "alias": "comments", "checksum": {"name": "sha256", "checksum": "264b5c2b6a1655529133aee76e25d9af8955987a052e972a32986255c1550005"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_author_id"], "type": "btree"}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_author_id"], "type": "btree"}]}, "created_at": 1727441769.583959, "relation_name": "\"test_lyon\".\"prod\".\"comments\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_author_id'], 'type': 'btree'},\n    ]\n)}}\n\n\n{% set commentable_tables = [\n    {\"table\": \"stg_decidim_accountability_results\", \"type\": \"Decidim::Accountability::Result\"},\n    {\"table\": \"blogs_posts\", \"type\": \"Decidim::Blogs::Post\"},\n    {\"table\": \"budgets_projects\", \"type\": \"Decidim::Budgets::Project\"},\n    {\"table\": \"debates\", \"type\": \"Decidim::Debates::Debate\"},\n    {\"table\": \"meetings\", \"type\": \"Decidim::Meetings::Meeting\"},\n    {\"table\": \"proposals\", \"type\": \"Decidim::Proposals::Proposal\"},\n    {\"table\": \"stg_decidim_proposals_collaborative_drafts\", \"type\": \"Decidim::Proposals::CollaborativeDraft\"}\n] %}\n\nWITH commentaries AS (\n    {% for commentable in commentable_tables %}\n    SELECT\n        comments.*, \n        {{ ref(commentable.table) }}.decidim_component_id AS \"decidim_component_id\"\n    FROM {{ ref(commentable.table) }}\n    JOIN {{ ref(\"stg_decidim_comments\") }} AS comments\n        on comments.decidim_root_commentable_id = {{ ref(commentable.table) }}.id\n        and comments.decidim_root_commentable_type = '{{ commentable.type }}'\n    {% if not loop.last %} union all {% endif %}\n    {% endfor %}\n)\n\nSELECT\n    commentaries.id,\n    commentaries.decidim_commentable_id,\n    commentaries.decidim_commentable_type,\n    commentaries.decidim_author_id,\n    commentaries.created_at,\n    commentaries.depth,\n    commentaries.alignment,\n    commentaries.decidim_root_commentable_id,\n    commentaries.decidim_root_commentable_type,\n    commentaries.decidim_author_type,\n    commentaries.body,\n    commentaries.decidim_component_id,\n    components.ps_slug,\n    concat('https://', components.organization_host, '/', components.ps_space_type_slug, '/', components.ps_slug, '/f/', components.id, '/', components.manifest_name,'/', commentaries.decidim_root_commentable_id, '?commentId=', commentaries.id, '#comment_', commentaries.id) AS comment_url\nFROM commentaries\nJOIN {{ ref('components') }} AS components\n    on components.id = commentaries.decidim_component_id\nLEFT JOIN {{ ref('stg_decidim_moderations') }} AS decidim_moderations\n    on decidim_moderations.decidim_reportable_type = 'Decidim::Comments::Comment' \n    and decidim_moderations.decidim_reportable_id = commentaries.id\nwhere decidim_moderations.hidden_at is null", "language": "sql", "refs": [{"name": "stg_decidim_accountability_results", "package": null, "version": null}, {"name": "stg_decidim_accountability_results", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "stg_decidim_accountability_results", "package": null, "version": null}, {"name": "blogs_posts", "package": null, "version": null}, {"name": "blogs_posts", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "blogs_posts", "package": null, "version": null}, {"name": "budgets_projects", "package": null, "version": null}, {"name": "budgets_projects", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "budgets_projects", "package": null, "version": null}, {"name": "debates", "package": null, "version": null}, {"name": "debates", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "debates", "package": null, "version": null}, {"name": "meetings", "package": null, "version": null}, {"name": "meetings", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "meetings", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "stg_decidim_proposals_collaborative_drafts", "package": null, "version": null}, {"name": "stg_decidim_proposals_collaborative_drafts", "package": null, "version": null}, {"name": "stg_decidim_comments", "package": null, "version": null}, {"name": "stg_decidim_proposals_collaborative_drafts", "package": null, "version": null}, {"name": "components", "package": null, "version": null}, {"name": "stg_decidim_moderations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_accountability_results", "model.demo.stg_decidim_comments", "model.demo.blogs_posts", "model.demo.budgets_projects", "model.demo.debates", "model.demo.meetings", "model.demo.proposals", "model.demo.stg_decidim_proposals_collaborative_drafts", "model.demo.components", "model.demo.stg_decidim_moderations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.followings": {"database": "test_lyon", "schema": "prod", "name": "followings", "resource_type": "model", "package_name": "demo", "path": "marts/followings/followings.sql", "original_file_path": "models/marts/followings/followings.sql", "unique_id": "model.demo.followings", "fqn": ["demo", "marts", "followings", "followings"], "alias": "followings", "checksum": {"name": "sha256", "checksum": "837620ce549291c73aa7951545d3b3234551fa3990a9eb5c0ddb97c51c8f0547"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"type": "btree", "columns": ["decidim_user_id"]}]}, "tags": [], "description": "Every follow action performed on the platform. Decidim counts follow in two different ways: follows on a specific resource (proposal, commentary, etc.) named 'real follow' and follows made on a component; every resource contained in that component is then marked as followed.", "columns": {"following_way": {"name": "following_way", "description": "Describes if the follow is either on a specific resource ('real_follow') or a component as a whole ('ancestor_follow')", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/followings/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"type": "btree", "columns": ["decidim_user_id"]}]}, "created_at": 1727441769.812691, "relation_name": "\"test_lyon\".\"prod\".\"followings\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_user_id'], 'type': 'btree'},\n    ]\n)}}\n\n\nWITH followings_proposals AS (\n    SELECT\n        decidim_follows.*,\n        decidim_proposals_proposals.decidim_component_id,\n        url AS followable_url,\n        title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n    JOIN {{ ref(\"proposals\")}} decidim_proposals_proposals\n        ON decidim_proposals_proposals.id = decidim_follows.decidim_followable_id\n        AND decidim_proposals_proposals.resource_type = decidim_follows.decidim_followable_type\n    ), followings_components AS (\n    SELECT\n        distinct decidim_follows.*,\n        -1 AS \"decidim_components.id\",\n        ps_url AS followable_url,\n        ps_title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n    JOIN {{ ref(\"components\")}} decidim_components\n        ON decidim_components.ps_id = decidim_followable_id\n        AND ps_type = decidim_followable_type\n    ), followings_debates AS (\n    SELECT\n        decidim_follows.*,\n        decidim_debates_debates.decidim_component_id,\n        debate_url AS followable_url,\n        title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n        JOIN {{ ref(\"debates\")}} decidim_debates_debates ON decidim_debates_debates.id = decidim_followable_id\n            AND resource_type =  decidim_followable_type\n    ), followings_blogs_posts AS (\n    SELECT\n        decidim_follows.*,\n        decidim_blogs_posts.decidim_component_id,\n        post_url AS followable_url,\n        title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n        JOIN {{ ref(\"blogs_posts\")}} decidim_blogs_posts\n            ON decidim_blogs_posts.id = decidim_followable_id\n            AND resource_type = decidim_followable_type\n    ), followings_users AS (\n    SELECT\n        decidim_follows.*,\n        -1 AS decidim_component_id,\n        '' AS followable_url,\n        '' AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n        JOIN {{ ref(\"int_users\")}} decidim_users\n            ON decidim_users.id = decidim_followable_id\n    where decidim_followable_type = 'Decidim::UserBaseEntity'\n    ), followings_meetings AS (\n    SELECT\n        decidim_follows.*,\n        decidim_component_id,\n        meeting_url AS followable_url,\n        title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n        JOIN {{ ref(\"meetings\")}} decidim_meetings\n            ON decidim_meetings.id = decidim_followable_id\n            AND resource_type = decidim_followable_type\n    ), followings_budgets_projects AS (\n    SELECT\n        decidim_follows.*,\n        decidim_component_id,\n        project_url AS followable_url,\n        title AS followable_title\n    FROM {{ ref(\"stg_decidim_follows\")}} AS decidim_follows\n        join {{ ref(\"budgets_projects\")}} decidim_budgets_projects\n            ON decidim_budgets_projects.id = decidim_followable_id\n            AND resource_type = decidim_followable_type\n    ), followings AS (\n    SELECT * FROM followings_proposals union all\n    SELECT * FROM followings_components union all\n    SELECT * FROM followings_debates union all\n    SELECT * FROM followings_blogs_posts union all\n    SELECT * FROM followings_users union all\n    SELECT * FROM followings_meetings union all\n    SELECT * FROM followings_budgets_projects\n    ), real_follow AS (\n    SELECT\n        followings.*,\n        'real_follow' AS \"following_way\",\n        decidim_followable_id AS \"root_decidim_followable_id\",\n        decidim_followable_type AS \"root_decidim_followable_type\",\n        followable_url AS \"root_following_url\",\n        followable_title AS \"root_followable_title\"\n    FROM followings,\n        lateral (SELECT (case array_length(array_remove(string_to_array(decidim_followable_type, ':', ''),null),1) when 2 then 'Ancestor' else 'Child' end) AS followable_meta_type) p_is_ps\n    where followable_meta_type != 'Ancestor'\n    ), ancestor_follow AS (\n        SELECT\n            distinct\n            followings.*,\n            'ancestor_follow' AS \"following_way\",\n            real_follow.decidim_followable_id AS \"root_decidim_followable_id\",\n            real_follow.decidim_followable_type AS \"root_decidim_followable_type\",\n            real_follow.followable_url AS \"root_following_url\",\n            real_follow.followable_title AS \"root_followable_title\"\n        FROM real_follow\n            join {{ ref(\"components\")}} AS components ON components.id = real_follow.decidim_component_id\n            join followings ON followings.decidim_followable_id = components.ps_id AND followings.decidim_followable_type = components.ps_type\n    ), follows AS (\n          SELECT * FROM real_follow union all\n          SELECT * FROM ancestor_follow\n      )\nSELECT id,\n    decidim_component_id,\n    decidim_user_id,\n    root_decidim_followable_id,\n    root_decidim_followable_type,\n    root_followable_title,\n    created_at,\n    root_following_url,\n    decidim_followable_id,\n    decidim_followable_type,\n    followable_url,\n    following_way\nFROM follows", "language": "sql", "refs": [{"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "components", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "debates", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "blogs_posts", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "int_users", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "meetings", "package": null, "version": null}, {"name": "stg_decidim_follows", "package": null, "version": null}, {"name": "budgets_projects", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_follows", "model.demo.proposals", "model.demo.components", "model.demo.debates", "model.demo.blogs_posts", "model.demo.int_users", "model.demo.meetings", "model.demo.budgets_projects"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.forms": {"database": "test_lyon", "schema": "prod", "name": "forms", "resource_type": "model", "package_name": "demo", "path": "marts/forms/forms.sql", "original_file_path": "models/marts/forms/forms.sql", "unique_id": "model.demo.forms", "fqn": ["demo", "marts", "forms", "forms"], "alias": "forms", "checksum": {"name": "sha256", "checksum": "6719434e32f89aa082de26a828fad3bc6349b23810b833e717a98325f89d1c0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"type": "btree", "columns": ["id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"type": "btree", "columns": ["id"]}]}, "created_at": 1727441769.593865, "relation_name": "\"test_lyon\".\"prod\".\"forms\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH forms_meetings AS (\n    SELECT decidim_forms_questionnaires.id AS questionnaire_id,\n        decidim_forms_questionnaires.title,\n        decidim_meetings_meetings.decidim_component_id\n    FROM {{ ref(\"stg_decidim_forms_questionnaires\")}} decidim_forms_questionnaires\n    JOIN {{ ref(\"stg_decidim_meetings\")}} decidim_meetings_meetings ON decidim_meetings_meetings.id = decidim_forms_questionnaires.questionnaire_for_id\n    WHERE questionnaire_for_type = 'Decidim::Meetings::Meeting'\n), forms_surveys AS (\n    SELECT decidim_forms_questionnaires.id AS questionnaire_id,\n        decidim_forms_questionnaires.title,\n        decidim_surveys_surveys.decidim_component_id\n    FROM decidim_forms_questionnaires\n    JOIN {{ ref(\"stg_decidim_surveys\")}} decidim_surveys_surveys ON decidim_surveys_surveys.id = questionnaire_for_id\n    WHERE questionnaire_for_type = 'Decidim::Surveys::Survey'\n), forms AS (\n    SELECT * FROM forms_meetings UNION ALL\n    SELECT * FROM forms_surveys \n)\nSELECT\n    forms.questionnaire_id AS id,\n    title::jsonb->>'fr' AS title,\n    decidim_components.id AS decidim_component_id,\n    concat ('https://',organization_host, '/', ps_space_type_slug,'/', ps_slug, '/f/', decidim_component_id) AS \"questionnaire_url\"\nFROM forms\nJOIN {{ ref(\"components\")}} decidim_components ON decidim_components.id = forms.decidim_component_id", "language": "sql", "refs": [{"name": "stg_decidim_forms_questionnaires", "package": null, "version": null}, {"name": "stg_decidim_meetings", "package": null, "version": null}, {"name": "stg_decidim_surveys", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_forms_questionnaires", "model.demo.stg_decidim_meetings", "model.demo.stg_decidim_surveys", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.forms_answers": {"database": "test_lyon", "schema": "prod", "name": "forms_answers", "resource_type": "model", "package_name": "demo", "path": "marts/forms/forms_answers.sql", "original_file_path": "models/marts/forms/forms_answers.sql", "unique_id": "model.demo.forms_answers", "fqn": ["demo", "marts", "forms", "forms_answers"], "alias": "forms_answers", "checksum": {"name": "sha256", "checksum": "59df8d1b703c307d94beb38013950f0323576519f4dea59e8d9431119224fed0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_user_id"], "type": "btree"}]}, "tags": [], "description": "Table gathering all types of answers (long, short, optional, sorting and matrix). ", "columns": {"sorting_points": {"name": "sorting_points", "description": "In order to evaluate the weight of the sorting answers, points are given to the answer according to its sorting position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/forms/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_user_id"], "type": "btree"}]}, "created_at": 1727441769.81677, "relation_name": "\"test_lyon\".\"prod\".\"forms_answers\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_user_id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH answers_short_and_long_answer AS (\n    SELECT * FROM {{ ref('answers_short_and_long_answer') }}\n), answers_option_and_sorting AS (\n    SELECT * FROM {{ ref('answers_option_and_sorting') }}\n), answers_matrix AS (\n    SELECT * FROM {{ ref('answers_matrix') }}\n), answers_file AS (\n    SELECT * FROM {{ ref('answers_file') }}\n), answers AS (\n    SELECT * FROM answers_short_and_long_answer\n    UNION ALL\n    SELECT * FROM answers_option_and_sorting\n    UNION ALL\n    SELECT * FROM answers_matrix\n    UNION ALL\n    SELECT * FROM answers_file\n)\n\nSELECT\n    answers.decidim_user_id,\n    answers.session_token,\n    answers.ip_hash,\n    answers.question_type,\n    answers.body AS question_title,\n    btrim(answers.answer, '\"') AS answer,\n    answers.sub_matrix_question,\n    answers.custom_body,\n    answers.sorting_position,\n    answers.decidim_questionnaire_id,\n    decidim_forms_questionnaires.title AS form_title,\n    decidim_forms_questionnaires.decidim_component_id,\n    (CASE answers.sorting_position\n      WHEN 0 THEN 10\n      WHEN 1 THEN 9\n      WHEN 2 THEN 8\n      WHEN 3 THEN 7\n      WHEN 4 THEN 6\n      WHEN 5 THEN 5\n      WHEN 6 THEN 4\n      WHEN 7 THEN 3\n      WHEN 8 THEN 2\n      WHEN 9 THEN 1\n      ELSE -1\n    END) AS sorting_points,\n    answers.position,\n    answers.created_at,\n    answers.author_status\nFROM answers\nJOIN {{ ref('forms') }} AS decidim_forms_questionnaires ON decidim_forms_questionnaires.id = answers.decidim_questionnaire_id\nORDER BY session_token, position", "language": "sql", "refs": [{"name": "answers_short_and_long_answer", "package": null, "version": null}, {"name": "answers_option_and_sorting", "package": null, "version": null}, {"name": "answers_matrix", "package": null, "version": null}, {"name": "answers_file", "package": null, "version": null}, {"name": "forms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.answers_short_and_long_answer", "model.demo.answers_option_and_sorting", "model.demo.answers_matrix", "model.demo.answers_file", "model.demo.forms"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.blogs_posts": {"database": "test_lyon", "schema": "prod", "name": "blogs_posts", "resource_type": "model", "package_name": "demo", "path": "marts/blogs_posts/blogs_posts.sql", "original_file_path": "models/marts/blogs_posts/blogs_posts.sql", "unique_id": "model.demo.blogs_posts", "fqn": ["demo", "marts", "blogs_posts", "blogs_posts"], "alias": "blogs_posts", "checksum": {"name": "sha256", "checksum": "e5194c7f72ff483a0fa8a5c9e185580f607b35ee90cf1fd0ab99b36efb699681"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.596417, "relation_name": "\"test_lyon\".\"prod\".\"blogs_posts\"", "raw_code": "SELECT\n    decidim_blogs_posts.id,\n    decidim_blogs_posts.title,\n    decidim_blogs_posts.body,\n    decidim_blogs_posts.decidim_component_id,\n    decidim_blogs_posts.created_at,\n    decidim_blogs_posts.decidim_author_id,\n    decidim_blogs_posts.resource_type,\n    concat('https://', decidim_components.organization_host, '/', decidim_components.ps_space_type_slug, '/', decidim_components.ps_slug, '/f/', decidim_components.id, '/posts/', decidim_blogs_posts.id) AS post_url\nFROM {{ ref (\"stg_decidim_blogs_posts\")}} AS decidim_blogs_posts\nJOIN {{ ref (\"components\")}} AS decidim_components ON decidim_components.id = decidim_component_id", "language": "sql", "refs": [{"name": "stg_decidim_blogs_posts", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_blogs_posts", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.debates": {"database": "test_lyon", "schema": "prod", "name": "debates", "resource_type": "model", "package_name": "demo", "path": "marts/debates/debates.sql", "original_file_path": "models/marts/debates/debates.sql", "unique_id": "model.demo.debates", "fqn": ["demo", "marts", "debates", "debates"], "alias": "debates", "checksum": {"name": "sha256", "checksum": "7542d1f3f81682850fc1525d5cf6d64453d81fb8de59a12b53faea6bc025db62"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.597547, "relation_name": "\"test_lyon\".\"prod\".\"debates\"", "raw_code": "WITH categorizations AS (\n    {{ categorizations_filter('Decidim::Debates::Debate') }}\n)\nSELECT\n    decidim_debates_debates.id,\n    decidim_debates_debates.title,\n    decidim_debates_debates.description,\n    decidim_debates_debates.start_time,\n    decidim_debates_debates.end_time,\n    decidim_debates_debates.decidim_component_id,\n    decidim_debates_debates.decidim_author_id,\n    decidim_debates_debates.created_at,\n    decidim_debates_debates.closed_at,\n    decidim_components.ps_slug,\n    concat(\n        'https://',\n        decidim_components.organization_host,\n        '/',\n        decidim_components.ps_space_type_slug,\n        '/',\n        decidim_components.ps_slug,\n        '/f/',\n        decidim_components.id,\n        '/debates/',\n        decidim_debates_debates.id\n    ) AS debate_url,\n    decidim_debates_debates.resource_type,\n    categorizations.categories,\n    coalesce(categorizations.categories[1], 'Sans cat\u00e9gorie') AS first_category,\n    categorizations.sub_categories,\n    coalesce(categorizations.sub_categories[1], 'Sans sous-cat\u00e9gorie') AS first_sub_category\nFROM {{ ref(\"stg_decidim_debates\")}} AS decidim_debates_debates\n    JOIN {{ ref(\"components\")}} decidim_components on decidim_components.id = decidim_component_id\n    LEFT JOIN categorizations on categorizations.categorizable_id = decidim_debates_debates.id", "language": "sql", "refs": [{"name": "categorizations", "package": null, "version": null}, {"name": "stg_decidim_debates", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.demo.categorizations_filter"], "nodes": ["model.demo.categorizations", "model.demo.stg_decidim_debates", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.components": {"database": "test_lyon", "schema": "prod", "name": "components", "resource_type": "model", "package_name": "demo", "path": "marts/components/components.sql", "original_file_path": "models/marts/components/components.sql", "unique_id": "model.demo.components", "fqn": ["demo", "marts", "components", "components"], "alias": "components", "checksum": {"name": "sha256", "checksum": "bb67bddf26ab7bbdfd5a55dae7843fdcad38758cb38831b5b3a53291822e5b1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}]}, "tags": [], "description": "Model representing the components associated with participatory spaces in Decidim.", "columns": {"id": {"name": "id", "description": "Unique identifier for the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manifest_name": {"name": "manifest_name", "description": "Name of the component's manifest file. The manifest defines the component's configuration and metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translated_manifest_name": {"name": "translated_manifest_name", "description": "Translated name of the component's manifest.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "component_name": {"name": "component_name", "description": "Full name of the component, including its translated name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "Date when the component was published.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date when the component was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "component_url": {"name": "component_url", "description": "URL for accessing the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_id": {"name": "ps_id", "description": "Identifier of the associated participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_published_at": {"name": "ps_published_at", "description": "Publication date of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_title": {"name": "ps_title", "description": "Title of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_subtitle": {"name": "ps_subtitle", "description": "Subtitle of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_slug": {"name": "ps_slug", "description": "Slug of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_type": {"name": "ps_type", "description": "Type of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_space_type_slug": {"name": "ps_space_type_slug", "description": "Slug for the type of participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ps_url": {"name": "ps_url", "description": "URL of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_organization_id": {"name": "decidim_organization_id", "description": "Identifier of the Decidim organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_host": {"name": "organization_host", "description": "Host of the Decidim organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/components/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}]}, "created_at": 1727441769.8202848, "relation_name": "\"test_lyon\".\"prod\".\"components\"", "raw_code": "-- Warning: are not taken by default into account Conferences, Consultations, Elections, Initiatives, Votations\n\n{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH assemblies_spaces AS (\n    SELECT\n        id AS ps_id,\n        published_at AS ps_published_at,\n        title AS ps_title,\n        subtitle AS ps_subtitle,\n        slug AS ps_slug,\n        decidim_organization_id,\n        'Decidim::Assembly' AS ps_type,\n        'assemblies' AS ps_space_type_slug\n    FROM {{ ref (\"stg_decidim_assemblies\")}}\n),\nparticipatory_processes_spaces AS (\n    SELECT\n        id AS ps_id, \n        published_at AS ps_published_at, \n        title AS ps_title, \n        subtitle AS ps_subtitle, \n        slug AS ps_slug, \n        decidim_organization_id, \n        'Decidim::ParticipatoryProcess' AS ps_type,\n        'processes' AS ps_space_type_slug\n    FROM {{ ref (\"stg_decidim_participatory_processes\")}}\n), \nparticipatory_spaces AS (\n    SELECT * FROM assemblies_spaces \n    UNION ALL\n    SELECT * FROM participatory_processes_spaces\n),\ncomponents AS (\n    SELECT \n        decidim_components.id,\n        decidim_components.manifest_name,\n        decidim_components.translated_manifest_name,\n        concat(decidim_components.name, ' (', decidim_components.translated_manifest_name, ')') AS component_name,\n        decidim_components.published_at,\n        decidim_components.created_at,\n        concat('https://',decidim_organizations.host,'/', participatory_spaces.ps_space_type_slug, '/', participatory_spaces.ps_slug,'/f/', decidim_components.id) AS component_url,\n        participatory_spaces.ps_id, \n        participatory_spaces.ps_published_at, \n        participatory_spaces.ps_title, \n        participatory_spaces.ps_subtitle, \n        participatory_spaces.ps_slug, \n        participatory_spaces.ps_type,\n        participatory_spaces.ps_space_type_slug,\n        concat('https://',decidim_organizations.host,'/', participatory_spaces.ps_space_type_slug, '/', participatory_spaces.ps_slug,'/') AS ps_url,\n        decidim_organization_id, \n        decidim_organizations.host AS organization_host\n    FROM {{ ref (\"int_components\")}} AS decidim_components\n    JOIN participatory_spaces ON participatory_spaces.ps_type = decidim_components.participatory_space_type AND decidim_components.participatory_space_id = participatory_spaces.ps_id \n    JOIN {{ ref (\"int_organizations\")}} AS decidim_organizations ON decidim_organizations.id = participatory_spaces.decidim_organization_id\n    WHERE participatory_spaces.ps_published_at IS NOT NULL\n)\nSELECT * FROM components", "language": "sql", "refs": [{"name": "stg_decidim_assemblies", "package": null, "version": null}, {"name": "stg_decidim_participatory_processes", "package": null, "version": null}, {"name": "int_components", "package": null, "version": null}, {"name": "int_organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_assemblies", "model.demo.stg_decidim_participatory_processes", "model.demo.int_components", "model.demo.int_organizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.categorizations": {"database": "test_lyon", "schema": "prod", "name": "categorizations", "resource_type": "model", "package_name": "demo", "path": "marts/categorizations/categorizations.sql", "original_file_path": "models/marts/categorizations/categorizations.sql", "unique_id": "model.demo.categorizations", "fqn": ["demo", "marts", "categorizations", "categorizations"], "alias": "categorizations", "checksum": {"name": "sha256", "checksum": "ced1275a578c4c2efb0122b46382132d550a2604a10306f2fa59c0191ad11d18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.601779, "relation_name": "\"test_lyon\".\"prod\".\"categorizations\"", "raw_code": "WITH main_categories AS (\n    SELECT\n        decidim_categories.id AS id,\n        decidim_categories.name AS category_name,\n        0 AS child_id,\n        '' AS child_name,\n        decidim_categorizations.categorizable_id,\n        decidim_categorizations.categorizable_type\n    FROM {{ ref (\"stg_decidim_categorizations\")}} AS decidim_categorizations\n    JOIN {{ ref (\"stg_decidim_categories\")}} AS decidim_categories ON decidim_categories.id = decidim_categorizations.decidim_category_id\n    WHERE decidim_categories.parent_id IS NULL\n), \nsub_categories AS (  \n    SELECT\n        parent_categories.id AS id,\n        parent_categories.name AS category_name,\n        decidim_categories.id AS child_id,\n        decidim_categories.name AS child_name,\n        decidim_categorizations.categorizable_id,\n        decidim_categorizations.categorizable_type\n    FROM {{ ref (\"stg_decidim_categorizations\")}} AS decidim_categorizations\n    JOIN {{ ref (\"stg_decidim_categories\")}} AS decidim_categories ON decidim_categories.id = decidim_categorizations.decidim_category_id\n    LEFT JOIN {{ ref (\"stg_decidim_categories\")}} AS parent_categories ON decidim_categories.parent_id = parent_categories.id\n    WHERE decidim_categories.parent_id IS NOT NULL\n), \ncategories AS (\n    SELECT * FROM main_categories \n    UNION ALL\n    SELECT * FROM sub_categories\n)\nSELECT  * FROM categories", "language": "sql", "refs": [{"name": "stg_decidim_categorizations", "package": null, "version": null}, {"name": "stg_decidim_categories", "package": null, "version": null}, {"name": "stg_decidim_categorizations", "package": null, "version": null}, {"name": "stg_decidim_categories", "package": null, "version": null}, {"name": "stg_decidim_categories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_categorizations", "model.demo.stg_decidim_categories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.endorsements": {"database": "test_lyon", "schema": "prod", "name": "endorsements", "resource_type": "model", "package_name": "demo", "path": "marts/endorsements/endorsements.sql", "original_file_path": "models/marts/endorsements/endorsements.sql", "unique_id": "model.demo.endorsements", "fqn": ["demo", "marts", "endorsements", "endorsements"], "alias": "endorsements", "checksum": {"name": "sha256", "checksum": "269e0015542536377fb502c1eee1c1b71b8d585f7758d0d95c5d95ed1c5ab575"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_author_id"], "type": "btree"}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_author_id"], "type": "btree"}]}, "created_at": 1727441769.602952, "relation_name": "\"test_lyon\".\"prod\".\"endorsements\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_author_id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH endorsements_proposals AS (\n    SELECT\n        decidim_endorsements.*,\n        decidim_component_id\n    FROM {{ ref(\"stg_decidim_endorsements\")}} AS decidim_endorsements\n        JOIN {{ ref(\"stg_decidim_proposals\")}} decidim_proposals_proposals on decidim_endorsements.resource_id = decidim_proposals_proposals.id\n        and decidim_proposals_proposals.resource_type = decidim_endorsements.resource_type\n), endorsements_debates AS (\n    SELECT\n        decidim_endorsements.*,\n        decidim_component_id\n    FROM {{ ref(\"stg_decidim_endorsements\")}} AS decidim_endorsements\n        JOIN {{ ref(\"stg_decidim_debates\")}} AS decidim_debates_debates on decidim_endorsements.resource_id = decidim_debates_debates.id\n        and decidim_debates_debates.resource_type = decidim_endorsements.resource_type\n), endorsements_blogs_posts AS (\n    SELECT\n        decidim_endorsements.*,\n        decidim_component_id\n    FROM {{ ref(\"stg_decidim_endorsements\")}} AS decidim_endorsements\n        JOIN {{ ref(\"stg_decidim_blogs_posts\")}} AS decidim_blogs_posts on decidim_endorsements.resource_id = decidim_blogs_posts.id\n        and decidim_blogs_posts.resource_type = decidim_endorsements.resource_type\n), endorsements as (\n    SELECT * FROM endorsements_proposals union all\n    SELECT * FROM endorsements_debates union all\n    SELECT * FROM endorsements_blogs_posts\n)\n\nSELECT\n    endorsements.id,\n    endorsements.resource_type,\n    endorsements.resource_id,\n    endorsements.decidim_author_type,\n    endorsements.decidim_author_id,\n    endorsements.created_at,\n    endorsements.updated_at,\n    endorsements.decidim_component_id\nFROM endorsements\nLEFT JOIN {{ ref(\"stg_decidim_moderations\")}} AS decidim_moderations\n  ON decidim_moderations.decidim_reportable_type = endorsements.resource_type\n  AND decidim_moderations.decidim_reportable_id = endorsements.resource_id\nWHERE decidim_moderations.hidden_at IS NULL", "language": "sql", "refs": [{"name": "stg_decidim_endorsements", "package": null, "version": null}, {"name": "stg_decidim_proposals", "package": null, "version": null}, {"name": "stg_decidim_endorsements", "package": null, "version": null}, {"name": "stg_decidim_debates", "package": null, "version": null}, {"name": "stg_decidim_endorsements", "package": null, "version": null}, {"name": "stg_decidim_blogs_posts", "package": null, "version": null}, {"name": "stg_decidim_moderations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_endorsements", "model.demo.stg_decidim_proposals", "model.demo.stg_decidim_debates", "model.demo.stg_decidim_blogs_posts", "model.demo.stg_decidim_moderations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.users": {"database": "test_lyon", "schema": "prod", "name": "users", "resource_type": "model", "package_name": "demo", "path": "marts/users/users.sql", "original_file_path": "models/marts/users/users.sql", "unique_id": "model.demo.users", "fqn": ["demo", "marts", "users", "users"], "alias": "users", "checksum": {"name": "sha256", "checksum": "64b40467d6c14d708c5428be0ac86ad87f32aa2a04021c09d7e4bf5fda90d0b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "All created users on your platform (includes admins, invited, managed, reported, blocked and deleted users)", "columns": {"id": {"name": "id", "description": "ID of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sign_in_count": {"name": "sign_in_count", "description": "Number of times the user signed in on the platform", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sign_in_frequency": {"name": "sign_in_frequency", "description": "Classification of sign-in counts in human-readable categories", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_sign_in_at": {"name": "last_sign_in_at", "description": "Last time the user signed in on the platform", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Date of creation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Date of update", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invitation_created_at": {"name": "invitation_created_at", "description": "Users can either register on the platform by themselves or by being invited. If empty, it means the user self-registered. Else it'll give the time the invitation of the user was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invitation_sent_at": {"name": "invitation_sent_at", "description": "Users can either register on the platform by themselves or by being invited. If empty, it means the user self-registered. Else it'll give the time the invitation of the user was sent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invitation_accepted_at": {"name": "invitation_accepted_at", "description": "Users can either register on the platform by themselves or by being invited. If empty, it means the user self-registered. Else it'll give the time the invitation of the user was accepted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invited_by_id": {"name": "invited_by_id", "description": "ID of the user that invited that user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invited_by_type": {"name": "invited_by_type", "description": "Users can either register on the platform by themselves or by being invited. If empty, it means the user self-registered. Else it'll give the type of the inviter (whether an organization, a single user etc.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_organization_id": {"name": "decidim_organization_id", "description": "ID of organization to which belong the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmed_at": {"name": "confirmed_at", "description": "Date at which the user confirmed its account. Empty if the account was not confirmed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmation_token": {"name": "confirmation_token", "description": "Token of account confirmation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unconfirmed_email": {"name": "unconfirmed_email", "description": "Whether or not the user has confirmed its email.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "locale": {"name": "locale", "description": "Language used by the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "A user can choose to delete its account. If empty, it means the user still has an account. If not, it gives the time at which the user deleted it.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admin": {"name": "admin", "description": "Whether or not the user is administrator of the platform", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "managed": {"name": "managed", "description": "A user can be managed. It means that someone else can participate in its name. This field indicate whether or not the user is managed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "roles": {"name": "roles", "description": "A user can have different roles inside a Decidim platform. This field list all roles that the user have", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "Nickname of the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accepted_tos_version": {"name": "accepted_tos_version", "description": "When registering on the platform, a user must accept the Terms of Services. These terms can be versionized. This field give the version of the Terms of Services that was accepted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of user can be a group, a single person, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "following_count": {"name": "following_count", "description": "Number of resources followed by the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "followers_count": {"name": "followers_count", "description": "Number of people that follows the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_attempts": {"name": "failed_attempts", "description": "Number of time the user failed to sign in", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "locked_at": {"name": "locked_at", "description": "Datetime at which the user was blocked", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admin_terms_accepted_at": {"name": "admin_terms_accepted_at", "description": "If the user is an admin, gives the datetime at which he/she accepted the terms of use", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blocked": {"name": "blocked", "description": "Whether or not the user was blocked", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "blocked_at": {"name": "blocked_at", "description": "Datetime at which the user was blocked. Empty if not blocked", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmed": {"name": "confirmed", "description": "Whether or not the account of the registration of the user was confirmed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "URL of the user profile", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "extended_data": {"name": "extended_data", "description": "Decidim stores in this field all data related to the user that doesn't fit into a specific column. Used in multiple Decidim modules to describe the user more precisely. Informations regarding what happens on a page and its associated metrics like visits, time spent, exits, date, url, label.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_endorsing": {"name": "is_endorsing", "description": "Indicates if the user .....", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_following": {"name": "is_following", "description": "Indicates if the user .....", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_authored_comment": {"name": "has_authored_comment", "description": "Indicates if the user has authored a comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_voted": {"name": "has_voted", "description": "Indicates if the user has voted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_authored_proposal": {"name": "has_authored_proposal", "description": "Indicates if the user has authored a proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "has_answered_survey": {"name": "has_answered_survey", "description": "Indicates if the user has answered a survey", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/users/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.837395, "relation_name": "\"test_lyon\".\"prod\".\"users\"", "raw_code": "WITH endorsements AS (\n    SELECT\n        decidim_author_id,\n        MAX(1) AS is_endorsing\n    FROM {{ ref(\"endorsements\") }}\n    GROUP BY decidim_author_id\n),\n\ncomments AS (\n    SELECT\n        decidim_author_id,\n        MAX(1) AS has_authored_comment\n    FROM {{ ref(\"comments\") }}\n    GROUP BY decidim_author_id\n),\n\nforms_answers AS (\n    SELECT\n        decidim_user_id,\n        MAX(1) AS has_answered_survey\n    FROM {{ ref(\"forms_answers\") }}\n    GROUP BY decidim_user_id\n),\n\nproposal_votes AS (\n    SELECT\n        decidim_author_id,\n        MAX(1) AS has_voted_on_proposal\n    FROM {{ ref(\"proposals_votes\") }}\n    GROUP BY decidim_author_id\n),\n\nproject_votes AS (\n    SELECT\n        decidim_user_id,\n        MAX(1) AS has_voted_on_project\n    FROM {{ ref(\"projects_votes\") }}\n    GROUP BY decidim_user_id\n),\n\nparticipations_proposals AS (\n    SELECT\n        decidim_coauthorships.decidim_author_id,\n        MAX(1) AS has_authored_proposal\n    FROM {{ ref(\"proposals\") }} AS decidim_proposals_proposals\n    JOIN {{ ref(\"stg_decidim_coauthorships\") }} AS decidim_coauthorships\n        ON decidim_coauthorships.coauthorable_id = decidim_proposals_proposals.id\n    WHERE coauthorable_type = 'Decidim::Proposals::Proposal'\n    GROUP BY decidim_coauthorships.decidim_author_id\n),\n\nfollowings AS (\n    SELECT DISTINCT decidim_user_id\n    FROM {{ ref(\"followings\") }}\n)\n\nSELECT\n    decidim_users.id,\n    decidim_users.email,\n    decidim_users.sign_in_count,\n    decidim_users.sign_in_frequency,\n    decidim_users.last_sign_in_at,\n    decidim_users.created_at,\n    decidim_users.updated_at,\n    decidim_users.invitation_created_at,\n    decidim_users.invitation_sent_at,\n    decidim_users.invitation_accepted_at,\n    decidim_users.invited_by_id,\n    decidim_users.invited_by_type,\n    decidim_users.decidim_organization_id,\n    decidim_users.confirmed_at,\n    decidim_users.confirmation_token,\n    decidim_users.unconfirmed_email,\n    decidim_users.name,\n    decidim_users.locale,\n    decidim_users.deleted_at,\n    decidim_users.admin,\n    decidim_users.managed,\n    decidim_users.roles,\n    decidim_users.nickname,\n    decidim_users.accepted_tos_version,\n    decidim_users.type,\n    decidim_users.following_count,\n    decidim_users.followers_count,\n    decidim_users.failed_attempts,\n    decidim_users.locked_at,\n    decidim_users.admin_terms_accepted_at,\n    decidim_users.blocked,\n    decidim_users.blocked_at,\n    COALESCE(endorsements.is_endorsing, 0)::boolean AS is_endorsing,\n    (CASE WHEN followings.decidim_user_id IS NULL THEN false ELSE true END) AS is_following,\n    COALESCE(comments.has_authored_comment, 0)::boolean AS has_authored_comment,\n    COALESCE(proposal_votes.has_voted_on_proposal, 0)::boolean AS has_voted_on_proposal,\n    COALESCE(project_votes.has_voted_on_project, 0)::boolean AS has_voted_on_project,\n    COALESCE(participations_proposals.has_authored_proposal, 0)::boolean AS has_authored_proposal,\n    COALESCE(forms_answers.has_answered_survey, 0)::boolean AS has_answered_survey,\n    decidim_users.confirmed,\n    CONCAT('https://', decidim_organizations.host, '/profiles/', decidim_users.nickname, '/activity') AS url,\n    decidim_users.extended_data\nFROM {{ ref(\"int_users\") }} AS decidim_users\nLEFT JOIN followings ON followings.decidim_user_id = decidim_users.id\nLEFT JOIN endorsements ON endorsements.decidim_author_id = decidim_users.id\nLEFT JOIN comments ON comments.decidim_author_id = decidim_users.id\nLEFT JOIN forms_answers ON forms_answers.decidim_user_id = decidim_users.id\nLEFT JOIN proposal_votes ON proposal_votes.decidim_author_id = decidim_users.id\nLEFT JOIN project_votes ON project_votes.decidim_user_id = decidim_users.id\nLEFT JOIN participations_proposals ON participations_proposals.decidim_author_id = decidim_users.id\nJOIN {{ ref(\"int_organizations\") }} AS decidim_organizations\n    ON decidim_organizations.id = decidim_users.decidim_organization_id", "language": "sql", "refs": [{"name": "endorsements", "package": null, "version": null}, {"name": "comments", "package": null, "version": null}, {"name": "forms_answers", "package": null, "version": null}, {"name": "proposals_votes", "package": null, "version": null}, {"name": "projects_votes", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}, {"name": "stg_decidim_coauthorships", "package": null, "version": null}, {"name": "followings", "package": null, "version": null}, {"name": "int_users", "package": null, "version": null}, {"name": "int_organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.endorsements", "model.demo.comments", "model.demo.forms_answers", "model.demo.proposals_votes", "model.demo.projects_votes", "model.demo.proposals", "model.demo.stg_decidim_coauthorships", "model.demo.followings", "model.demo.int_users", "model.demo.int_organizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.budgets": {"database": "test_lyon", "schema": "prod", "name": "budgets", "resource_type": "model", "package_name": "demo", "path": "marts/budgets/budgets.sql", "original_file_path": "models/marts/budgets/budgets.sql", "unique_id": "model.demo.budgets", "fqn": ["demo", "marts", "budgets", "budgets"], "alias": "budgets", "checksum": {"name": "sha256", "checksum": "0b413c401e389f7970fff98b95a83345d5ce8fbcd68783b96a6c1b3802eaca8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.6055381, "relation_name": "\"test_lyon\".\"prod\".\"budgets\"", "raw_code": "SELECT\n    decidim_budgets_budgets.id,\n    decidim_budgets_budgets.title,\n    decidim_components.id AS decidim_component_id,\n    decidim_components.ps_url AS url,\n    decidim_components.ps_slug,\n    decidim_components.ps_title\nFROM {{ ref (\"stg_decidim_budgets\")}} AS decidim_budgets_budgets\nJOIN {{ ref(\"components\")}} AS decidim_components on decidim_components.id = decidim_budgets_budgets.decidim_component_id", "language": "sql", "refs": [{"name": "stg_decidim_budgets", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_budgets", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.projects_votes": {"database": "test_lyon", "schema": "prod", "name": "projects_votes", "resource_type": "model", "package_name": "demo", "path": "marts/budgets/projects_votes.sql", "original_file_path": "models/marts/budgets/projects_votes.sql", "unique_id": "model.demo.projects_votes", "fqn": ["demo", "marts", "budgets", "projects_votes"], "alias": "projects_votes", "checksum": {"name": "sha256", "checksum": "4ac28e3d1f9ad333a96548c7173455a2eadc05f2d645c9e5021074e50973fc33"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_user_id"], "type": "btree"}]}, "tags": [], "description": "Splits budgets orders (i.e. votes) on a per-project basis", "columns": {"order_id": {"name": "order_id", "description": "ID of the budget order through which the vote has been issued", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/budgets/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_user_id"], "type": "btree"}]}, "created_at": 1727441769.842602, "relation_name": "\"test_lyon\".\"prod\".\"projects_votes\"", "raw_code": "-- /!\\ Warning : counts unfinished votes !\n-- /!\\ Warning : should be filtered on the corresponding budget to get the good values\n\n{{ config(\n    indexes=[\n      {'columns': ['decidim_user_id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH budgets_projects AS (\n    SELECT\n        decidim_budgets_line_items.decidim_order_id,\n        decidim_budgets_projects.id AS \"project_id\",\n        decidim_budgets_projects.title AS \"project_title\",\n        decidim_budgets_projects.decidim_component_id,\n        decidim_budgets_projects.project_url\n    from  {{ ref(\"stg_decidim_budgets_line_items\")}} AS decidim_budgets_line_items\n        JOIN {{ ref(\"budgets_projects\")}} decidim_budgets_projects on decidim_budgets_projects.id = decidim_budgets_line_items.decidim_project_id\n)\n    SELECT\n        decidim_budgets_orders.id as order_id,\n        decidim_budgets_orders.decidim_user_id,\n        budgets_projects.project_id,\n        budgets_projects.project_title,\n        budgets_projects.decidim_component_id,\n        decidim_budgets_orders.created_at,\n        decidim_budgets_orders.checked_out_at,\n        budgets_projects.project_url,\n        decidim_budgets_orders.vote_finished,\n        decidim_budgets_orders.decidim_budgets_budget_id\n    from {{ ref(\"int_budgets_orders\")}} AS decidim_budgets_orders\n        LEFT JOIN budgets_projects on decidim_order_id = decidim_budgets_orders.id", "language": "sql", "refs": [{"name": "stg_decidim_budgets_line_items", "package": null, "version": null}, {"name": "budgets_projects", "package": null, "version": null}, {"name": "int_budgets_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_budgets_line_items", "model.demo.budgets_projects", "model.demo.int_budgets_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.budgets_projects": {"database": "test_lyon", "schema": "prod", "name": "budgets_projects", "resource_type": "model", "package_name": "demo", "path": "marts/budgets/budgets_projects.sql", "original_file_path": "models/marts/budgets/budgets_projects.sql", "unique_id": "model.demo.budgets_projects", "fqn": ["demo", "marts", "budgets", "budgets_projects"], "alias": "budgets_projects", "checksum": {"name": "sha256", "checksum": "c7b4a0bec11b0ab5b0be3811ef287b4b609763be2ed58ac7bb6149e67b1f5d40"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.6078908, "relation_name": "\"test_lyon\".\"prod\".\"budgets_projects\"", "raw_code": "WITH categorizations AS (\n    {{ categorizations_filter('Decidim::Budgets::Project') }}\n)\nSELECT\n    decidim_budgets_projects.id, \n    decidim_budgets_projects.title,\n    decidim_budgets_projects.description,\n    decidim_budgets_projects.created_at,\n    decidim_budgets_projects.decidim_scope_id, \n    decidim_budgets_projects.project_amount,\n    decidim_budgets_projects.selected_at,\n    decidim_budgets_projects.is_selected,\n    decidim_budgets_budgets.id AS budget_id,\n    decidim_budgets_budgets.title AS budget_title,\n    decidim_budgets_projects.resource_type,\n    decidim_budgets_budgets.decidim_component_id,\n    concat(decidim_components.component_url,'/', decidim_components.manifest_name,'/', decidim_budgets_budgets.id, '/projects/', decidim_budgets_projects.id) AS project_url,\n    categorizations.categories,\n    coalesce(categorizations.categories[1], 'Sans cat\u00e9gorie') AS first_category,\n    categorizations.sub_categories,\n    coalesce(categorizations.sub_categories[1], 'Sans sous-cat\u00e9gorie') AS first_sub_category\nFROM {{ ref(\"int_budgets_projects\")}} AS decidim_budgets_projects\nJOIN {{ ref(\"stg_decidim_budgets\")}} AS decidim_budgets_budgets on decidim_budgets_budgets.id = decidim_budgets_projects.decidim_budgets_budget_id\nJOIN {{ ref(\"components\")}} as decidim_components on decidim_components.id = decidim_budgets_budgets.decidim_component_id\nLEFT JOIN categorizations on categorizations.categorizable_id = decidim_budgets_projects.id", "language": "sql", "refs": [{"name": "categorizations", "package": null, "version": null}, {"name": "int_budgets_projects", "package": null, "version": null}, {"name": "stg_decidim_budgets", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.demo.categorizations_filter"], "nodes": ["model.demo.categorizations", "model.demo.int_budgets_projects", "model.demo.stg_decidim_budgets", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.meetings": {"database": "test_lyon", "schema": "prod", "name": "meetings", "resource_type": "model", "package_name": "demo", "path": "marts/meetings/meetings.sql", "original_file_path": "models/marts/meetings/meetings.sql", "unique_id": "model.demo.meetings", "fqn": ["demo", "marts", "meetings", "meetings"], "alias": "meetings", "checksum": {"name": "sha256", "checksum": "efbcbe041d4488a47f867de0bbe43c4297d86e1b8ee0da21f9ee6c6898ea1f7b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Every meeting published on the platform", "columns": {"id": {"name": "id", "description": "The unique identifier for a meeting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/meetings/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.843044, "relation_name": "\"test_lyon\".\"prod\".\"meetings\"", "raw_code": "WITH categorizations AS (\n    {{ categorizations_filter('Decidim::Meetings::Meeting') }}\n)\nSELECT\n    decidim_meetings_meetings.id,\n    decidim_meetings_meetings.title,\n    decidim_meetings_meetings.description,\n    decidim_meetings_meetings.address,\n    decidim_meetings_meetings.attendees_count,\n    decidim_meetings_meetings.created_at,\n    decidim_meetings_meetings.decidim_scope_id,\n    decidim_meetings_meetings.decidim_component_id,\n    decidim_meetings_meetings.start_time,\n    decidim_meetings_meetings.end_time,\n    decidim_meetings_meetings.registration_url,\n    decidim_meetings_meetings.type_of_meeting, \n    decidim_meetings_meetings.translated_type_of_meeting,\n    decidim_meetings_meetings.private_meeting,\n    decidim_meetings_meetings.decidim_author_id,\n    decidim_meetings_meetings.resource_type,\n    concat(\n        'https://',\n        decidim_components.organization_host,\n        '/',\n        decidim_components.ps_space_type_slug,\n        '/',\n        decidim_components.ps_slug,\n        '/f/',\n        decidim_meetings_meetings.decidim_component_id,\n        '/meetings/',\n        decidim_meetings_meetings.id\n    ) AS meeting_url,\n    categorizations.categories,\n    coalesce(categorizations.categories[1], 'Sans cat\u00e9gorie') AS first_category,\n    categorizations.sub_categories,\n    coalesce(categorizations.sub_categories[1], 'Sans sous-cat\u00e9gorie') AS first_sub_category\nFROM {{ ref(\"int_meetings\")}} AS decidim_meetings_meetings\nJOIN {{ ref(\"components\")}} decidim_components on decidim_components.id = decidim_component_id\nLEFT JOIN categorizations on categorizations.categorizable_id = decidim_meetings_meetings.id\nwhere manifest_name like 'meetings'", "language": "sql", "refs": [{"name": "categorizations", "package": null, "version": null}, {"name": "int_meetings", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.demo.categorizations_filter"], "nodes": ["model.demo.categorizations", "model.demo.int_meetings", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.proposals_votes": {"database": "test_lyon", "schema": "prod", "name": "proposals_votes", "resource_type": "model", "package_name": "demo", "path": "marts/proposals/proposals_votes.sql", "original_file_path": "models/marts/proposals/proposals_votes.sql", "unique_id": "model.demo.proposals_votes", "fqn": ["demo", "marts", "proposals", "proposals_votes"], "alias": "proposals_votes", "checksum": {"name": "sha256", "checksum": "02f65fdd9ddb319ae31747796af6f0827b3094aaedf6c6223e68d4080499793b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"type": "btree", "columns": ["decidim_author_id"]}]}, "tags": [], "description": "Every vote made on propositions", "columns": {"decidim_author_id": {"name": "decidim_author_id", "description": "id of the user who has voted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_proposal_id": {"name": "decidim_proposal_id", "description": "id of the proposal for which has been voted for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/proposals/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"type": "btree", "columns": ["decidim_author_id"]}]}, "created_at": 1727441769.8469949, "relation_name": "\"test_lyon\".\"prod\".\"proposals_votes\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_author_id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT\n    proposals_votes.id,\n    proposals_votes.created_at,\n    proposals_votes.decidim_author_id,\n    proposals_votes.decidim_proposal_id,\n    proposals.decidim_component_id,\n    proposals.title AS proposal_title,\n    proposals.url AS proposal_url\nFROM {{ ref(\"stg_decidim_proposals_votes\")}} AS proposals_votes\nJOIN {{ ref(\"proposals\")}} AS proposals on proposals_votes.decidim_proposal_id = proposals.id", "language": "sql", "refs": [{"name": "stg_decidim_proposals_votes", "package": null, "version": null}, {"name": "proposals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_proposals_votes", "model.demo.proposals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.proposals": {"database": "test_lyon", "schema": "prod", "name": "proposals", "resource_type": "model", "package_name": "demo", "path": "marts/proposals/proposals.sql", "original_file_path": "models/marts/proposals/proposals.sql", "unique_id": "model.demo.proposals", "fqn": ["demo", "marts", "proposals", "proposals"], "alias": "proposals", "checksum": {"name": "sha256", "checksum": "090e535cad1a4675179cdd488dc186ba314bb1a4e89cfe9466416161c32ac832"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["resource_type"], "type": "btree"}]}, "tags": [], "description": "Every proposal that has been created on your Decidim instance, including accepted, pending, rejected and withdrawn proposals. Does not include hidden (moderation) and unpublished proposals (i.e. linked to either an unpublished participatory process or an unpublished component).", "columns": {"id": {"name": "id", "description": "Unique identifier for the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_participatory_space_id": {"name": "decidim_participatory_space_id", "description": "Identifier for the participatory space where the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_participatory_space_slug": {"name": "decidim_participatory_space_slug", "description": "Slug for the participatory space where the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_scope_name": {"name": "decidim_scope_name", "description": "Name of the scope for the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Body text of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "Type of the resource, typically 'Decidim::Proposals::Proposal'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "URL link to the proposal on the Decidim platform", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_component_id": {"name": "decidim_component_id", "description": "Identifier for the component within which the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "Timestamp when the proposal was published", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state of the proposal (e.g., evaluating, rejected, accepted)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translated_state": {"name": "translated_state", "description": "Human-readable translated state of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "authors_ids": {"name": "authors_ids", "description": "Array of IDs of the authors of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_author_id": {"name": "first_author_id", "description": "ID of the first author of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "Address related to the proposal, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "categories": {"name": "categories", "description": "Array of categories associated with the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_category": {"name": "first_category", "description": "First category associated with the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_categories": {"name": "sub_categories", "description": "Array of sub-categories associated with the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_sub_category": {"name": "first_sub_category", "description": "First sub-category associated with the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments_count": {"name": "comments_count", "description": "Number of comments on the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endorsements_count": {"name": "endorsements_count", "description": "Number of endorsements on the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "votes_count": {"name": "votes_count", "description": "Number of votes the proposal has received", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/marts/proposals/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}, {"columns": ["resource_type"], "type": "btree"}]}, "created_at": 1727441769.846499, "relation_name": "\"test_lyon\".\"prod\".\"proposals\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n      {'columns': ['resource_type'], 'type': 'btree'}\n    ]\n)}}\n\nWITH coauthorships AS (\n    SELECT \n        array_agg(decidim_users.id) AS authors_ids,\n        decidim_coauthorships.coauthorable_id \n    FROM {{ ref(\"int_users\")}} AS decidim_users \n    JOIN {{ ref(\"stg_decidim_coauthorships\")}} AS decidim_coauthorships on decidim_users.id = decidim_coauthorships.decidim_author_id\n    WHERE coauthorable_type = 'Decidim::Proposals::Proposal'\n    GROUP BY coauthorable_id\n), \ncategorizations AS (\n    {{ categorizations_filter('Decidim::Proposals::Proposal') }}\n),\nvotes AS (\n    SELECT\n        decidim_proposal_id,\n        COUNT(id) AS votes_count\n    FROM {{ ref(\"stg_decidim_proposals_votes\")}}\n   GROUP BY decidim_proposal_id\n),\nproposals AS (\n    SELECT\n        decidim_proposals.id,\n        decidim_components.ps_id AS decidim_participatory_space_id,\n        decidim_components.ps_slug AS decidim_participatory_space_slug,\n        decidim_scopes.name AS decidim_scope_name,\n        decidim_proposals.title,\n        decidim_proposals.body,\n        decidim_proposals.resource_type,\n        concat('https://', decidim_components.organization_host, '/', decidim_components.ps_space_type_slug, '/', decidim_components.ps_slug, '/f/', decidim_proposals.decidim_component_id, '/proposals/', decidim_proposals.id) AS url,\n        decidim_proposals.decidim_component_id,\n        decidim_proposals.created_at,\n        decidim_proposals.published_at,\n        decidim_proposals.state,\n        decidim_proposals.translated_state,\n        coauthorships.authors_ids,\n        COALESCE(coauthorships.authors_ids[1], -1) AS first_author_id,\n        decidim_proposals.address,\n        categorizations.categories,\n        COALESCE(categorizations.categories[1], 'Sans cat\u00e9gorie') AS first_category,\n        categorizations.sub_categories,\n        COALESCE(categorizations.sub_categories[1], 'Sans sous-cat\u00e9gorie') AS first_sub_category,\n        decidim_proposals.comments_count,\n        decidim_proposals.endorsements_count,\n        COALESCE(votes.votes_count,0) AS votes_count\n    FROM {{ ref(\"int_proposals\")}} AS decidim_proposals\n    JOIN {{ ref(\"components\")}} AS decidim_components ON decidim_components.id = decidim_component_id\n    LEFT JOIN coauthorships ON decidim_proposals.id = coauthorships.coauthorable_id\n    LEFT JOIN {{ ref(\"stg_decidim_moderations\")}} AS decidim_moderations\n        ON decidim_moderations.decidim_reportable_id = decidim_proposals.id\n        AND decidim_moderations.decidim_reportable_type = 'Decidim::Proposals::Proposal'\n    LEFT JOIN {{ ref(\"int_scopes\")}} AS decidim_scopes ON decidim_scopes.id = decidim_proposals.decidim_scope_id\n    LEFT JOIN votes ON decidim_proposals.id = votes.decidim_proposal_id\n    LEFT JOIN categorizations ON categorizations.categorizable_id = decidim_proposals.id\n    WHERE decidim_moderations.hidden_at IS NULL\n    AND decidim_proposals.published_at IS NOT NULL\n    AND (decidim_proposals.state NOT LIKE '%withdrawn' OR decidim_proposals.state IS NULL)\n)\n\nSELECT * FROM proposals", "language": "sql", "refs": [{"name": "int_users", "package": null, "version": null}, {"name": "stg_decidim_coauthorships", "package": null, "version": null}, {"name": "categorizations", "package": null, "version": null}, {"name": "stg_decidim_proposals_votes", "package": null, "version": null}, {"name": "int_proposals", "package": null, "version": null}, {"name": "components", "package": null, "version": null}, {"name": "stg_decidim_moderations", "package": null, "version": null}, {"name": "int_scopes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.demo.categorizations_filter"], "nodes": ["model.demo.int_users", "model.demo.stg_decidim_coauthorships", "model.demo.categorizations", "model.demo.stg_decidim_proposals_votes", "model.demo.int_proposals", "model.demo.components", "model.demo.stg_decidim_moderations", "model.demo.int_scopes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_organizations": {"database": "test_lyon", "schema": "prod", "name": "int_organizations", "resource_type": "model", "package_name": "demo", "path": "intermediate/organizations/int_organizations.sql", "original_file_path": "models/intermediate/organizations/int_organizations.sql", "unique_id": "model.demo.int_organizations", "fqn": ["demo", "intermediate", "organizations", "int_organizations"], "alias": "int_organizations", "checksum": {"name": "sha256", "checksum": "427ba5c6ba0c669374062a3bad93f93f09d2b2c9e911cb3df108ea01a13d4be0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}]}, "tags": [], "description": "A staging model for Decidim organizations", "columns": {"id": {"name": "id", "description": "Unique identifier for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "host": {"name": "host", "description": "Host URL for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_locale": {"name": "default_locale", "description": "Default locale for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_locales": {"name": "available_locales", "description": "List of available locales for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the organization was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "secondary_hosts": {"name": "secondary_hosts", "description": "Secondary hosts for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_authorizations": {"name": "available_authorizations", "description": "List of available authorizations for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "header_snippets": {"name": "header_snippets", "description": "Header snippets for the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tos_version": {"name": "tos_version", "description": "Version of the terms of service", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "badges_enabled": {"name": "badges_enabled", "description": "Indicates if badges are enabled. Badges in Decidim recognize participant actions and progress, enhancing engagement through gamification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "send_welcome_notification": {"name": "send_welcome_notification", "description": "Flag indicating if welcome notifications are sent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "users_registration_mode": {"name": "users_registration_mode", "description": "Mode of user registration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "Time zone of the organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/intermediate/organizations/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}]}, "created_at": 1727441769.8527172, "relation_name": "\"test_lyon\".\"prod\".\"int_organizations\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n    ]\n)}}\n\n\nWITH source AS (\n      SELECT * FROM {{ ref (\"stg_decidim_organizations\")}}\n),\nrenamed AS (\n    SELECT\n        id,\n        name,\n        host,\n        default_locale,\n        available_locales,\n        created_at,\n        regexp_replace(description::jsonb->>'fr', E'(<[^>]+>)|(&[a-z]+;)', '', 'gi') as description,\n        secondary_hosts,\n        available_authorizations,\n        header_snippets,\n        tos_version,\n        badges_enabled,\n        send_welcome_notification,\n        users_registration_mode,\n        time_zone\n    FROM source\n    WHERE host = '{{ env_var('PARTICIPATION_HOST_NAME') }}'\n    -- Assumption: There is only one organization, so we select the first available host\n    LIMIT 1\n)\nSELECT * FROM renamed", "language": "sql", "refs": [{"name": "stg_decidim_organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_organizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.answers_file": {"database": "test_lyon", "schema": "prod", "name": "answers_file", "resource_type": "model", "package_name": "demo", "path": "intermediate/forms/answers_file.sql", "original_file_path": "models/intermediate/forms/answers_file.sql", "unique_id": "model.demo.answers_file", "fqn": ["demo", "intermediate", "forms", "answers_file"], "alias": "answers_file", "checksum": {"name": "sha256", "checksum": "0546b730d1ed65433b1cdaab4a32e5d837cb0587ae8bde6b4f32fb4a16c24c54"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"type": "btree", "columns": ["decidim_questionnaire_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"type": "btree", "columns": ["decidim_questionnaire_id"]}]}, "created_at": 1727441769.623206, "relation_name": "\"test_lyon\".\"prod\".\"answers_file\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_questionnaire_id'], 'type': 'btree'},\n    ]\n)}}\n\nWITH org AS (\n    -- Assumption: There is only one organization, so we select the first available host\n    SELECT host\n    FROM {{ ref('organizations') }}\n    LIMIT 1\n)\nSELECT DISTINCT\n    decidim_forms_answers.decidim_user_id,\n    decidim_forms_answers.session_token,\n    decidim_forms_answers.ip_hash,\n    decidim_forms_questions.question_type,\n    decidim_forms_questions.position AS \"position\",\n    decidim_attachments.file AS \"answer\",\n    '' AS \"sub_matrix_question\",\n    CONCAT('https://', org.host, '/uploads/decidim/attachment/file/', decidim_attachments.id, '/', decidim_attachments.file) AS custom_body,\n    -1 AS sorting_position,\n    decidim_forms_questions.decidim_questionnaire_id,\n    decidim_forms_questions.body,\n    decidim_forms_answers.created_at,\n    decidim_forms_answers.author_status\nFROM {{ ref('int_forms_answers') }} decidim_forms_answers\nJOIN {{ ref('stg_decidim_forms_questions') }} AS decidim_forms_questions ON decidim_forms_questions.id = decidim_forms_answers.decidim_question_id\nJOIN {{ ref('stg_decidim_attachments') }} decidim_attachments ON decidim_attachments.attached_to_id = decidim_forms_answers.id\nCROSS JOIN org\nWHERE attached_to_type = 'Decidim::Forms::Answer'", "language": "sql", "refs": [{"name": "organizations", "package": null, "version": null}, {"name": "int_forms_answers", "package": null, "version": null}, {"name": "stg_decidim_forms_questions", "package": null, "version": null}, {"name": "stg_decidim_attachments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.organizations", "model.demo.int_forms_answers", "model.demo.stg_decidim_forms_questions", "model.demo.stg_decidim_attachments"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.answers_option_and_sorting": {"database": "test_lyon", "schema": "prod", "name": "answers_option_and_sorting", "resource_type": "model", "package_name": "demo", "path": "intermediate/forms/answers_option_and_sorting.sql", "original_file_path": "models/intermediate/forms/answers_option_and_sorting.sql", "unique_id": "model.demo.answers_option_and_sorting", "fqn": ["demo", "intermediate", "forms", "answers_option_and_sorting"], "alias": "answers_option_and_sorting", "checksum": {"name": "sha256", "checksum": "a6c8be435c9adf60421f3d7b63da0338432abac9a04e4a3e4f0751e748e880a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_questionnaire_id"], "type": "btree"}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_questionnaire_id"], "type": "btree"}]}, "created_at": 1727441769.624459, "relation_name": "\"test_lyon\".\"prod\".\"answers_option_and_sorting\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_questionnaire_id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT DISTINCT\n    decidim_forms_answers.decidim_user_id,\n    decidim_forms_answers.session_token,\n    decidim_forms_answers.ip_hash,\n    decidim_forms_questions.question_type,\n    decidim_forms_questions.position AS question_position,\n    decidim_forms_answer_choices.body::text AS \"answer\",\n    '' AS sub_matrix_question,\n    COALESCE(decidim_forms_answer_choices.custom_body, '') AS custom_body,\n    (CASE question_type WHEN 'sorting' THEN decidim_forms_answer_choices.position ELSE -1 END) AS sorting_position,\n    decidim_forms_questions.decidim_questionnaire_id,\n    decidim_forms_questions.body,\n    decidim_forms_answers.created_at,\n    decidim_forms_answers.author_status\nFROM {{ ref('int_forms_answers') }} decidim_forms_answers\nJOIN {{ ref('stg_decidim_forms_questions') }} AS decidim_forms_questions ON decidim_forms_questions.id = decidim_forms_answers.decidim_question_id\nJOIN {{ ref('stg_decidim_forms_answer_choices') }} decidim_forms_answer_choices ON decidim_forms_answer_choices.decidim_answer_id = decidim_forms_answers.id\nWHERE question_type = ANY('{single_option, multiple_option, sorting}'::text[])", "language": "sql", "refs": [{"name": "int_forms_answers", "package": null, "version": null}, {"name": "stg_decidim_forms_questions", "package": null, "version": null}, {"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_questions", "model.demo.stg_decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.answers_matrix": {"database": "test_lyon", "schema": "prod", "name": "answers_matrix", "resource_type": "model", "package_name": "demo", "path": "intermediate/forms/answers_matrix.sql", "original_file_path": "models/intermediate/forms/answers_matrix.sql", "unique_id": "model.demo.answers_matrix", "fqn": ["demo", "intermediate", "forms", "answers_matrix"], "alias": "answers_matrix", "checksum": {"name": "sha256", "checksum": "e0edf6477ef36c34189c0498ead937aed57124c071d2f1ab6f5e0c65f50deb42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"type": "btree", "columns": ["decidim_questionnaire_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"type": "btree", "columns": ["decidim_questionnaire_id"]}]}, "created_at": 1727441769.62566, "relation_name": "\"test_lyon\".\"prod\".\"answers_matrix\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_questionnaire_id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT DISTINCT\n    decidim_forms_answers.decidim_user_id,\n    decidim_forms_answers.session_token,\n    decidim_forms_answers.ip_hash,\n    decidim_forms_questions.question_type,\n    decidim_forms_questions.position AS \"position\",\n    decidim_forms_answer_choices.body::text AS \"answer\",\n    decidim_forms_question_matrix_rows.body AS sub_matrix_question,\n    '' AS custom_body,\n    -1 AS sorting_position,\n    decidim_forms_questions.decidim_questionnaire_id,\n    decidim_forms_questions.body,\n    decidim_forms_answers.created_at,\n    decidim_forms_answers.author_status\nFROM {{ ref('int_forms_answers') }} decidim_forms_answers\nJOIN {{ ref('stg_decidim_forms_questions') }} AS decidim_forms_questions ON decidim_forms_questions.id = decidim_forms_answers.decidim_question_id\nJOIN {{ ref('stg_decidim_forms_answer_choices') }} decidim_forms_answer_choices ON decidim_forms_answer_choices.decidim_answer_id = decidim_forms_answers.id\nJOIN {{ ref('stg_decidim_forms_question_matrix_rows') }} decidim_forms_question_matrix_rows ON decidim_forms_question_matrix_rows.id = decidim_forms_answer_choices.decidim_question_matrix_row_id\nWHERE question_type = ANY('{matrix_single, matrix_multiple}'::text[])", "language": "sql", "refs": [{"name": "int_forms_answers", "package": null, "version": null}, {"name": "stg_decidim_forms_questions", "package": null, "version": null}, {"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}, {"name": "stg_decidim_forms_question_matrix_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_questions", "model.demo.stg_decidim_forms_answer_choices", "model.demo.stg_decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.answers_short_and_long_answer": {"database": "test_lyon", "schema": "prod", "name": "answers_short_and_long_answer", "resource_type": "model", "package_name": "demo", "path": "intermediate/forms/answers_short_and_long_answer.sql", "original_file_path": "models/intermediate/forms/answers_short_and_long_answer.sql", "unique_id": "model.demo.answers_short_and_long_answer", "fqn": ["demo", "intermediate", "forms", "answers_short_and_long_answer"], "alias": "answers_short_and_long_answer", "checksum": {"name": "sha256", "checksum": "4243913982485ea514a9fde9fa70cdeccd9f17ad77050b2fc65146042950333a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["decidim_questionnaire_id"], "type": "btree"}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["decidim_questionnaire_id"], "type": "btree"}]}, "created_at": 1727441769.626914, "relation_name": "\"test_lyon\".\"prod\".\"answers_short_and_long_answer\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['decidim_questionnaire_id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT\n    decidim_user_id,\n    session_token,\n    ip_hash,\n    question_type,\n    position,\n    COALESCE(NULLIF(decidim_forms_answers.body,''), 'Pas de r\u00e9ponse') AS \"answer\",\n    '' AS sub_matrix_question,\n    '' AS custom_body,\n    -1 AS sorting_position,\n    decidim_forms_questions.decidim_questionnaire_id,\n    decidim_forms_questions.body,\n    decidim_forms_answers.created_at,\n    decidim_forms_answers.author_status\nFROM {{ ref('int_forms_answers') }} decidim_forms_answers\nJOIN {{ ref('stg_decidim_forms_questions') }} AS decidim_forms_questions ON decidim_forms_questions.id = decidim_forms_answers.decidim_question_id\nWHERE question_type = ANY('{short_answer,long_answer}'::text[])", "language": "sql", "refs": [{"name": "int_forms_answers", "package": null, "version": null}, {"name": "stg_decidim_forms_questions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_questions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_forms_answers": {"database": "test_lyon", "schema": "prod", "name": "int_forms_answers", "resource_type": "model", "package_name": "demo", "path": "intermediate/forms/int_forms_answers.sql", "original_file_path": "models/intermediate/forms/int_forms_answers.sql", "unique_id": "model.demo.int_forms_answers", "fqn": ["demo", "intermediate", "forms", "int_forms_answers"], "alias": "int_forms_answers", "checksum": {"name": "sha256", "checksum": "f3bb33340aa78ba8eaf0355577fd471b6ab835dc8aab0831ccd5f74fb70fc975"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}, {"type": "btree", "columns": ["decidim_question_id"]}]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}, {"type": "btree", "columns": ["decidim_question_id"]}]}, "created_at": 1727441769.62815, "relation_name": "\"test_lyon\".\"prod\".\"int_forms_answers\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n      {'columns': ['decidim_question_id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT\n    id,\n    body,\n    decidim_user_id,\n    decidim_questionnaire_id,\n    decidim_question_id,\n    created_at,\n    (CASE\n        WHEN decidim_user_id IS NULL THEN 'Non connect\u00e9'\n        ELSE 'Inscrit et connect\u00e9'\n        END\n    ) AS author_status,\n    updated_at,\n    session_token,\n    ip_hash\nFROM {{ ref(\"stg_decidim_forms_answers\")}}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_forms_answers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_components": {"database": "test_lyon", "schema": "prod", "name": "int_components", "resource_type": "model", "package_name": "demo", "path": "intermediate/components/int_components.sql", "original_file_path": "models/intermediate/components/int_components.sql", "unique_id": "model.demo.int_components", "fqn": ["demo", "intermediate", "components", "int_components"], "alias": "int_components", "checksum": {"name": "sha256", "checksum": "33411b41c132dac10318196d6fa8e3ecce4fd974587aaa5f74347e03fbc8829f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An intermediate model representing the components associated with participatory spaces in Decidim.", "columns": {"id": {"name": "id", "description": "The ID of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "manifest_name": {"name": "manifest_name", "description": "The original manifest name of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translated_manifest_name": {"name": "translated_manifest_name", "description": "The translated manifest name based on predefined mappings for Metabase usage ", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "participatory_space_id": {"name": "participatory_space_id", "description": "The ID of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "participatory_space_type": {"name": "participatory_space_type", "description": "The type of the participatory space.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "settings": {"name": "settings", "description": "The settings of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weight": {"name": "weight", "description": "The weight of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "permissions": {"name": "permissions", "description": "The permissions of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "The publish date of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The creation date of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The last update date of the component.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/intermediate/components/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.8612149, "relation_name": "\"test_lyon\".\"prod\".\"int_components\"", "raw_code": "SELECT\n    decidim_components.id,\n    decidim_components.manifest_name,\n    -- For Metabase usage, we translate the name in French\n    (CASE decidim_components.manifest_name\n        WHEN 'accountability' THEN 'Suivi'\n        WHEN 'pages' THEN 'Page'\n        WHEN 'budgets' THEN 'Budgets'\n        WHEN 'meetings' THEN 'Rencontres'\n        WHEN 'proposals' THEN 'Propositions'\n        WHEN 'surveys' THEN 'Enqu\u00eates'\n        WHEN 'blogs' THEN 'Blogs'\n        ELSE decidim_components.manifest_name\n        END\n    ) AS translated_manifest_name,\n    decidim_components.name,\n    decidim_components.participatory_space_id,\n    decidim_components.participatory_space_type,\n    decidim_components.settings,\n    decidim_components.weight,\n    decidim_components.permissions,\n    decidim_components.published_at,\n    decidim_components.created_at,\n    decidim_components.updated_at\n    FROM {{ ref (\"stg_decidim_components\")}} as decidim_components", "language": "sql", "refs": [{"name": "stg_decidim_components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_users": {"database": "test_lyon", "schema": "prod", "name": "int_users", "resource_type": "model", "package_name": "demo", "path": "intermediate/users/int_users.sql", "original_file_path": "models/intermediate/users/int_users.sql", "unique_id": "model.demo.int_users", "fqn": ["demo", "intermediate", "users", "int_users"], "alias": "int_users", "checksum": {"name": "sha256", "checksum": "bb725e225fa3e67f74f6e98804916fe5d20c30416b506833ceb1f771fe74b5f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}]}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "The unique identifier for a user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The user's email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "The user's nickname", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/intermediate/users/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}]}, "created_at": 1727441769.86358, "relation_name": "\"test_lyon\".\"prod\".\"int_users\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT\n    decidim_users.id,\n    decidim_users.email,\n    decidim_users.sign_in_count,\n    (CASE\n        WHEN decidim_users.sign_in_count = 0 THEN 'Jamais'\n        WHEN decidim_users.sign_in_count = 1 THEN 'Une seule fois'\n        WHEN decidim_users.sign_in_count = 2 THEN 'Deux fois'\n        WHEN decidim_users.sign_in_count BETWEEN 2 AND 10 THEN 'Entre 2 et 10 fois'\n        ELSE 'Plus de 10 fois'\n        END\n    ) AS sign_in_frequency,\n    decidim_users.last_sign_in_at,\n    decidim_users.created_at,\n    decidim_users.updated_at,\n    decidim_users.invitation_created_at,\n    decidim_users.invitation_sent_at,\n    decidim_users.invitation_accepted_at,\n    decidim_users.invited_by_id,\n    decidim_users.invited_by_type,\n    decidim_users.decidim_organization_id,\n    decidim_users.confirmed_at,\n    decidim_users.confirmation_token,\n    decidim_users.unconfirmed_email,\n    decidim_users.name,\n    decidim_users.locale,\n    decidim_users.deleted_at,\n    decidim_users.admin,\n    decidim_users.managed,\n    decidim_users.roles,\n    decidim_users.nickname,\n    decidim_users.accepted_tos_version,\n    decidim_users.type,\n    decidim_users.following_count,\n    decidim_users.followers_count,\n    decidim_users.failed_attempts,\n    decidim_users.locked_at,\n    decidim_users.admin_terms_accepted_at,\n    decidim_users.blocked,\n    decidim_users.blocked_at,\n    (CASE WHEN decidim_users.confirmed_at IS NULL THEN false ELSE true END) AS confirmed,\n    decidim_users.extended_data\nFROM {{ ref (\"stg_decidim_users\")}} as decidim_users\n    WHERE deleted_at IS NULL\n    AND type LIKE 'Decidim::User'", "language": "sql", "refs": [{"name": "stg_decidim_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_budgets_projects": {"database": "test_lyon", "schema": "prod", "name": "int_budgets_projects", "resource_type": "model", "package_name": "demo", "path": "intermediate/budgets/int_budgets_projects.sql", "original_file_path": "models/intermediate/budgets/int_budgets_projects.sql", "unique_id": "model.demo.int_budgets_projects", "fqn": ["demo", "intermediate", "budgets", "int_budgets_projects"], "alias": "int_budgets_projects", "checksum": {"name": "sha256", "checksum": "6a6b85bc8272a54383966503a6ac5050d3b4be3e20c41fa303a47769ba3f0a77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.631509, "relation_name": "\"test_lyon\".\"prod\".\"int_budgets_projects\"", "raw_code": "SELECT\n    id, \n    title,\n    description,\n    created_at,\n    decidim_scope_id, \n    project_amount,\n    selected_at,\n    decidim_budgets_budget_id,\n    resource_type,\n    (CASE\n        WHEN selected_at IS NULL\n        THEN false\n        ELSE true\n    END) AS is_selected\nFROM {{ ref(\"stg_decidim_budgets_projects\")}}", "language": "sql", "refs": [{"name": "stg_decidim_budgets_projects", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_budgets_projects"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_budgets_orders": {"database": "test_lyon", "schema": "prod", "name": "int_budgets_orders", "resource_type": "model", "package_name": "demo", "path": "intermediate/budgets/int_budgets_orders.sql", "original_file_path": "models/intermediate/budgets/int_budgets_orders.sql", "unique_id": "model.demo.int_budgets_orders", "fqn": ["demo", "intermediate", "budgets", "int_budgets_orders"], "alias": "int_budgets_orders", "checksum": {"name": "sha256", "checksum": "c5e8547892ae21bf292f3901f4c325d3612f5574b76934c832086cf44d077b76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.6325629, "relation_name": "\"test_lyon\".\"prod\".\"int_budgets_orders\"", "raw_code": "SELECT\n    id,\n    decidim_user_id,\n    checked_out_at,\n    created_at,\n    updated_at,\n    decidim_budgets_budget_id,\n    (CASE\n        WHEN checked_out_at IS NULL\n        THEN false\n        ELSE true\n    END) AS vote_finished\nFROM {{ ref(\"stg_decidim_budgets_orders\")}}", "language": "sql", "refs": [{"name": "stg_decidim_budgets_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_budgets_orders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_meetings": {"database": "test_lyon", "schema": "prod", "name": "int_meetings", "resource_type": "model", "package_name": "demo", "path": "intermediate/meetings/int_meetings.sql", "original_file_path": "models/intermediate/meetings/int_meetings.sql", "unique_id": "model.demo.int_meetings", "fqn": ["demo", "intermediate", "meetings", "int_meetings"], "alias": "int_meetings", "checksum": {"name": "sha256", "checksum": "3ae6f139762d8f65078a697317a1e2e49502ab89cf3d56eb058b28d6d7ef0575"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.633665, "relation_name": "\"test_lyon\".\"prod\".\"int_meetings\"", "raw_code": "SELECT\n    decidim_meetings.id,\n    decidim_meetings.title,\n    decidim_meetings.description,\n    decidim_meetings.address,\n    decidim_meetings.attendees_count,\n    decidim_meetings.created_at,\n    decidim_meetings.decidim_scope_id,\n    decidim_meetings.decidim_component_id,\n    decidim_meetings.start_time,\n    decidim_meetings.end_time,\n    decidim_meetings.registration_url,\n    decidim_meetings.type_of_meeting, \n    (CASE decidim_meetings.type_of_meeting\n        WHEN 'online' THEN 'En ligne'\n        WHEN 'in_person' THEN 'En pr\u00e9sentiel'\n        WHEN 'hybrid' THEN 'Hybride'\n        ELSE  decidim_meetings.type_of_meeting\n        END\n    ) AS translated_type_of_meeting,\n    decidim_meetings.private_meeting,\n    decidim_meetings.decidim_author_id,\n    decidim_meetings.resource_type\n    FROM {{ ref (\"stg_decidim_meetings\")}} as decidim_meetings", "language": "sql", "refs": [{"name": "stg_decidim_meetings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_meetings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_scopes": {"database": "test_lyon", "schema": "prod", "name": "int_scopes", "resource_type": "model", "package_name": "demo", "path": "intermediate/scopes/int_scopes.sql", "original_file_path": "models/intermediate/scopes/int_scopes.sql", "unique_id": "model.demo.int_scopes", "fqn": ["demo", "intermediate", "scopes", "int_scopes"], "alias": "int_scopes", "checksum": {"name": "sha256", "checksum": "7c5488af2c9da4834ad42b60ed68513bd62b3d77121bd1345bc2edf5a77d7a67"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Intermediate model for Decidim scopes, excluding the 'part_of' column due to ARRAY bug in tests.", "columns": {"id": {"name": "id", "description": "Unique identifier for the scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_organization_id": {"name": "decidim_organization_id", "description": "Identifier for the Decidim organization to which the scope belongs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the scope was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the scope was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the scope in French, with a default value 'Sans secteur' if the name is empty.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scope_type_id": {"name": "scope_type_id", "description": "Identifier for the type of scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Identifier for the parent scope, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "Code associated with the scope.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/intermediate/scopes/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727441769.8699672, "relation_name": "\"test_lyon\".\"prod\".\"int_scopes\"", "raw_code": "-- Due to ARRAY bug in test, we create an intermediate scopes without the column part_of\n\nSELECT\n    decidim_scopes.id,\n    decidim_scopes.decidim_organization_id,\n    decidim_scopes.created_at,\n    decidim_scopes.updated_at,\n    coalesce(nullif(decidim_scopes.name, ''), 'Sans secteur') as name,\n    decidim_scopes.scope_type_id,\n    decidim_scopes.parent_id,\n    decidim_scopes.code\nFROM {{ ref (\"stg_decidim_scopes\") }}  as decidim_scopes", "language": "sql", "refs": [{"name": "stg_decidim_scopes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_scopes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.demo.int_proposals": {"database": "test_lyon", "schema": "prod", "name": "int_proposals", "resource_type": "model", "package_name": "demo", "path": "intermediate/proposals/int_proposals.sql", "original_file_path": "models/intermediate/proposals/int_proposals.sql", "unique_id": "model.demo.int_proposals", "fqn": ["demo", "intermediate", "proposals", "int_proposals"], "alias": "int_proposals", "checksum": {"name": "sha256", "checksum": "e20700e4bfae96e8013077d5be8976060be0b337d3c652e9c49210c1b44b3b91"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "indexes": [{"columns": ["id"], "type": "btree"}]}, "tags": [], "description": "Intermediate model for Decidim proposals, containing basic proposal details and states.", "columns": {"id": {"name": "id", "description": "Unique identifier for the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "Title of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "body": {"name": "body", "description": "Body text of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "Type of the resource, typically 'Decidim::Proposals::Proposal'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_component_id": {"name": "decidim_component_id", "description": "Identifier for the component within which the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "decidim_scope_id": {"name": "decidim_scope_id", "description": "Identifier for the scope of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp when the proposal was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "Timestamp when the proposal was published", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "Current state of the proposal, with default 'Pas d'\u00e9tat' if null", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "translated_state": {"name": "translated_state", "description": "Human-readable translated state of the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments_count": {"name": "comments_count", "description": "Number of comments on the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "endorsements_count": {"name": "endorsements_count", "description": "Number of endorsements on the proposal", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "Address related to the proposal, with default 'Pas d'adresse' if empty", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "demo://models/intermediate/proposals/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table", "indexes": [{"columns": ["id"], "type": "btree"}]}, "created_at": 1727441769.8703701, "relation_name": "\"test_lyon\".\"prod\".\"int_proposals\"", "raw_code": "{{ config(\n    indexes=[\n      {'columns': ['id'], 'type': 'btree'},\n    ]\n)}}\n\nSELECT\n    decidim_proposals.id,\n    decidim_proposals.title,\n    decidim_proposals.body,\n    decidim_proposals.resource_type,\n    decidim_proposals.decidim_component_id,\n    decidim_proposals.decidim_scope_id,\n    decidim_proposals.created_at,\n    decidim_proposals.published_at,\n    COALESCE(NULLIF(decidim_proposals.state, NULL), 'Pas d''\u00e9tat') AS state,\n    (CASE\n        WHEN decidim_proposals.state = 'evaluating' THEN 'En cours d''\u00e9valuation'\n        WHEN decidim_proposals.state = 'rejected' THEN 'Rejet\u00e9e'\n        WHEN decidim_proposals.state = 'accepted' THEN 'Accept\u00e9e'\n        WHEN decidim_proposals.state IS NULL THEN 'Pas d''\u00e9tat'\n        ELSE decidim_proposals.state\n        END\n    ) AS translated_state,\n    decidim_proposals.comments_count,\n    decidim_proposals.endorsements_count,\n    COALESCE(NULLIF(decidim_proposals.address,''),'Pas d''adresse') AS address\nFROM {{ ref (\"stg_decidim_proposals\")}} AS decidim_proposals\nWHERE published_at IS NOT NULL", "language": "sql", "refs": [{"name": "stg_decidim_proposals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_proposals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.demo.not_null_stg_decidim_forms_answer_choices_id.6373c5b027": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_answer_choices_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_answer_choices_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_answer_choices_id.6373c5b027", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_answer_choices_id"], "alias": "not_null_stg_decidim_forms_answer_choices_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.77, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_answer_choices", "attached_node": "model.demo.stg_decidim_forms_answer_choices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answer_choices')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_forms_answer_choices_id.cac0250df2": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_forms_answer_choices_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_forms_answer_choices_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.unique_stg_decidim_forms_answer_choices_id.cac0250df2", "fqn": ["demo", "staging", "decidim", "forms", "unique_stg_decidim_forms_answer_choices_id"], "alias": "unique_stg_decidim_forms_answer_choices_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.770902, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_answer_choices", "attached_node": "model.demo.stg_decidim_forms_answer_choices", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answer_choices')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_answer_choices_decidim_answer_id.70e833d8d0": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_answer_choices_decidim_answer_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_answer_choices_decidim_answer_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_answer_choices_decidim_answer_id.70e833d8d0", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_answer_choices_decidim_answer_id"], "alias": "not_null_stg_decidim_forms_answer_choices_decidim_answer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.771706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decidim_answer_id", "file_key_name": "models.stg_decidim_forms_answer_choices", "attached_node": "model.demo.stg_decidim_forms_answer_choices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "decidim_answer_id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answer_choices')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_answer_choices_body.0c7838e1b8": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_answer_choices_body", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_answer_choices_body.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_answer_choices_body.0c7838e1b8", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_answer_choices_body"], "alias": "not_null_stg_decidim_forms_answer_choices_body", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.772497, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answer_choices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_answer_choices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "body", "file_key_name": "models.stg_decidim_forms_answer_choices", "attached_node": "model.demo.stg_decidim_forms_answer_choices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "body", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answer_choices')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_answers_id.92ce43439f": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_answers_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_answers_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_answers_id.92ce43439f", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_answers_id"], "alias": "not_null_stg_decidim_forms_answers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.7733161, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_answers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_answers", "attached_node": "model.demo.stg_decidim_forms_answers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answers')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_forms_answers_id.8fb3388969": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_forms_answers_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_forms_answers_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.unique_stg_decidim_forms_answers_id.8fb3388969", "fqn": ["demo", "staging", "decidim", "forms", "unique_stg_decidim_forms_answers_id"], "alias": "unique_stg_decidim_forms_answers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.774173, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_answers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_forms_answers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_answers", "attached_node": "model.demo.stg_decidim_forms_answers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_answers')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_question_matrix_rows_id.7e6619509e": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_question_matrix_rows_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_question_matrix_rows_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_question_matrix_rows_id.7e6619509e", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_question_matrix_rows_id"], "alias": "not_null_stg_decidim_forms_question_matrix_rows_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.774949, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_question_matrix_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_question_matrix_rows", "attached_node": "model.demo.stg_decidim_forms_question_matrix_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_question_matrix_rows')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_forms_question_matrix_rows_id.8db20e3085": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_forms_question_matrix_rows_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_forms_question_matrix_rows_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.unique_stg_decidim_forms_question_matrix_rows_id.8db20e3085", "fqn": ["demo", "staging", "decidim", "forms", "unique_stg_decidim_forms_question_matrix_rows_id"], "alias": "unique_stg_decidim_forms_question_matrix_rows_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.775705, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_question_matrix_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_question_matrix_rows", "attached_node": "model.demo.stg_decidim_forms_question_matrix_rows", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_question_matrix_rows')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id.55db0b6fe6": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_que_b7cff25dabb5d3b02a571f0f586cf6bf.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id.55db0b6fe6", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id"], "alias": "not_null_stg_decidim_forms_que_b7cff25dabb5d3b02a571f0f586cf6bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_decidim_forms_que_b7cff25dabb5d3b02a571f0f586cf6bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_decidim_forms_que_b7cff25dabb5d3b02a571f0f586cf6bf"}, "created_at": 1727441769.77647, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_decidim_forms_que_b7cff25dabb5d3b02a571f0f586cf6bf\") }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_question_matrix_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decidim_question_id", "file_key_name": "models.stg_decidim_forms_question_matrix_rows", "attached_node": "model.demo.stg_decidim_forms_question_matrix_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "decidim_question_id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_question_matrix_rows')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_question_matrix_rows_body.71d322a975": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_question_matrix_rows_body", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_question_matrix_rows_body.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_question_matrix_rows_body.71d322a975", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_question_matrix_rows_body"], "alias": "not_null_stg_decidim_forms_question_matrix_rows_body", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.777229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_question_matrix_rows", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_question_matrix_rows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "body", "file_key_name": "models.stg_decidim_forms_question_matrix_rows", "attached_node": "model.demo.stg_decidim_forms_question_matrix_rows", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "body", "model": "{{ get_where_subquery(ref('stg_decidim_forms_question_matrix_rows')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_questionnaires_id.74cea2a594": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_questionnaires_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_questionnaires_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_questionnaires_id.74cea2a594", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_questionnaires_id"], "alias": "not_null_stg_decidim_forms_questionnaires_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.778058, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_questionnaires", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_questionnaires"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_questionnaires", "attached_node": "model.demo.stg_decidim_forms_questionnaires", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_questionnaires')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_forms_questionnaires_id.c228c4d2a1": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_forms_questionnaires_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_forms_questionnaires_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.unique_stg_decidim_forms_questionnaires_id.c228c4d2a1", "fqn": ["demo", "staging", "decidim", "forms", "unique_stg_decidim_forms_questionnaires_id"], "alias": "unique_stg_decidim_forms_questionnaires_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.7788239, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_questionnaires", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_forms_questionnaires"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_questionnaires", "attached_node": "model.demo.stg_decidim_forms_questionnaires", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_questionnaires')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_forms_questions_id.c7a096fa50": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_forms_questions_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_forms_questions_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_forms_questions_id.c7a096fa50", "fqn": ["demo", "staging", "decidim", "forms", "not_null_stg_decidim_forms_questions_id"], "alias": "not_null_stg_decidim_forms_questions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.779597, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_questions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_forms_questions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_questions", "attached_node": "model.demo.stg_decidim_forms_questions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_questions')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_forms_questions_id.3becc3a082": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_forms_questions_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_forms_questions_id.sql", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "test.demo.unique_stg_decidim_forms_questions_id.3becc3a082", "fqn": ["demo", "staging", "decidim", "forms", "unique_stg_decidim_forms_questions_id"], "alias": "unique_stg_decidim_forms_questions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.780351, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_forms_questions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_forms_questions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_forms_questions", "attached_node": "model.demo.stg_decidim_forms_questions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_forms_questions')) }}"}, "namespace": null}}, "test.demo.unique_stg_decidim_budgets_line_items_id.93d157dab5": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_budgets_line_items_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_budgets_line_items_id.sql", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "test.demo.unique_stg_decidim_budgets_line_items_id.93d157dab5", "fqn": ["demo", "staging", "decidim", "budgets", "unique_stg_decidim_budgets_line_items_id"], "alias": "unique_stg_decidim_budgets_line_items_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.7947578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_budgets_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_budgets_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_budgets_line_items", "attached_node": "model.demo.stg_decidim_budgets_line_items", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_budgets_line_items')) }}"}, "namespace": null}}, "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id.759330b24d": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id", "resource_type": "test", "package_name": "demo", "path": "dbt_utils_unique_combination_o_b42a72e6dc642c4f0174b7aaf01eabc7.sql", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id.759330b24d", "fqn": ["demo", "staging", "decidim", "budgets", "dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id"], "alias": "dbt_utils_unique_combination_o_b42a72e6dc642c4f0174b7aaf01eabc7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b42a72e6dc642c4f0174b7aaf01eabc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b42a72e6dc642c4f0174b7aaf01eabc7"}, "created_at": 1727441769.795609, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b42a72e6dc642c4f0174b7aaf01eabc7\") }}", "language": "sql", "refs": [{"name": "stg_decidim_budgets_line_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.demo.stg_decidim_budgets_line_items"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_decidim_budgets_line_items", "attached_node": "model.demo.stg_decidim_budgets_line_items", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["decidim_order_id", "decidim_project_id"], "model": "{{ get_where_subquery(ref('stg_decidim_budgets_line_items')) }}"}, "namespace": "dbt_utils"}}, "test.demo.unique_stg_decidim_categorizations_id.6566c00409": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_categorizations_id", "resource_type": "test", "package_name": "demo", "path": "unique_stg_decidim_categorizations_id.sql", "original_file_path": "models/staging/decidim/categories/schema.yml", "unique_id": "test.demo.unique_stg_decidim_categorizations_id.6566c00409", "fqn": ["demo", "staging", "decidim", "categories", "unique_stg_decidim_categorizations_id"], "alias": "unique_stg_decidim_categorizations_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.807109, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_categorizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.stg_decidim_categorizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_categorizations", "attached_node": "model.demo.stg_decidim_categorizations", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_categorizations')) }}"}, "namespace": null}}, "test.demo.not_null_stg_decidim_categorizations_id.a059a79c08": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_categorizations_id", "resource_type": "test", "package_name": "demo", "path": "not_null_stg_decidim_categorizations_id.sql", "original_file_path": "models/staging/decidim/categories/schema.yml", "unique_id": "test.demo.not_null_stg_decidim_categorizations_id.a059a79c08", "fqn": ["demo", "staging", "decidim", "categories", "not_null_stg_decidim_categorizations_id"], "alias": "not_null_stg_decidim_categorizations_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8079271, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_categorizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.stg_decidim_categorizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_categorizations", "attached_node": "model.demo.stg_decidim_categorizations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_categorizations')) }}"}, "namespace": null}}, "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type.d2c10e48e4": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type", "resource_type": "test", "package_name": "demo", "path": "dbt_utils_unique_combination_o_e91d0d82d3171d32221006a1ae09a09f.sql", "original_file_path": "models/staging/decidim/categories/schema.yml", "unique_id": "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type.d2c10e48e4", "fqn": ["demo", "staging", "decidim", "categories", "dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type"], "alias": "dbt_utils_unique_combination_o_e91d0d82d3171d32221006a1ae09a09f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e91d0d82d3171d32221006a1ae09a09f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e91d0d82d3171d32221006a1ae09a09f"}, "created_at": 1727441769.808712, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e91d0d82d3171d32221006a1ae09a09f\") }}", "language": "sql", "refs": [{"name": "stg_decidim_categorizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.demo.stg_decidim_categorizations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_decidim_categorizations", "attached_node": "model.demo.stg_decidim_categorizations", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["categorizable_id", "categorizable_type"], "model": "{{ get_where_subquery(ref('stg_decidim_categorizations')) }}"}, "namespace": "dbt_utils"}}, "test.demo.accepted_values_followings_following_way__real_follow__ancestor_follow.60d8b91db4": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "accepted_values_followings_following_way__real_follow__ancestor_follow", "resource_type": "test", "package_name": "demo", "path": "accepted_values_followings_2bd6d020694d7d1aa5e3c0a6620f8f06.sql", "original_file_path": "models/marts/followings/schema.yml", "unique_id": "test.demo.accepted_values_followings_following_way__real_follow__ancestor_follow.60d8b91db4", "fqn": ["demo", "marts", "followings", "accepted_values_followings_following_way__real_follow__ancestor_follow"], "alias": "accepted_values_followings_2bd6d020694d7d1aa5e3c0a6620f8f06", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_followings_2bd6d020694d7d1aa5e3c0a6620f8f06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_followings_2bd6d020694d7d1aa5e3c0a6620f8f06"}, "created_at": 1727441769.8130739, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_followings_2bd6d020694d7d1aa5e3c0a6620f8f06\") }}", "language": "sql", "refs": [{"name": "followings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.demo.followings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "following_way", "file_key_name": "models.followings", "attached_node": "model.demo.followings", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["real_follow", "ancestor_follow"], "column_name": "following_way", "model": "{{ get_where_subquery(ref('followings')) }}"}, "namespace": null}}, "test.demo.not_null_components_id.85e75ab698": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_components_id", "resource_type": "test", "package_name": "demo", "path": "not_null_components_id.sql", "original_file_path": "models/marts/components/schema.yml", "unique_id": "test.demo.not_null_components_id.85e75ab698", "fqn": ["demo", "marts", "components", "not_null_components_id"], "alias": "not_null_components_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.820657, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.components", "attached_node": "model.demo.components", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('components')) }}"}, "namespace": null}}, "test.demo.unique_components_id.55875f0fa3": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_components_id", "resource_type": "test", "package_name": "demo", "path": "unique_components_id.sql", "original_file_path": "models/marts/components/schema.yml", "unique_id": "test.demo.unique_components_id.55875f0fa3", "fqn": ["demo", "marts", "components", "unique_components_id"], "alias": "unique_components_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.821463, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.components", "attached_node": "model.demo.components", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('components')) }}"}, "namespace": null}}, "test.demo.not_null_components_manifest_name.2795dc3709": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_components_manifest_name", "resource_type": "test", "package_name": "demo", "path": "not_null_components_manifest_name.sql", "original_file_path": "models/marts/components/schema.yml", "unique_id": "test.demo.not_null_components_manifest_name.2795dc3709", "fqn": ["demo", "marts", "components", "not_null_components_manifest_name"], "alias": "not_null_components_manifest_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8222458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "manifest_name", "file_key_name": "models.components", "attached_node": "model.demo.components", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_name", "model": "{{ get_where_subquery(ref('components')) }}"}, "namespace": null}}, "test.demo.not_null_components_decidim_organization_id.3ae04f70dd": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_components_decidim_organization_id", "resource_type": "test", "package_name": "demo", "path": "not_null_components_decidim_organization_id.sql", "original_file_path": "models/marts/components/schema.yml", "unique_id": "test.demo.not_null_components_decidim_organization_id.3ae04f70dd", "fqn": ["demo", "marts", "components", "not_null_components_decidim_organization_id"], "alias": "not_null_components_decidim_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.823076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decidim_organization_id", "file_key_name": "models.components", "attached_node": "model.demo.components", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "decidim_organization_id", "model": "{{ get_where_subquery(ref('components')) }}"}, "namespace": null}}, "test.demo.unique_users_id.ec952d9777": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_users_id", "resource_type": "test", "package_name": "demo", "path": "unique_users_id.sql", "original_file_path": "models/marts/users/schema.yml", "unique_id": "test.demo.unique_users_id.ec952d9777", "fqn": ["demo", "marts", "users", "unique_users_id"], "alias": "unique_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.837776, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.users", "attached_node": "model.demo.users", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}}, "test.demo.not_null_users_id.4db5ed5c63": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_users_id", "resource_type": "test", "package_name": "demo", "path": "not_null_users_id.sql", "original_file_path": "models/marts/users/schema.yml", "unique_id": "test.demo.not_null_users_id.4db5ed5c63", "fqn": ["demo", "marts", "users", "not_null_users_id"], "alias": "not_null_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8385909, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.users", "attached_node": "model.demo.users", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}}, "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "relationships_users_id__id__ref_int_users_", "resource_type": "test", "package_name": "demo", "path": "relationships_users_id__id__ref_int_users_.sql", "original_file_path": "models/marts/users/schema.yml", "unique_id": "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5", "fqn": ["demo", "marts", "users", "relationships_users_id__id__ref_int_users_"], "alias": "relationships_users_id__id__ref_int_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.839432, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_users", "package": null, "version": null}, {"name": "users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.demo.int_users", "model.demo.users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.users", "attached_node": "model.demo.users", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "id", "to": "ref('int_users')", "field": "id", "model": "{{ get_where_subquery(ref('users')) }}"}, "namespace": null}}, "test.demo.dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id.da5f9c9505": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id", "resource_type": "test", "package_name": "demo", "path": "dbt_utils_unique_combination_o_f2799d012d3f7daa7590aefc4588a1c9.sql", "original_file_path": "models/marts/proposals/schema.yml", "unique_id": "test.demo.dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id.da5f9c9505", "fqn": ["demo", "marts", "proposals", "dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id"], "alias": "dbt_utils_unique_combination_o_f2799d012d3f7daa7590aefc4588a1c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f2799d012d3f7daa7590aefc4588a1c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f2799d012d3f7daa7590aefc4588a1c9"}, "created_at": 1727441769.847372, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f2799d012d3f7daa7590aefc4588a1c9\") }}", "language": "sql", "refs": [{"name": "proposals_votes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.demo.proposals_votes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.proposals_votes", "attached_node": "model.demo.proposals_votes", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["decidim_author_id", "decidim_proposal_id"], "model": "{{ get_where_subquery(ref('proposals_votes')) }}"}, "namespace": "dbt_utils"}}, "test.demo.unique_int_users_id.e5ba0ede1e": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_int_users_id", "resource_type": "test", "package_name": "demo", "path": "unique_int_users_id.sql", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "test.demo.unique_int_users_id.e5ba0ede1e", "fqn": ["demo", "intermediate", "users", "unique_int_users_id"], "alias": "unique_int_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8639638, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.demo.int_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.int_users", "attached_node": "model.demo.int_users", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_users')) }}"}, "namespace": null}}, "test.demo.not_null_int_users_id.1125b186c1": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_int_users_id", "resource_type": "test", "package_name": "demo", "path": "not_null_int_users_id.sql", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "test.demo.not_null_int_users_id.1125b186c1", "fqn": ["demo", "intermediate", "users", "not_null_int_users_id"], "alias": "not_null_int_users_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8647811, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.int_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.int_users", "attached_node": "model.demo.int_users", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_users')) }}"}, "namespace": null}}, "test.demo.not_null_int_users_nickname.b90ddd7677": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_int_users_nickname", "resource_type": "test", "package_name": "demo", "path": "not_null_int_users_nickname.sql", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "test.demo.not_null_int_users_nickname.b90ddd7677", "fqn": ["demo", "intermediate", "users", "not_null_int_users_nickname"], "alias": "not_null_int_users_nickname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727441769.8655622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.demo.int_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nickname", "file_key_name": "models.int_users", "attached_node": "model.demo.int_users", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nickname", "model": "{{ get_where_subquery(ref('int_users')) }}"}, "namespace": null}}, "model.test_lyon.decidim_awesome_proposal_extra_fields": {"database": "test_lyon", "schema": "prod", "name": "decidim_awesome_proposal_extra_fields", "resource_type": "model", "package_name": "test_lyon", "path": "marts/decidim_awesome/decidim_awesome_proposal_extra_fields.sql", "original_file_path": "models/marts/decidim_awesome/decidim_awesome_proposal_extra_fields.sql", "unique_id": "model.test_lyon.decidim_awesome_proposal_extra_fields", "fqn": ["test_lyon", "marts", "decidim_awesome", "decidim_awesome_proposal_extra_fields"], "alias": "decidim_awesome_proposal_extra_fields", "checksum": {"name": "sha256", "checksum": "e74fef8bbaffd8fb07cd179ee4cd299727ac45ee1c196509a24b2b0dbf0a1561"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727446081.2962859, "relation_name": "\"test_lyon\".\"prod\".\"decidim_awesome_proposal_extra_fields\"", "raw_code": "SELECT\n    decidim_awesome_proposal_extra_fields.id,\n    decidim_awesome_proposal_extra_fields.proposal_id,\n    decidim_awesome_proposal_extra_fields.private_field_description,\n    decidim_awesome_proposal_extra_fields.private_field_content,\n    decidim_proposals_proposals.decidim_component_id,\n    components.ps_title\nFROM\n    {{ ref (\"int_decidim_awesome_proposal_extra_fields\")}} AS decidim_awesome_proposal_extra_fields\nJOIN {{ ref (\"stg_decidim_proposals\")}} AS decidim_proposals_proposals ON decidim_awesome_proposal_extra_fields.proposal_id = decidim_proposals_proposals.id\nJOIN {{ ref (\"components\")}} AS components ON decidim_proposals_proposals.decidim_component_id = components.id", "language": "sql", "refs": [{"name": "int_decidim_awesome_proposal_extra_fields", "package": null, "version": null}, {"name": "stg_decidim_proposals", "package": null, "version": null}, {"name": "components", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.test_lyon.int_decidim_awesome_proposal_extra_fields", "model.demo.stg_decidim_proposals", "model.demo.components"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.test_lyon.stg_decidim_awesome_proposal_extra_fields": {"database": "test_lyon", "schema": "prod", "name": "stg_decidim_awesome_proposal_extra_fields", "resource_type": "model", "package_name": "test_lyon", "path": "staging/decidim/stg_decidim_awesome_proposal_extra_fields.sql", "original_file_path": "models/staging/decidim/stg_decidim_awesome_proposal_extra_fields.sql", "unique_id": "model.test_lyon.stg_decidim_awesome_proposal_extra_fields", "fqn": ["test_lyon", "staging", "decidim", "stg_decidim_awesome_proposal_extra_fields"], "alias": "stg_decidim_awesome_proposal_extra_fields", "checksum": {"name": "sha256", "checksum": "c680c40fcfafcbeb0896883b2dcd15f87fa987271129f4df0c3e1073c695caaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table for private proposal fields in the module decidim awesome.", "columns": {"id": {"name": "id", "description": "Primary key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proposal_id": {"name": "proposal_id", "description": "Id of the proposal the private field is linked to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "private_body": {"name": "private_body", "description": "Body of the answers of the private proposals fields answered by the user. The format is XML.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "test_lyon://models/staging/decidim/schema.yml", "build_path": null, "unrendered_config": {"materialized": "table"}, "created_at": 1727446081.349271, "relation_name": "\"test_lyon\".\"prod\".\"stg_decidim_awesome_proposal_extra_fields\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('decidim', 'decidim_awesome_proposal_extra_fields_test') }}\n)\n\n\nSELECT\n    id,\n    decidim_proposal_id AS proposal_id,\n    updated_at,\n    created_at,\n    replace(private_body_clear, '&nbsp;', '') AS private_body_clear\nFROM source", "language": "sql", "refs": [], "sources": [["decidim", "decidim_awesome_proposal_extra_fields_test"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_id.aad3a9d9b8": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_awesome_proposal_extra_fields_id", "resource_type": "test", "package_name": "test_lyon", "path": "not_null_stg_decidim_awesome_proposal_extra_fields_id.sql", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_id.aad3a9d9b8", "fqn": ["test_lyon", "staging", "decidim", "not_null_stg_decidim_awesome_proposal_extra_fields_id"], "alias": "not_null_stg_decidim_awesome_proposal_extra_fields_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727446081.381366, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_awesome_proposal_extra_fields", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_awesome_proposal_extra_fields", "attached_node": "model.test_lyon.stg_decidim_awesome_proposal_extra_fields", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_awesome_proposal_extra_fields')) }}"}, "namespace": null}}, "test.test_lyon.unique_stg_decidim_awesome_proposal_extra_fields_id.1f06fde107": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "unique_stg_decidim_awesome_proposal_extra_fields_id", "resource_type": "test", "package_name": "test_lyon", "path": "unique_stg_decidim_awesome_proposal_extra_fields_id.sql", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "test.test_lyon.unique_stg_decidim_awesome_proposal_extra_fields_id.1f06fde107", "fqn": ["test_lyon", "staging", "decidim", "unique_stg_decidim_awesome_proposal_extra_fields_id"], "alias": "unique_stg_decidim_awesome_proposal_extra_fields_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727446081.3822951, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_awesome_proposal_extra_fields", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.stg_decidim_awesome_proposal_extra_fields", "attached_node": "model.test_lyon.stg_decidim_awesome_proposal_extra_fields", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_decidim_awesome_proposal_extra_fields')) }}"}, "namespace": null}}, "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.5154a34bb9": {"database": "test_lyon", "schema": "prod_dbt_test__audit", "name": "not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id", "resource_type": "test", "package_name": "test_lyon", "path": "not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.sql", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.5154a34bb9", "fqn": ["test_lyon", "staging", "decidim", "not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id"], "alias": "not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1727446081.383069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_decidim_awesome_proposal_extra_fields", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "proposal_id", "file_key_name": "models.stg_decidim_awesome_proposal_extra_fields", "attached_node": "model.test_lyon.stg_decidim_awesome_proposal_extra_fields", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposal_id", "model": "{{ get_where_subquery(ref('stg_decidim_awesome_proposal_extra_fields')) }}"}, "namespace": null}}}, "sources": {"source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test": {"database": "test_lyon", "schema": "public", "name": "decidim_awesome_proposal_extra_fields_test", "resource_type": "source", "package_name": "test_lyon", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test", "fqn": ["test_lyon", "staging", "decidim", "decidim", "decidim_awesome_proposal_extra_fields_test"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_awesome_proposal_extra_fields_test", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_awesome_proposal_extra_fields_test\"", "created_at": 1727441769.8751261}, "source.demo.decidim.decidim_components": {"database": "test_lyon", "schema": "public", "name": "decidim_components", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_components", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_components"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_components", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_components\"", "created_at": 1727441769.875642}, "source.demo.decidim.decidim_assemblies": {"database": "test_lyon", "schema": "public", "name": "decidim_assemblies", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_assemblies", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_assemblies"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_assemblies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_assemblies\"", "created_at": 1727441769.8757172}, "source.demo.decidim.decidim_participatory_processes": {"database": "test_lyon", "schema": "public", "name": "decidim_participatory_processes", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_participatory_processes", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_participatory_processes"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_participatory_processes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_participatory_processes\"", "created_at": 1727441769.875784}, "source.demo.decidim.decidim_participatory_process_steps": {"database": "test_lyon", "schema": "public", "name": "decidim_participatory_process_steps", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_participatory_process_steps", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_participatory_process_steps"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_participatory_process_steps", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_participatory_process_steps\"", "created_at": 1727441769.8758452}, "source.demo.decidim.decidim_users": {"database": "test_lyon", "schema": "public", "name": "decidim_users", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_users", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_users"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_users\"", "created_at": 1727441769.875906}, "source.demo.decidim.decidim_proposals_proposals": {"database": "test_lyon", "schema": "public", "name": "decidim_proposals_proposals", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_proposals_proposals", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_proposals_proposals"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_proposals_proposals", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_proposals_proposals\"", "created_at": 1727441769.875964}, "source.demo.decidim.decidim_coauthorships": {"database": "test_lyon", "schema": "public", "name": "decidim_coauthorships", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_coauthorships", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_coauthorships"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_coauthorships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_coauthorships\"", "created_at": 1727441769.876035}, "source.demo.decidim.decidim_moderations": {"database": "test_lyon", "schema": "public", "name": "decidim_moderations", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_moderations", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_moderations"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_moderations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_moderations\"", "created_at": 1727441769.876097}, "source.demo.decidim.decidim_scopes": {"database": "test_lyon", "schema": "public", "name": "decidim_scopes", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_scopes", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_scopes"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_scopes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_scopes\"", "created_at": 1727441769.876155}, "source.demo.decidim.decidim_blogs_posts": {"database": "test_lyon", "schema": "public", "name": "decidim_blogs_posts", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_blogs_posts", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_blogs_posts"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_blogs_posts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_blogs_posts\"", "created_at": 1727441769.876214}, "source.demo.decidim.decidim_debates_debates": {"database": "test_lyon", "schema": "public", "name": "decidim_debates_debates", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_debates_debates", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_debates_debates"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_debates_debates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_debates_debates\"", "created_at": 1727441769.876269}, "source.demo.decidim.decidim_meetings_meetings": {"database": "test_lyon", "schema": "public", "name": "decidim_meetings_meetings", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_meetings_meetings", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_meetings_meetings"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_meetings_meetings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_meetings_meetings\"", "created_at": 1727441769.8763251}, "source.demo.decidim.decidim_accountability_results": {"database": "test_lyon", "schema": "public", "name": "decidim_accountability_results", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_accountability_results", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_accountability_results"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_accountability_results", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_accountability_results\"", "created_at": 1727441769.8763819}, "source.demo.decidim.decidim_comments_comments": {"database": "test_lyon", "schema": "public", "name": "decidim_comments_comments", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_comments_comments", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_comments_comments"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_comments_comments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_comments_comments\"", "created_at": 1727441769.876437}, "source.demo.decidim.decidim_proposals_collaborative_drafts": {"database": "test_lyon", "schema": "public", "name": "decidim_proposals_collaborative_drafts", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_proposals_collaborative_drafts", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_proposals_collaborative_drafts"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_proposals_collaborative_drafts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_proposals_collaborative_drafts\"", "created_at": 1727441769.876491}, "source.demo.decidim.decidim_endorsements": {"database": "test_lyon", "schema": "public", "name": "decidim_endorsements", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_endorsements", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_endorsements"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_endorsements", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_endorsements\"", "created_at": 1727441769.876547}, "source.demo.decidim.decidim_follows": {"database": "test_lyon", "schema": "public", "name": "decidim_follows", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_follows", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_follows"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_follows", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_follows\"", "created_at": 1727441769.876603}, "source.demo.decidim.decidim_initiatives": {"database": "test_lyon", "schema": "public", "name": "decidim_initiatives", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_initiatives", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_initiatives"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_initiatives", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_initiatives\"", "created_at": 1727441769.876657}, "source.demo.decidim.decidim_initiatives_type_scopes": {"database": "test_lyon", "schema": "public", "name": "decidim_initiatives_type_scopes", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_initiatives_type_scopes", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_initiatives_type_scopes"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_initiatives_type_scopes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_initiatives_type_scopes\"", "created_at": 1727441769.8767118}, "source.demo.decidim.decidim_surveys_surveys": {"database": "test_lyon", "schema": "public", "name": "decidim_surveys_surveys", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_surveys_surveys", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_surveys_surveys"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_surveys_surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_surveys_surveys\"", "created_at": 1727441769.876767}, "source.demo.decidim.decidim_attachments": {"database": "test_lyon", "schema": "public", "name": "decidim_attachments", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_attachments", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_attachments"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_attachments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_attachments\"", "created_at": 1727441769.876822}, "source.demo.decidim.decidim_proposals_proposal_votes": {"database": "test_lyon", "schema": "public", "name": "decidim_proposals_proposal_votes", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_proposals_proposal_votes", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_proposals_proposal_votes"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_proposals_proposal_votes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_proposals_proposal_votes\"", "created_at": 1727441769.8768792}, "source.demo.decidim.decidim_meetings_registrations": {"database": "test_lyon", "schema": "public", "name": "decidim_meetings_registrations", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/schema.yml", "original_file_path": "models/staging/decidim/schema.yml", "unique_id": "source.demo.decidim.decidim_meetings_registrations", "fqn": ["demo", "staging", "decidim", "decidim", "decidim_meetings_registrations"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_meetings_registrations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_meetings_registrations\"", "created_at": 1727441769.876936}, "source.demo.decidim.decidim_organizations": {"database": "test_lyon", "schema": "public", "name": "decidim_organizations", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/organizations/schema.yml", "original_file_path": "models/staging/decidim/organizations/schema.yml", "unique_id": "source.demo.decidim.decidim_organizations", "fqn": ["demo", "staging", "decidim", "organizations", "decidim", "decidim_organizations"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_organizations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Table containing organization informations", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_organizations\"", "created_at": 1727441769.876991}, "source.demo.decidim.decidim_forms_answer_choices": {"database": "test_lyon", "schema": "public", "name": "decidim_forms_answer_choices", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/forms/schema.yml", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "source.demo.decidim.decidim_forms_answer_choices", "fqn": ["demo", "staging", "decidim", "forms", "decidim", "decidim_forms_answer_choices"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_forms_answer_choices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_forms_answer_choices\"", "created_at": 1727441769.877047}, "source.demo.decidim.decidim_forms_answers": {"database": "test_lyon", "schema": "public", "name": "decidim_forms_answers", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/forms/schema.yml", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "source.demo.decidim.decidim_forms_answers", "fqn": ["demo", "staging", "decidim", "forms", "decidim", "decidim_forms_answers"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_forms_answers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_forms_answers\"", "created_at": 1727441769.877271}, "source.demo.decidim.decidim_forms_question_matrix_rows": {"database": "test_lyon", "schema": "public", "name": "decidim_forms_question_matrix_rows", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/forms/schema.yml", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "source.demo.decidim.decidim_forms_question_matrix_rows", "fqn": ["demo", "staging", "decidim", "forms", "decidim", "decidim_forms_question_matrix_rows"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_forms_question_matrix_rows", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_forms_question_matrix_rows\"", "created_at": 1727441769.877335}, "source.demo.decidim.decidim_forms_questionnaires": {"database": "test_lyon", "schema": "public", "name": "decidim_forms_questionnaires", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/forms/schema.yml", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "source.demo.decidim.decidim_forms_questionnaires", "fqn": ["demo", "staging", "decidim", "forms", "decidim", "decidim_forms_questionnaires"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_forms_questionnaires", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_forms_questionnaires\"", "created_at": 1727441769.877393}, "source.demo.decidim.decidim_forms_questions": {"database": "test_lyon", "schema": "public", "name": "decidim_forms_questions", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/forms/schema.yml", "original_file_path": "models/staging/decidim/forms/schema.yml", "unique_id": "source.demo.decidim.decidim_forms_questions", "fqn": ["demo", "staging", "decidim", "forms", "decidim", "decidim_forms_questions"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_forms_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_forms_questions\"", "created_at": 1727441769.877449}, "source.demo.decidim.decidim_areas": {"database": "test_lyon", "schema": "public", "name": "decidim_areas", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/areas/schema.yml", "original_file_path": "models/staging/decidim/areas/schema.yml", "unique_id": "source.demo.decidim.decidim_areas", "fqn": ["demo", "staging", "decidim", "areas", "decidim", "decidim_areas"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_areas", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_areas\"", "created_at": 1727441769.877506}, "source.demo.decidim.decidim_area_types": {"database": "test_lyon", "schema": "public", "name": "decidim_area_types", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/areas/schema.yml", "original_file_path": "models/staging/decidim/areas/schema.yml", "unique_id": "source.demo.decidim.decidim_area_types", "fqn": ["demo", "staging", "decidim", "areas", "decidim", "decidim_area_types"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_area_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_area_types\"", "created_at": 1727441769.877562}, "source.demo.decidim.decidim_budgets_projects": {"database": "test_lyon", "schema": "public", "name": "decidim_budgets_projects", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/budgets/schema.yml", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "source.demo.decidim.decidim_budgets_projects", "fqn": ["demo", "staging", "decidim", "budgets", "decidim", "decidim_budgets_projects"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_budgets_projects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_budgets_projects\"", "created_at": 1727441769.877619}, "source.demo.decidim.decidim_budgets_budgets": {"database": "test_lyon", "schema": "public", "name": "decidim_budgets_budgets", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/budgets/schema.yml", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "source.demo.decidim.decidim_budgets_budgets", "fqn": ["demo", "staging", "decidim", "budgets", "decidim", "decidim_budgets_budgets"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_budgets_budgets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_budgets_budgets\"", "created_at": 1727441769.877673}, "source.demo.decidim.decidim_budgets_line_items": {"database": "test_lyon", "schema": "public", "name": "decidim_budgets_line_items", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/budgets/schema.yml", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "source.demo.decidim.decidim_budgets_line_items", "fqn": ["demo", "staging", "decidim", "budgets", "decidim", "decidim_budgets_line_items"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_budgets_line_items", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_budgets_line_items\"", "created_at": 1727441769.877729}, "source.demo.decidim.decidim_budgets_orders": {"database": "test_lyon", "schema": "public", "name": "decidim_budgets_orders", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/budgets/schema.yml", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "source.demo.decidim.decidim_budgets_orders", "fqn": ["demo", "staging", "decidim", "budgets", "decidim", "decidim_budgets_orders"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_budgets_orders", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_budgets_orders\"", "created_at": 1727441769.8777852}, "source.demo.decidim.decidim_categories": {"database": "test_lyon", "schema": "public", "name": "decidim_categories", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/categories/schema.yml", "original_file_path": "models/staging/decidim/categories/schema.yml", "unique_id": "source.demo.decidim.decidim_categories", "fqn": ["demo", "staging", "decidim", "categories", "decidim", "decidim_categories"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_categories", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_categories\"", "created_at": 1727441769.877841}, "source.demo.decidim.decidim_categorizations": {"database": "test_lyon", "schema": "public", "name": "decidim_categorizations", "resource_type": "source", "package_name": "demo", "path": "models/staging/decidim/categories/schema.yml", "original_file_path": "models/staging/decidim/categories/schema.yml", "unique_id": "source.demo.decidim.decidim_categorizations", "fqn": ["demo", "staging", "decidim", "categories", "decidim", "decidim_categorizations"], "source_name": "decidim", "source_description": "", "loader": "", "identifier": "decidim_categorizations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"test_lyon\".\"public\".\"decidim_categorizations\"", "created_at": 1727441769.877898}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0357308, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.035918, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.036009, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.036087, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.036167, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0373151, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.037568, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.038083, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.038173, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.045192, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.045526, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.045741, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.045959, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.04627, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.046558, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.046676, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0468988, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.047148, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0477, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.047832, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.048047, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.048228, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.048515, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.048667, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049053, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049193, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049271, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049398, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049498, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.049758, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0502982, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.050405, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.050606, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.050706, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.050826, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.051483, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0519161, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.052115, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.052416, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.052514, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.052979, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0531, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.05319, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0535629, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0536819, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.053824, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.054253, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.05651, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0566158, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.056951, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.057227, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0579782, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.05811, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.058208, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.058305, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.058399, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.058669, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.058868, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0590641, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.059493, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.059835, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.062251, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.062366, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0625181, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.063083, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.063197, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.063315, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.064239, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.06511, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070294, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070494, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070608, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070673, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.07077, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070849, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.070983, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0711339, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.071987, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.072117, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.072402, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.072673, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.073063, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0733492, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0772219, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.079092, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.079943, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.080147, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0802839, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.080682, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.080945, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0811899, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.082382, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.086219, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0864892, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.086659, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.087571, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.087734, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0881732, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0903091, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.092577, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.093944, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.094354, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0948532, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.0950332, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.09555, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1008892, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.102219, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.102423, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.103143, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.103339, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.103812, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1043022, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1052082, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.105377, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.105511, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.105723, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1058571, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1060731, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.106209, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.106393, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.106527, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.106642, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1067789, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.106899, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.107098, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.11126, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.116114, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1170392, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.117929, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.118863, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.119065, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.119154, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.119379, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.119502, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1225102, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1256802, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1302888, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.130927, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1311, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1314409, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.131575, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.131676, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.131775, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.131855, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.131974, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1320598, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.132385, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1325161, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1334789, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1338198, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.134089, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.134497, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.134696, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.134898, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.135187, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.135364, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.135922, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1361978, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.136318, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.13645, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.136582, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.137196, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.138027, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.138316, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.138488, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.138679, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.138825, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1390479, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.139188, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.139723, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.140023, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.140168, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.140374, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1406238, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.140898, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1412501, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.141564, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.141809, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1419609, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.142148, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.142237, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1424372, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1425438, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.142771, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.142868, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.143067, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1431732, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1436439, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.143786, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1439848, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1440861, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.144285, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.144393, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1451368, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1452181, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1455731, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.145687, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.14578, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.146701, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1469598, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.147189, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1473632, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.147447, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1476328, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1477299, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.147916, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.148014, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1486359, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.148758, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.149038, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1494882, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1497998, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1499221, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.150039, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1502059, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1502872, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.150929, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.151027, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.151754, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.151885, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.152044, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.152228, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.152334, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.152632, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.15274, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1528609, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.153394, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1536472, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.153842, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1540108, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.154407, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1554182, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.155798, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.155988, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1573708, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1581728, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.158667, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1588202, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.158974, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.159028, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.159564, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.159956, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.160107, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1603498, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.160578, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.160766, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.160991, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.161103, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.161267, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.161354, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.161976, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.162324, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.162451, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.162796, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.16297, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1630442, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.163275, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.163386, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.163533, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.163585, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.163763, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1638558, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.164053, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.164146, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.164588, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1648571, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.165084, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.165194, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.165385, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.165479, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.165649, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1657548, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1659222, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1660302, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.166214, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.166303, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.166471, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1665401, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.166732, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1668968, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.16706, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.167128, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.167805, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.167906, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168013, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168114, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1682198, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168326, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1684349, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168556, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1686668, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168774, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1688828, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.168981, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169087, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169191, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169388, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169483, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169645, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.169715, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1699462, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1701171, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.170217, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1705852, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1707048, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.17085, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.171123, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.171212, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1714659, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.171629, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1718159, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.171906, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.172172, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1722949, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.172404, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.172523, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.17302, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173121, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173214, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173284, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_postgres.postgres__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173562, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173671, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173723, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1738298, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.173938, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.17456, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1746528, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.174758, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.17502, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.175144, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.175236, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.175337, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1754198, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1770308, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.177143, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.177283, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.177471, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1776361, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1778471, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.177969, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.178095, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.178257, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1786282, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.178782, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.178876, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1791658, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.179432, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.179643, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.179788, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.181077, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.181155, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1812658, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.181341, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1815639, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1816828, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.181762, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.181911, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1820512, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.182198, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.182411, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.182562, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.183003, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.183136, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.183302, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.183452, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.184202, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.184484, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.184604, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.184729, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1852238, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.185338, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.185472, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.185584, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.185759, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1860712, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.18868, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.188848, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.188981, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.189151, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1892679, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1893718, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.189489, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.189645, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.189782, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1900558, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190179, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1902878, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1904051, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190511, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190618, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190721, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190855, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.190969, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.192668, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.192776, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.192978, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1931221, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.193259, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.193377, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1941361, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1943629, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.194485, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.194714, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.19486, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.195284, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1954508, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1959722, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1985102, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1988852, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.199622, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.199768, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.1998348, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.201086, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.201189, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.201715, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2019808, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.202358, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.202678, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.202731, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.203115, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.203281, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.203488, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.203682, "supported_languages": null}, "macro.demo.categorizations_filter": {"name": "categorizations_filter", "resource_type": "macro", "package_name": "demo", "path": "macros/categorizations_filter.sql", "original_file_path": "macros/categorizations_filter.sql", "unique_id": "macro.demo.categorizations_filter", "macro_sql": "{% macro categorizations_filter(type) %}\n    SELECT \n        array_agg(category_name) AS categories,\n        array_agg(child_name) AS sub_categories,\n        categorizable_id\n    FROM {{ ref(\"categorizations\")}} AS categorizations\n    WHERE categorizations.categorizable_type = '{{type}}'\n    GROUP BY categorizable_id \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.203849, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.204094, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.204442, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2047842, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.205207, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2054222, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.205633, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2064488, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.207128, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2077491, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.208544, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2090108, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2092428, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2097611, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2103171, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.210624, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.210923, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2113512, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.211664, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2120562, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2123141, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.212785, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.213299, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.213751, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2141702, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.214561, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2147892, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.215064, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.215296, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.215769, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.21629, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.216948, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.217531, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2189639, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.221642, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.222019, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.222222, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2248828, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.225888, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2260768, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.226187, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.226481, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.226667, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2267919, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.226961, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.227072, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.227474, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.228043, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.228549, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2289321, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.229085, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.229323, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.229593, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2299469, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.230162, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.230387, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.23087, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2314198, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.232055, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.232403, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2325299, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.232872, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2333581, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.233906, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2341802, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.234373, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.235275, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.236195, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2371662, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2382, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.238401, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.238492, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.240919, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.243242, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.243454, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.243621, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.244294, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2444448, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.244558, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2447019, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.244812, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2449229, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.245039, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.245313, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.245471, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.245739, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2460952, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.246333, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.246551, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.248961, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2491992, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2496362, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2501068, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.250435, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.251244, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.252424, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.253171, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2537138, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2540412, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.254515, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.255081, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.25539, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.255519, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2557921, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2561889, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.256518, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.256937, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.257324, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.257421, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.2575119, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.257608, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.257971, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.258456, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.259287, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.25947, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.259849, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1727441769.260374, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.demo.stg_matomo_device_type": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_device_type", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_device_type.sql", "original_file_path": "models/staging/matomo/stg_matomo_device_type.sql", "unique_id": "model.demo.stg_matomo_device_type", "fqn": ["demo", "staging", "matomo", "stg_matomo_device_type"], "alias": "stg_matomo_device_type", "checksum": {"name": "sha256", "checksum": "67a75376b53a61b18e2a5c472ea6ad0a00c906e739f7554f002a9db5f72a2b39"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.5478148, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_device_type\"", "raw_code": "SELECT\n        date,\n        nb_actions,\n        bounce_count,\n        index,\n        label,\n        sum_visit_length,\n        nb_visits_converted,\n        max_actions,\n        segment,\n        nb_visits,\n        logo,\n        nb_uniq_visitors,\n        nb_users\nFROM {{ source('matomo', 'device_type') }}", "language": "sql", "refs": [], "sources": [["matomo", "device_type"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.stg_matomo_visits": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_visits", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_visits.sql", "original_file_path": "models/staging/matomo/stg_matomo_visits.sql", "unique_id": "model.demo.stg_matomo_visits", "fqn": ["demo", "staging", "matomo", "stg_matomo_visits"], "alias": "stg_matomo_visits", "checksum": {"name": "sha256", "checksum": "396613d2a5c5ef16a05077c9612a6d4aaa38f9ce6def2620fa04790f0cf58ee2"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.548887, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_visits\"", "raw_code": "SELECT\n    index,\n    date,\n    nb_visits,\n    nb_uniq_visitors,\n    bounce_count,\n    bounce_rate,\n    bounce_rate_new, \n    sum_visit_length, \n    nb_visits_new,\n    nb_downloads\nFROM {{ source('matomo', 'visits') }}", "language": "sql", "refs": [], "sources": [["matomo", "visits"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.stg_matomo_referrers": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_referrers", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_referrers.sql", "original_file_path": "models/staging/matomo/stg_matomo_referrers.sql", "unique_id": "model.demo.stg_matomo_referrers", "fqn": ["demo", "staging", "matomo", "stg_matomo_referrers"], "alias": "stg_matomo_referrers", "checksum": {"name": "sha256", "checksum": "464c69db3e749c3e62ceb37e57ce2ff6e32875590ffe15e94c3279753f87dece"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.549949, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_referrers\"", "raw_code": "SELECT \n    label, \n    nb_uniq_visitors,\n    nb_visits,\n    nb_actions,\n    sum_visit_length,\n    bounce_count,\n    sub_type, \n    date\nFROM {{ source('matomo', 'referrers') }}\nWHERE sub_type IS NOT null", "language": "sql", "refs": [], "sources": [["matomo", "referrers"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.stg_matomo_pages": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_pages", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_pages.sql", "original_file_path": "models/staging/matomo/stg_matomo_pages.sql", "unique_id": "model.demo.stg_matomo_pages", "fqn": ["demo", "staging", "matomo", "stg_matomo_pages"], "alias": "stg_matomo_pages", "checksum": {"name": "sha256", "checksum": "571a3524d8d5ba458269fdaf15c012601803777c6e86f4b1ef0cbd7487fb3e10"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.551001, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_pages\"", "raw_code": "SELECT \n    nb_visits::int, \n    nb_uniq_visitors::int,\n    nb_hits,\n    sum_time_spent,\n    coalesce(exit_nb_uniq_visitors::float::int, 0) AS exit_nb_uniq_visitors,\n    coalesce(exit_nb_visits::float::int, 0) as exit_nb_visits,\n    avg_time_on_page, \n    bounce_rate, \n    exit_rate,\n    url,\n    date,\n    coalesce(entry_nb_uniq_visitors::float::int, 0) as entry_nb_uniq_visitors,\n    coalesce(entry_nb_visits::float::int, 0) as entry_nb_visits,\n    coalesce(entry_bounce_count::float::int, 0) as entry_bounce_count,\n    label\nFROM {{ source('matomo', 'pages') }}", "language": "sql", "refs": [], "sources": [["matomo", "pages"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.stg_matomo_page_titles": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_page_titles", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_page_titles.sql", "original_file_path": "models/staging/matomo/stg_matomo_page_titles.sql", "unique_id": "model.demo.stg_matomo_page_titles", "fqn": ["demo", "staging", "matomo", "stg_matomo_page_titles"], "alias": "stg_matomo_page_titles", "checksum": {"name": "sha256", "checksum": "b04f78c5d3e756fdec032d6f163e370e340bec6a357daa9e6099956209cf1782"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.578132, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_page_titles\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('matomo', 'page_titles') }}\n),\nrenamed AS (\n    select\n        date,\n        min_time_server,\n        min_time_network,\n        min_time_dom_processing,\n        nb_hits_with_time_on_load,\n        coalesce(exit_nb_uniq_visitors::float::int, 0) AS exit_nb_uniq_visitors,\n        max_time_dom_completion,\n        avg_page_load_time,\n        max_time_dom_processing,\n        nb_hits_with_time_network,\n        sum_time_spent,\n        avg_time_dom_processing,\n        bounce_rate,\n        nb_hits_with_time_dom_processing,\n        avg_time_network,\n        nb_hits_with_time_dom_completion,\n        entry_nb_actions,\n        max_time_transfer,\n        coalesce(entry_nb_uniq_visitors::float::int, 0) AS entry_nb_uniq_visitors,\n        avg_time_on_page,\n        actions_pagetitle,\n        segment,\n        nb_visits,\n        coalesce(entry_bounce_count::float::int, 0) as entry_bounce_count,\n        coalesce(exit_nb_visits::float::int, 0) as exit_nb_visits,\n        min_time_transfer,\n        max_time_network,\n        nb_hits_with_time_server,\n        max_time_server,\n        max_time_on_load,\n        avg_time_server,\n        index,\n        label,\n        avg_time_dom_completion,\n        nb_hits_with_time_transfer,\n        avg_time_transfer,\n        coalesce(entry_nb_visits::float::int, 0) as entry_nb_visits,\n        entry_sum_visit_length,\n        min_time_dom_completion,\n        nb_hits,\n        nb_uniq_visitors,\n        avg_time_on_load,\n        exit_rate,\n        min_time_on_load\n    FROM source\n)\nselect * FROM renamed", "language": "sql", "refs": [], "sources": [["matomo", "page_titles"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.stg_matomo_users_city": [{"database": "test_lyon", "schema": "prod", "name": "stg_matomo_users_city", "resource_type": "model", "package_name": "demo", "path": "staging/matomo/stg_matomo_users_city.sql", "original_file_path": "models/staging/matomo/stg_matomo_users_city.sql", "unique_id": "model.demo.stg_matomo_users_city", "fqn": ["demo", "staging", "matomo", "stg_matomo_users_city"], "alias": "stg_matomo_users_city", "checksum": {"name": "sha256", "checksum": "8d824c2e297de1fb98eb5d9b546b306c899e3bc604ec58c3cb5a83c76034a375"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.5793018, "relation_name": "\"test_lyon\".\"prod\".\"stg_matomo_users_city\"", "raw_code": "WITH source AS (\n      SELECT * FROM {{ source('matomo', 'users_city') }}\n),\nrenamed AS (\n    SELECT\n        date,\n        country,\n        nb_actions,\n        city,\n        bounce_count,\n        index,\n        label,\n        long,\n        sum_visit_length,\n        city_name,\n        nb_visits_converted,\n        max_actions,\n        segment,\n        nb_visits,\n        country_name,\n        logo,\n        region_name,\n        nb_uniq_visitors,\n        nb_users,\n        region,\n        lat\n    FROM source\n)\nSELECT * FROM renamed", "language": "sql", "refs": [], "sources": [["matomo", "users_city"]], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.matomo_pages": [{"database": "test_lyon", "schema": "prod", "name": "matomo_pages", "resource_type": "model", "package_name": "demo", "path": "marts/matomo/matomo_pages.sql", "original_file_path": "models/marts/matomo/matomo_pages.sql", "unique_id": "model.demo.matomo_pages", "fqn": ["demo", "marts", "matomo", "matomo_pages"], "alias": "matomo_pages", "checksum": {"name": "sha256", "checksum": "2e89b17cbc88c634343d9121c361bb2a13ade1e8c65fc8bb81c649b57bc62350"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.6177511, "relation_name": "\"test_lyon\".\"prod\".\"matomo_pages\"", "raw_code": "SELECT *,\n\tcase\n        when label similar to '/(processes|assemblies)/%' then split_part(split_part(label, '/', 3), '?', 1)\n\t\telse ''\n\t\tend AS slug,\n\tcase\n\t    when label similar to '/(processes|assemblies)/%/%/f/[0-9]*/%' then null --remove non-int garbage data\n\t    when label similar to '/(processes|assemblies)/%/f/[0-9]*/%' then split_part(split_part(label, '/', 5), '?', 1)::int\n\t\telse null\n\t\tend as component_id\nFROM {{ref (\"stg_matomo_pages\")}}", "language": "sql", "refs": [{"name": "stg_matomo_pages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.users_city": [{"database": "test_lyon", "schema": "prod", "name": "users_city", "resource_type": "model", "package_name": "demo", "path": "marts/matomo/users_city.sql", "original_file_path": "models/marts/matomo/users_city.sql", "unique_id": "model.demo.users_city", "fqn": ["demo", "marts", "matomo", "users_city"], "alias": "users_city", "checksum": {"name": "sha256", "checksum": "149ca0c19e7a52eaae753ec134ba96afe20c6c4f233c248a280e76dc8466f212"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.618856, "relation_name": "\"test_lyon\".\"prod\".\"users_city\"", "raw_code": "SELECT \n    nb_visits,\n    country_name,\n    country,\n    region_name,\n    region,\n    city_name,\n    date, \n    lat, \n    long\nFROM {{ ref (\"stg_matomo_users_city\")}} AS users_city", "language": "sql", "refs": [{"name": "stg_matomo_users_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.int_matomo_referrers": [{"database": "test_lyon", "schema": "prod", "name": "int_matomo_referrers", "resource_type": "model", "package_name": "demo", "path": "intermediate/matomo/int_matomo_referrers.sql", "original_file_path": "models/intermediate/matomo/int_matomo_referrers.sql", "unique_id": "model.demo.int_matomo_referrers", "fqn": ["demo", "intermediate", "matomo", "int_matomo_referrers"], "alias": "int_matomo_referrers", "checksum": {"name": "sha256", "checksum": "c9826979571b4627c08f9265149ab8ae8d35fb783e0ecd5ab0a6e6e0a4993958"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.6369011, "relation_name": "\"test_lyon\".\"prod\".\"int_matomo_referrers\"", "raw_code": "SELECT *,\n    (CASE stg_matomo_referrers.label\n        WHEN 'Mot clef ind\u00e9fini' THEN 'Moteur de recherche'\n    ELSE stg_matomo_referrers.label\n    END\n    ) AS renamed_label\nFROM {{ref (\"stg_matomo_referrers\")}} as stg_matomo_referrers", "language": "sql", "refs": [{"name": "stg_matomo_referrers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "model.demo.int_matomo_visits": [{"database": "test_lyon", "schema": "prod", "name": "int_matomo_visits", "resource_type": "model", "package_name": "demo", "path": "intermediate/matomo/int_matomo_visits.sql", "original_file_path": "models/intermediate/matomo/int_matomo_visits.sql", "unique_id": "model.demo.int_matomo_visits", "fqn": ["demo", "intermediate", "matomo", "int_matomo_visits"], "alias": "int_matomo_visits", "checksum": {"name": "sha256", "checksum": "e5f809f14776b8d85d09fe6b125476a0d1729c37a956808bbaf2fe10508cb250"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1727441769.6379688, "relation_name": "\"test_lyon\".\"prod\".\"int_matomo_visits\"", "raw_code": "SELECT\n    *,\n    bounce_count::decimal / nb_visits as bounce_rate_as_number,\n    sum_visit_length / nb_visits as daily_average_visit_length\nFROM {{ref (\"stg_matomo_visits\")}}", "language": "sql", "refs": [{"name": "stg_matomo_visits", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}]}, "parent_map": {"model.test_lyon.int_decidim_awesome_proposal_extra_fields": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"], "model.demo.stg_decidim_attachments": ["source.demo.decidim.decidim_attachments"], "model.demo.stg_decidim_components": ["source.demo.decidim.decidim_components"], "model.demo.stg_decidim_endorsements": ["source.demo.decidim.decidim_endorsements"], "model.demo.stg_decidim_follows": ["source.demo.decidim.decidim_follows"], "model.demo.stg_decidim_comments": ["source.demo.decidim.decidim_comments_comments"], "model.demo.stg_decidim_meetings_registrations": ["source.demo.decidim.decidim_meetings_registrations"], "model.demo.stg_decidim_participatory_processes": ["source.demo.decidim.decidim_participatory_processes"], "model.demo.stg_decidim_users": ["source.demo.decidim.decidim_users"], "model.demo.stg_decidim_participatory_process_steps": ["source.demo.decidim.decidim_participatory_process_steps"], "model.demo.stg_decidim_coauthorships": ["source.demo.decidim.decidim_coauthorships"], "model.demo.stg_decidim_meetings": ["source.demo.decidim.decidim_meetings_meetings"], "model.demo.stg_decidim_accountability_results": ["source.demo.decidim.decidim_accountability_results"], "model.demo.stg_decidim_moderations": ["source.demo.decidim.decidim_moderations"], "model.demo.stg_decidim_surveys": ["source.demo.decidim.decidim_surveys_surveys"], "model.demo.stg_decidim_organizations": ["source.demo.decidim.decidim_organizations"], "model.demo.stg_decidim_forms_question_matrix_rows": ["source.demo.decidim.decidim_forms_question_matrix_rows"], "model.demo.stg_decidim_forms_answers": ["source.demo.decidim.decidim_forms_answers"], "model.demo.stg_decidim_forms_questions": ["source.demo.decidim.decidim_forms_questions"], "model.demo.stg_decidim_forms_questionnaires": ["source.demo.decidim.decidim_forms_questionnaires"], "model.demo.stg_decidim_forms_answer_choices": ["source.demo.decidim.decidim_forms_answer_choices"], "model.demo.stg_decidim_area_types": ["source.demo.decidim.decidim_area_types"], "model.demo.stg_decidim_areas": ["source.demo.decidim.decidim_areas"], "model.demo.stg_decidim_blogs_posts": ["source.demo.decidim.decidim_blogs_posts"], "model.demo.stg_decidim_assemblies": ["source.demo.decidim.decidim_assemblies"], "model.demo.stg_decidim_debates": ["source.demo.decidim.decidim_debates_debates"], "model.demo.stg_decidim_budgets_line_items": ["source.demo.decidim.decidim_budgets_line_items"], "model.demo.stg_decidim_budgets_projects": ["source.demo.decidim.decidim_budgets_projects"], "model.demo.stg_decidim_budgets_orders": ["source.demo.decidim.decidim_budgets_orders"], "model.demo.stg_decidim_budgets": ["source.demo.decidim.decidim_budgets_budgets"], "model.demo.stg_decidim_categories": ["source.demo.decidim.decidim_categories"], "model.demo.stg_decidim_categorizations": ["source.demo.decidim.decidim_categorizations"], "model.demo.stg_decidim_scopes": ["source.demo.decidim.decidim_scopes"], "model.demo.stg_decidim_proposals_votes": ["source.demo.decidim.decidim_proposals_proposal_votes"], "model.demo.stg_decidim_proposals_collaborative_drafts": ["source.demo.decidim.decidim_proposals_collaborative_drafts"], "model.demo.stg_decidim_proposals": ["source.demo.decidim.decidim_proposals_proposals"], "model.demo.organizations": ["model.demo.int_organizations"], "model.demo.participations": ["model.demo.comments", "model.demo.debates", "model.demo.endorsements", "model.demo.forms_answers", "model.demo.meetings", "model.demo.projects_votes", "model.demo.proposals", "model.demo.proposals_votes"], "model.demo.attachments": ["model.demo.organizations", "model.demo.stg_decidim_attachments"], "model.demo.comments": ["model.demo.blogs_posts", "model.demo.budgets_projects", "model.demo.components", "model.demo.debates", "model.demo.meetings", "model.demo.proposals", "model.demo.stg_decidim_accountability_results", "model.demo.stg_decidim_comments", "model.demo.stg_decidim_moderations", "model.demo.stg_decidim_proposals_collaborative_drafts"], "model.demo.followings": ["model.demo.blogs_posts", "model.demo.budgets_projects", "model.demo.components", "model.demo.debates", "model.demo.int_users", "model.demo.meetings", "model.demo.proposals", "model.demo.stg_decidim_follows"], "model.demo.forms": ["model.demo.components", "model.demo.stg_decidim_forms_questionnaires", "model.demo.stg_decidim_meetings", "model.demo.stg_decidim_surveys"], "model.demo.forms_answers": ["model.demo.answers_file", "model.demo.answers_matrix", "model.demo.answers_option_and_sorting", "model.demo.answers_short_and_long_answer", "model.demo.forms"], "model.demo.blogs_posts": ["model.demo.components", "model.demo.stg_decidim_blogs_posts"], "model.demo.debates": ["model.demo.categorizations", "model.demo.components", "model.demo.stg_decidim_debates"], "model.demo.components": ["model.demo.int_components", "model.demo.int_organizations", "model.demo.stg_decidim_assemblies", "model.demo.stg_decidim_participatory_processes"], "model.demo.categorizations": ["model.demo.stg_decidim_categories", "model.demo.stg_decidim_categorizations"], "model.demo.endorsements": ["model.demo.stg_decidim_blogs_posts", "model.demo.stg_decidim_debates", "model.demo.stg_decidim_endorsements", "model.demo.stg_decidim_moderations", "model.demo.stg_decidim_proposals"], "model.demo.users": ["model.demo.comments", "model.demo.endorsements", "model.demo.followings", "model.demo.forms_answers", "model.demo.int_organizations", "model.demo.int_users", "model.demo.projects_votes", "model.demo.proposals", "model.demo.proposals_votes", "model.demo.stg_decidim_coauthorships"], "model.demo.budgets": ["model.demo.components", "model.demo.stg_decidim_budgets"], "model.demo.projects_votes": ["model.demo.budgets_projects", "model.demo.int_budgets_orders", "model.demo.stg_decidim_budgets_line_items"], "model.demo.budgets_projects": ["model.demo.categorizations", "model.demo.components", "model.demo.int_budgets_projects", "model.demo.stg_decidim_budgets"], "model.demo.meetings": ["model.demo.categorizations", "model.demo.components", "model.demo.int_meetings"], "model.demo.proposals_votes": ["model.demo.proposals", "model.demo.stg_decidim_proposals_votes"], "model.demo.proposals": ["model.demo.categorizations", "model.demo.components", "model.demo.int_proposals", "model.demo.int_scopes", "model.demo.int_users", "model.demo.stg_decidim_coauthorships", "model.demo.stg_decidim_moderations", "model.demo.stg_decidim_proposals_votes"], "model.demo.int_organizations": ["model.demo.stg_decidim_organizations"], "model.demo.answers_file": ["model.demo.int_forms_answers", "model.demo.organizations", "model.demo.stg_decidim_attachments", "model.demo.stg_decidim_forms_questions"], "model.demo.answers_option_and_sorting": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_answer_choices", "model.demo.stg_decidim_forms_questions"], "model.demo.answers_matrix": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_answer_choices", "model.demo.stg_decidim_forms_question_matrix_rows", "model.demo.stg_decidim_forms_questions"], "model.demo.answers_short_and_long_answer": ["model.demo.int_forms_answers", "model.demo.stg_decidim_forms_questions"], "model.demo.int_forms_answers": ["model.demo.stg_decidim_forms_answers"], "model.demo.int_components": ["model.demo.stg_decidim_components"], "model.demo.int_users": ["model.demo.stg_decidim_users"], "model.demo.int_budgets_projects": ["model.demo.stg_decidim_budgets_projects"], "model.demo.int_budgets_orders": ["model.demo.stg_decidim_budgets_orders"], "model.demo.int_meetings": ["model.demo.stg_decidim_meetings"], "model.demo.int_scopes": ["model.demo.stg_decidim_scopes"], "model.demo.int_proposals": ["model.demo.stg_decidim_proposals"], "test.demo.not_null_stg_decidim_forms_answer_choices_id.6373c5b027": ["model.demo.stg_decidim_forms_answer_choices"], "test.demo.unique_stg_decidim_forms_answer_choices_id.cac0250df2": ["model.demo.stg_decidim_forms_answer_choices"], "test.demo.not_null_stg_decidim_forms_answer_choices_decidim_answer_id.70e833d8d0": ["model.demo.stg_decidim_forms_answer_choices"], "test.demo.not_null_stg_decidim_forms_answer_choices_body.0c7838e1b8": ["model.demo.stg_decidim_forms_answer_choices"], "test.demo.not_null_stg_decidim_forms_answers_id.92ce43439f": ["model.demo.stg_decidim_forms_answers"], "test.demo.unique_stg_decidim_forms_answers_id.8fb3388969": ["model.demo.stg_decidim_forms_answers"], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_id.7e6619509e": ["model.demo.stg_decidim_forms_question_matrix_rows"], "test.demo.unique_stg_decidim_forms_question_matrix_rows_id.8db20e3085": ["model.demo.stg_decidim_forms_question_matrix_rows"], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id.55db0b6fe6": ["model.demo.stg_decidim_forms_question_matrix_rows"], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_body.71d322a975": ["model.demo.stg_decidim_forms_question_matrix_rows"], "test.demo.not_null_stg_decidim_forms_questionnaires_id.74cea2a594": ["model.demo.stg_decidim_forms_questionnaires"], "test.demo.unique_stg_decidim_forms_questionnaires_id.c228c4d2a1": ["model.demo.stg_decidim_forms_questionnaires"], "test.demo.not_null_stg_decidim_forms_questions_id.c7a096fa50": ["model.demo.stg_decidim_forms_questions"], "test.demo.unique_stg_decidim_forms_questions_id.3becc3a082": ["model.demo.stg_decidim_forms_questions"], "test.demo.unique_stg_decidim_budgets_line_items_id.93d157dab5": ["model.demo.stg_decidim_budgets_line_items"], "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id.759330b24d": ["model.demo.stg_decidim_budgets_line_items"], "test.demo.unique_stg_decidim_categorizations_id.6566c00409": ["model.demo.stg_decidim_categorizations"], "test.demo.not_null_stg_decidim_categorizations_id.a059a79c08": ["model.demo.stg_decidim_categorizations"], "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type.d2c10e48e4": ["model.demo.stg_decidim_categorizations"], "test.demo.accepted_values_followings_following_way__real_follow__ancestor_follow.60d8b91db4": ["model.demo.followings"], "test.demo.not_null_components_id.85e75ab698": ["model.demo.components"], "test.demo.unique_components_id.55875f0fa3": ["model.demo.components"], "test.demo.not_null_components_manifest_name.2795dc3709": ["model.demo.components"], "test.demo.not_null_components_decidim_organization_id.3ae04f70dd": ["model.demo.components"], "test.demo.unique_users_id.ec952d9777": ["model.demo.users"], "test.demo.not_null_users_id.4db5ed5c63": ["model.demo.users"], "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5": ["model.demo.int_users", "model.demo.users"], "test.demo.dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id.da5f9c9505": ["model.demo.proposals_votes"], "test.demo.unique_int_users_id.e5ba0ede1e": ["model.demo.int_users"], "test.demo.not_null_int_users_id.1125b186c1": ["model.demo.int_users"], "test.demo.not_null_int_users_nickname.b90ddd7677": ["model.demo.int_users"], "model.test_lyon.decidim_awesome_proposal_extra_fields": ["model.demo.components", "model.demo.stg_decidim_proposals", "model.test_lyon.int_decidim_awesome_proposal_extra_fields"], "model.test_lyon.stg_decidim_awesome_proposal_extra_fields": ["source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test"], "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_id.aad3a9d9b8": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"], "test.test_lyon.unique_stg_decidim_awesome_proposal_extra_fields_id.1f06fde107": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"], "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.5154a34bb9": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"], "source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test": [], "source.demo.decidim.decidim_components": [], "source.demo.decidim.decidim_assemblies": [], "source.demo.decidim.decidim_participatory_processes": [], "source.demo.decidim.decidim_participatory_process_steps": [], "source.demo.decidim.decidim_users": [], "source.demo.decidim.decidim_proposals_proposals": [], "source.demo.decidim.decidim_coauthorships": [], "source.demo.decidim.decidim_moderations": [], "source.demo.decidim.decidim_scopes": [], "source.demo.decidim.decidim_blogs_posts": [], "source.demo.decidim.decidim_debates_debates": [], "source.demo.decidim.decidim_meetings_meetings": [], "source.demo.decidim.decidim_accountability_results": [], "source.demo.decidim.decidim_comments_comments": [], "source.demo.decidim.decidim_proposals_collaborative_drafts": [], "source.demo.decidim.decidim_endorsements": [], "source.demo.decidim.decidim_follows": [], "source.demo.decidim.decidim_initiatives": [], "source.demo.decidim.decidim_initiatives_type_scopes": [], "source.demo.decidim.decidim_surveys_surveys": [], "source.demo.decidim.decidim_attachments": [], "source.demo.decidim.decidim_proposals_proposal_votes": [], "source.demo.decidim.decidim_meetings_registrations": [], "source.demo.decidim.decidim_organizations": [], "source.demo.decidim.decidim_forms_answer_choices": [], "source.demo.decidim.decidim_forms_answers": [], "source.demo.decidim.decidim_forms_question_matrix_rows": [], "source.demo.decidim.decidim_forms_questionnaires": [], "source.demo.decidim.decidim_forms_questions": [], "source.demo.decidim.decidim_areas": [], "source.demo.decidim.decidim_area_types": [], "source.demo.decidim.decidim_budgets_projects": [], "source.demo.decidim.decidim_budgets_budgets": [], "source.demo.decidim.decidim_budgets_line_items": [], "source.demo.decidim.decidim_budgets_orders": [], "source.demo.decidim.decidim_categories": [], "source.demo.decidim.decidim_categorizations": [], "unit_test.demo.stg_decidim_blogs_posts.resource_type_definition": ["model.demo.stg_decidim_blogs_posts"], "unit_test.demo.stg_decidim_debates.resource_type_definition": ["model.demo.stg_decidim_debates"], "unit_test.demo.stg_decidim_budgets_projects.resource_type_definition": ["model.demo.stg_decidim_budgets_projects"], "unit_test.demo.stg_decidim_proposals.resource_type_definition": ["model.demo.stg_decidim_proposals"], "unit_test.demo.blogs_posts.test_url_concatenation": ["model.demo.blogs_posts"], "unit_test.demo.components.test_ps_type": ["model.demo.components"], "unit_test.demo.components.test_ps_space_type_slug": ["model.demo.components"], "unit_test.demo.components.test_no_null_published_at": ["model.demo.components"], "unit_test.demo.components.test_take_only_assemblies_and_participatory_processes": ["model.demo.components"], "unit_test.demo.components.test_url_creation": ["model.demo.components"], "unit_test.demo.categorizations.testing_that_main_categories_are_properly_processed": ["model.demo.categorizations"], "unit_test.demo.categorizations.testing_that_sub_categories_are_properly_processed": ["model.demo.categorizations"], "unit_test.demo.endorsements.moderations-check": ["model.demo.endorsements"], "unit_test.demo.endorsements.endorsements-component-check": ["model.demo.endorsements"], "unit_test.demo.meetings.test_url_concatenation": ["model.demo.meetings"], "unit_test.demo.meetings.test_manifest_name_is_meetings": ["model.demo.meetings"], "unit_test.demo.proposals.withdrawn_proposals_check": ["model.demo.proposals"], "unit_test.demo.proposals.moderations_proposals_check": ["model.demo.proposals"], "unit_test.demo.proposals.conflict_on_decidim_reportable_type_check": ["model.demo.proposals"], "unit_test.demo.proposals.published_at_check": ["model.demo.proposals"], "unit_test.demo.int_organizations.test_filter_by_host": ["model.demo.int_organizations"], "unit_test.demo.int_organizations.test_regex_clean_description": ["model.demo.int_organizations"], "unit_test.demo.int_forms_answers.int_forms_answers_author_status_check": ["model.demo.int_forms_answers"], "unit_test.demo.answers_short_and_long_answer.answers_short_and_long_answer_check": ["model.demo.answers_short_and_long_answer"], "unit_test.demo.answers_matrix.answers_matrix_check": ["model.demo.answers_matrix"], "unit_test.demo.answers_option_and_sorting.answers_option_and_sorting_check_on_question_type": ["model.demo.answers_option_and_sorting"], "unit_test.demo.answers_short_and_long_answer.short_and_long_answer_check_on_question_type": ["model.demo.answers_short_and_long_answer"], "unit_test.demo.answers_matrix.answers_matrix_check_on_question_type": ["model.demo.answers_matrix"], "unit_test.demo.int_components.test_translated_manifest_name": ["model.demo.int_components"], "unit_test.demo.int_users.deleted_users_check": ["model.demo.int_users"], "unit_test.demo.int_users.type_check": ["model.demo.int_users"], "unit_test.demo.int_users.sign_in_frequency_check": ["model.demo.int_users"], "unit_test.demo.int_budgets_orders.vote_finished_test": ["model.demo.int_budgets_orders"], "unit_test.demo.int_budgets_projects.is_selected_test": ["model.demo.int_budgets_projects"], "unit_test.demo.int_proposals.test_default_state": ["model.demo.int_proposals"], "unit_test.demo.int_proposals.test_translated_state": ["model.demo.int_proposals"], "unit_test.demo.int_proposals.test_default_address": ["model.demo.int_proposals"], "unit_test.demo.int_proposals.test_published_at_not_null": ["model.demo.int_proposals"], "unit_test.test_lyon.int_decidim_awesome_proposal_extra_fields.testing_that_the_correct_xml_information_are_parsed": ["model.test_lyon.int_decidim_awesome_proposal_extra_fields"]}, "child_map": {"model.test_lyon.int_decidim_awesome_proposal_extra_fields": ["model.test_lyon.decidim_awesome_proposal_extra_fields", "unit_test.test_lyon.int_decidim_awesome_proposal_extra_fields.testing_that_the_correct_xml_information_are_parsed"], "model.demo.stg_decidim_attachments": ["model.demo.answers_file", "model.demo.attachments"], "model.demo.stg_decidim_components": ["model.demo.int_components"], "model.demo.stg_decidim_endorsements": ["model.demo.endorsements"], "model.demo.stg_decidim_follows": ["model.demo.followings"], "model.demo.stg_decidim_comments": ["model.demo.comments"], "model.demo.stg_decidim_meetings_registrations": [], "model.demo.stg_decidim_participatory_processes": ["model.demo.components"], "model.demo.stg_decidim_users": ["model.demo.int_users"], "model.demo.stg_decidim_participatory_process_steps": [], "model.demo.stg_decidim_coauthorships": ["model.demo.proposals", "model.demo.users"], "model.demo.stg_decidim_meetings": ["model.demo.forms", "model.demo.int_meetings"], "model.demo.stg_decidim_accountability_results": ["model.demo.comments"], "model.demo.stg_decidim_moderations": ["model.demo.comments", "model.demo.endorsements", "model.demo.proposals"], "model.demo.stg_decidim_surveys": ["model.demo.forms"], "model.demo.stg_decidim_organizations": ["model.demo.int_organizations"], "model.demo.stg_decidim_forms_question_matrix_rows": ["model.demo.answers_matrix", "test.demo.not_null_stg_decidim_forms_question_matrix_rows_body.71d322a975", "test.demo.not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id.55db0b6fe6", "test.demo.not_null_stg_decidim_forms_question_matrix_rows_id.7e6619509e", "test.demo.unique_stg_decidim_forms_question_matrix_rows_id.8db20e3085"], "model.demo.stg_decidim_forms_answers": ["model.demo.int_forms_answers", "test.demo.not_null_stg_decidim_forms_answers_id.92ce43439f", "test.demo.unique_stg_decidim_forms_answers_id.8fb3388969"], "model.demo.stg_decidim_forms_questions": ["model.demo.answers_file", "model.demo.answers_matrix", "model.demo.answers_option_and_sorting", "model.demo.answers_short_and_long_answer", "test.demo.not_null_stg_decidim_forms_questions_id.c7a096fa50", "test.demo.unique_stg_decidim_forms_questions_id.3becc3a082"], "model.demo.stg_decidim_forms_questionnaires": ["model.demo.forms", "test.demo.not_null_stg_decidim_forms_questionnaires_id.74cea2a594", "test.demo.unique_stg_decidim_forms_questionnaires_id.c228c4d2a1"], "model.demo.stg_decidim_forms_answer_choices": ["model.demo.answers_matrix", "model.demo.answers_option_and_sorting", "test.demo.not_null_stg_decidim_forms_answer_choices_body.0c7838e1b8", "test.demo.not_null_stg_decidim_forms_answer_choices_decidim_answer_id.70e833d8d0", "test.demo.not_null_stg_decidim_forms_answer_choices_id.6373c5b027", "test.demo.unique_stg_decidim_forms_answer_choices_id.cac0250df2"], "model.demo.stg_decidim_area_types": [], "model.demo.stg_decidim_areas": [], "model.demo.stg_decidim_blogs_posts": ["model.demo.blogs_posts", "model.demo.endorsements", "unit_test.demo.stg_decidim_blogs_posts.resource_type_definition"], "model.demo.stg_decidim_assemblies": ["model.demo.components"], "model.demo.stg_decidim_debates": ["model.demo.debates", "model.demo.endorsements", "unit_test.demo.stg_decidim_debates.resource_type_definition"], "model.demo.stg_decidim_budgets_line_items": ["model.demo.projects_votes", "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id.759330b24d", "test.demo.unique_stg_decidim_budgets_line_items_id.93d157dab5"], "model.demo.stg_decidim_budgets_projects": ["model.demo.int_budgets_projects", "unit_test.demo.stg_decidim_budgets_projects.resource_type_definition"], "model.demo.stg_decidim_budgets_orders": ["model.demo.int_budgets_orders"], "model.demo.stg_decidim_budgets": ["model.demo.budgets", "model.demo.budgets_projects"], "model.demo.stg_decidim_categories": ["model.demo.categorizations"], "model.demo.stg_decidim_categorizations": ["model.demo.categorizations", "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type.d2c10e48e4", "test.demo.not_null_stg_decidim_categorizations_id.a059a79c08", "test.demo.unique_stg_decidim_categorizations_id.6566c00409"], "model.demo.stg_decidim_scopes": ["model.demo.int_scopes"], "model.demo.stg_decidim_proposals_votes": ["model.demo.proposals", "model.demo.proposals_votes"], "model.demo.stg_decidim_proposals_collaborative_drafts": ["model.demo.comments"], "model.demo.stg_decidim_proposals": ["model.demo.endorsements", "model.demo.int_proposals", "model.test_lyon.decidim_awesome_proposal_extra_fields", "unit_test.demo.stg_decidim_proposals.resource_type_definition"], "model.demo.organizations": ["model.demo.answers_file", "model.demo.attachments"], "model.demo.participations": [], "model.demo.attachments": [], "model.demo.comments": ["model.demo.participations", "model.demo.users"], "model.demo.followings": ["model.demo.users", "test.demo.accepted_values_followings_following_way__real_follow__ancestor_follow.60d8b91db4"], "model.demo.forms": ["model.demo.forms_answers"], "model.demo.forms_answers": ["model.demo.participations", "model.demo.users"], "model.demo.blogs_posts": ["model.demo.comments", "model.demo.followings", "unit_test.demo.blogs_posts.test_url_concatenation"], "model.demo.debates": ["model.demo.comments", "model.demo.followings", "model.demo.participations"], "model.demo.components": ["model.demo.blogs_posts", "model.demo.budgets", "model.demo.budgets_projects", "model.demo.comments", "model.demo.debates", "model.demo.followings", "model.demo.forms", "model.demo.meetings", "model.demo.proposals", "model.test_lyon.decidim_awesome_proposal_extra_fields", "test.demo.not_null_components_decidim_organization_id.3ae04f70dd", "test.demo.not_null_components_id.85e75ab698", "test.demo.not_null_components_manifest_name.2795dc3709", "test.demo.unique_components_id.55875f0fa3", "unit_test.demo.components.test_no_null_published_at", "unit_test.demo.components.test_ps_space_type_slug", "unit_test.demo.components.test_ps_type", "unit_test.demo.components.test_take_only_assemblies_and_participatory_processes", "unit_test.demo.components.test_url_creation"], "model.demo.categorizations": ["model.demo.budgets_projects", "model.demo.debates", "model.demo.meetings", "model.demo.proposals", "unit_test.demo.categorizations.testing_that_main_categories_are_properly_processed", "unit_test.demo.categorizations.testing_that_sub_categories_are_properly_processed"], "model.demo.endorsements": ["model.demo.participations", "model.demo.users", "unit_test.demo.endorsements.endorsements-component-check", "unit_test.demo.endorsements.moderations-check"], "model.demo.users": ["test.demo.not_null_users_id.4db5ed5c63", "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5", "test.demo.unique_users_id.ec952d9777"], "model.demo.budgets": [], "model.demo.projects_votes": ["model.demo.participations", "model.demo.users"], "model.demo.budgets_projects": ["model.demo.comments", "model.demo.followings", "model.demo.projects_votes"], "model.demo.meetings": ["model.demo.comments", "model.demo.followings", "model.demo.participations", "unit_test.demo.meetings.test_manifest_name_is_meetings", "unit_test.demo.meetings.test_url_concatenation"], "model.demo.proposals_votes": ["model.demo.participations", "model.demo.users", "test.demo.dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id.da5f9c9505"], "model.demo.proposals": ["model.demo.comments", "model.demo.followings", "model.demo.participations", "model.demo.proposals_votes", "model.demo.users", "unit_test.demo.proposals.conflict_on_decidim_reportable_type_check", "unit_test.demo.proposals.moderations_proposals_check", "unit_test.demo.proposals.published_at_check", "unit_test.demo.proposals.withdrawn_proposals_check"], "model.demo.int_organizations": ["model.demo.components", "model.demo.organizations", "model.demo.users", "unit_test.demo.int_organizations.test_filter_by_host", "unit_test.demo.int_organizations.test_regex_clean_description"], "model.demo.answers_file": ["model.demo.forms_answers"], "model.demo.answers_option_and_sorting": ["model.demo.forms_answers", "unit_test.demo.answers_option_and_sorting.answers_option_and_sorting_check_on_question_type"], "model.demo.answers_matrix": ["model.demo.forms_answers", "unit_test.demo.answers_matrix.answers_matrix_check", "unit_test.demo.answers_matrix.answers_matrix_check_on_question_type"], "model.demo.answers_short_and_long_answer": ["model.demo.forms_answers", "unit_test.demo.answers_short_and_long_answer.answers_short_and_long_answer_check", "unit_test.demo.answers_short_and_long_answer.short_and_long_answer_check_on_question_type"], "model.demo.int_forms_answers": ["model.demo.answers_file", "model.demo.answers_matrix", "model.demo.answers_option_and_sorting", "model.demo.answers_short_and_long_answer", "unit_test.demo.int_forms_answers.int_forms_answers_author_status_check"], "model.demo.int_components": ["model.demo.components", "unit_test.demo.int_components.test_translated_manifest_name"], "model.demo.int_users": ["model.demo.followings", "model.demo.proposals", "model.demo.users", "test.demo.not_null_int_users_id.1125b186c1", "test.demo.not_null_int_users_nickname.b90ddd7677", "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5", "test.demo.unique_int_users_id.e5ba0ede1e", "unit_test.demo.int_users.deleted_users_check", "unit_test.demo.int_users.sign_in_frequency_check", "unit_test.demo.int_users.type_check"], "model.demo.int_budgets_projects": ["model.demo.budgets_projects", "unit_test.demo.int_budgets_projects.is_selected_test"], "model.demo.int_budgets_orders": ["model.demo.projects_votes", "unit_test.demo.int_budgets_orders.vote_finished_test"], "model.demo.int_meetings": ["model.demo.meetings"], "model.demo.int_scopes": ["model.demo.proposals"], "model.demo.int_proposals": ["model.demo.proposals", "unit_test.demo.int_proposals.test_default_address", "unit_test.demo.int_proposals.test_default_state", "unit_test.demo.int_proposals.test_published_at_not_null", "unit_test.demo.int_proposals.test_translated_state"], "test.demo.not_null_stg_decidim_forms_answer_choices_id.6373c5b027": [], "test.demo.unique_stg_decidim_forms_answer_choices_id.cac0250df2": [], "test.demo.not_null_stg_decidim_forms_answer_choices_decidim_answer_id.70e833d8d0": [], "test.demo.not_null_stg_decidim_forms_answer_choices_body.0c7838e1b8": [], "test.demo.not_null_stg_decidim_forms_answers_id.92ce43439f": [], "test.demo.unique_stg_decidim_forms_answers_id.8fb3388969": [], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_id.7e6619509e": [], "test.demo.unique_stg_decidim_forms_question_matrix_rows_id.8db20e3085": [], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_decidim_question_id.55db0b6fe6": [], "test.demo.not_null_stg_decidim_forms_question_matrix_rows_body.71d322a975": [], "test.demo.not_null_stg_decidim_forms_questionnaires_id.74cea2a594": [], "test.demo.unique_stg_decidim_forms_questionnaires_id.c228c4d2a1": [], "test.demo.not_null_stg_decidim_forms_questions_id.c7a096fa50": [], "test.demo.unique_stg_decidim_forms_questions_id.3becc3a082": [], "test.demo.unique_stg_decidim_budgets_line_items_id.93d157dab5": [], "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_budgets_line_items_decidim_order_id__decidim_project_id.759330b24d": [], "test.demo.unique_stg_decidim_categorizations_id.6566c00409": [], "test.demo.not_null_stg_decidim_categorizations_id.a059a79c08": [], "test.demo.dbt_utils_unique_combination_of_columns_stg_decidim_categorizations_categorizable_id__categorizable_type.d2c10e48e4": [], "test.demo.accepted_values_followings_following_way__real_follow__ancestor_follow.60d8b91db4": [], "test.demo.not_null_components_id.85e75ab698": [], "test.demo.unique_components_id.55875f0fa3": [], "test.demo.not_null_components_manifest_name.2795dc3709": [], "test.demo.not_null_components_decidim_organization_id.3ae04f70dd": [], "test.demo.unique_users_id.ec952d9777": [], "test.demo.not_null_users_id.4db5ed5c63": [], "test.demo.relationships_users_id__id__ref_int_users_.c269bba0d5": [], "test.demo.dbt_utils_unique_combination_of_columns_proposals_votes_decidim_author_id__decidim_proposal_id.da5f9c9505": [], "test.demo.unique_int_users_id.e5ba0ede1e": [], "test.demo.not_null_int_users_id.1125b186c1": [], "test.demo.not_null_int_users_nickname.b90ddd7677": [], "model.test_lyon.decidim_awesome_proposal_extra_fields": [], "model.test_lyon.stg_decidim_awesome_proposal_extra_fields": ["model.test_lyon.int_decidim_awesome_proposal_extra_fields", "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_id.aad3a9d9b8", "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.5154a34bb9", "test.test_lyon.unique_stg_decidim_awesome_proposal_extra_fields_id.1f06fde107"], "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_id.aad3a9d9b8": [], "test.test_lyon.unique_stg_decidim_awesome_proposal_extra_fields_id.1f06fde107": [], "test.test_lyon.not_null_stg_decidim_awesome_proposal_extra_fields_proposal_id.5154a34bb9": [], "source.test_lyon.decidim.decidim_awesome_proposal_extra_fields_test": ["model.test_lyon.stg_decidim_awesome_proposal_extra_fields"], "source.demo.decidim.decidim_components": ["model.demo.stg_decidim_components"], "source.demo.decidim.decidim_assemblies": ["model.demo.stg_decidim_assemblies"], "source.demo.decidim.decidim_participatory_processes": ["model.demo.stg_decidim_participatory_processes"], "source.demo.decidim.decidim_participatory_process_steps": ["model.demo.stg_decidim_participatory_process_steps"], "source.demo.decidim.decidim_users": ["model.demo.stg_decidim_users"], "source.demo.decidim.decidim_proposals_proposals": ["model.demo.stg_decidim_proposals"], "source.demo.decidim.decidim_coauthorships": ["model.demo.stg_decidim_coauthorships"], "source.demo.decidim.decidim_moderations": ["model.demo.stg_decidim_moderations"], "source.demo.decidim.decidim_scopes": ["model.demo.stg_decidim_scopes"], "source.demo.decidim.decidim_blogs_posts": ["model.demo.stg_decidim_blogs_posts"], "source.demo.decidim.decidim_debates_debates": ["model.demo.stg_decidim_debates"], "source.demo.decidim.decidim_meetings_meetings": ["model.demo.stg_decidim_meetings"], "source.demo.decidim.decidim_accountability_results": ["model.demo.stg_decidim_accountability_results"], "source.demo.decidim.decidim_comments_comments": ["model.demo.stg_decidim_comments"], "source.demo.decidim.decidim_proposals_collaborative_drafts": ["model.demo.stg_decidim_proposals_collaborative_drafts"], "source.demo.decidim.decidim_endorsements": ["model.demo.stg_decidim_endorsements"], "source.demo.decidim.decidim_follows": ["model.demo.stg_decidim_follows"], "source.demo.decidim.decidim_initiatives": [], "source.demo.decidim.decidim_initiatives_type_scopes": [], "source.demo.decidim.decidim_surveys_surveys": ["model.demo.stg_decidim_surveys"], "source.demo.decidim.decidim_attachments": ["model.demo.stg_decidim_attachments"], "source.demo.decidim.decidim_proposals_proposal_votes": ["model.demo.stg_decidim_proposals_votes"], "source.demo.decidim.decidim_meetings_registrations": ["model.demo.stg_decidim_meetings_registrations"], "source.demo.decidim.decidim_organizations": ["model.demo.stg_decidim_organizations"], "source.demo.decidim.decidim_forms_answer_choices": ["model.demo.stg_decidim_forms_answer_choices"], "source.demo.decidim.decidim_forms_answers": ["model.demo.stg_decidim_forms_answers"], "source.demo.decidim.decidim_forms_question_matrix_rows": ["model.demo.stg_decidim_forms_question_matrix_rows"], "source.demo.decidim.decidim_forms_questionnaires": ["model.demo.stg_decidim_forms_questionnaires"], "source.demo.decidim.decidim_forms_questions": ["model.demo.stg_decidim_forms_questions"], "source.demo.decidim.decidim_areas": ["model.demo.stg_decidim_areas"], "source.demo.decidim.decidim_area_types": ["model.demo.stg_decidim_area_types"], "source.demo.decidim.decidim_budgets_projects": ["model.demo.stg_decidim_budgets_projects"], "source.demo.decidim.decidim_budgets_budgets": ["model.demo.stg_decidim_budgets"], "source.demo.decidim.decidim_budgets_line_items": ["model.demo.stg_decidim_budgets_line_items"], "source.demo.decidim.decidim_budgets_orders": ["model.demo.stg_decidim_budgets_orders"], "source.demo.decidim.decidim_categories": ["model.demo.stg_decidim_categories"], "source.demo.decidim.decidim_categorizations": ["model.demo.stg_decidim_categorizations"], "unit_test.demo.stg_decidim_blogs_posts.resource_type_definition": [], "unit_test.demo.stg_decidim_debates.resource_type_definition": [], "unit_test.demo.stg_decidim_budgets_projects.resource_type_definition": [], "unit_test.demo.stg_decidim_proposals.resource_type_definition": [], "unit_test.demo.blogs_posts.test_url_concatenation": [], "unit_test.demo.components.test_ps_type": [], "unit_test.demo.components.test_ps_space_type_slug": [], "unit_test.demo.components.test_no_null_published_at": [], "unit_test.demo.components.test_take_only_assemblies_and_participatory_processes": [], "unit_test.demo.components.test_url_creation": [], "unit_test.demo.categorizations.testing_that_main_categories_are_properly_processed": [], "unit_test.demo.categorizations.testing_that_sub_categories_are_properly_processed": [], "unit_test.demo.endorsements.moderations-check": [], "unit_test.demo.endorsements.endorsements-component-check": [], "unit_test.demo.meetings.test_url_concatenation": [], "unit_test.demo.meetings.test_manifest_name_is_meetings": [], "unit_test.demo.proposals.withdrawn_proposals_check": [], "unit_test.demo.proposals.moderations_proposals_check": [], "unit_test.demo.proposals.conflict_on_decidim_reportable_type_check": [], "unit_test.demo.proposals.published_at_check": [], "unit_test.demo.int_organizations.test_filter_by_host": [], "unit_test.demo.int_organizations.test_regex_clean_description": [], "unit_test.demo.int_forms_answers.int_forms_answers_author_status_check": [], "unit_test.demo.answers_short_and_long_answer.answers_short_and_long_answer_check": [], "unit_test.demo.answers_matrix.answers_matrix_check": [], "unit_test.demo.answers_option_and_sorting.answers_option_and_sorting_check_on_question_type": [], "unit_test.demo.answers_short_and_long_answer.short_and_long_answer_check_on_question_type": [], "unit_test.demo.answers_matrix.answers_matrix_check_on_question_type": [], "unit_test.demo.int_components.test_translated_manifest_name": [], "unit_test.demo.int_users.deleted_users_check": [], "unit_test.demo.int_users.type_check": [], "unit_test.demo.int_users.sign_in_frequency_check": [], "unit_test.demo.int_budgets_orders.vote_finished_test": [], "unit_test.demo.int_budgets_projects.is_selected_test": [], "unit_test.demo.int_proposals.test_default_state": [], "unit_test.demo.int_proposals.test_translated_state": [], "unit_test.demo.int_proposals.test_default_address": [], "unit_test.demo.int_proposals.test_published_at_not_null": [], "unit_test.test_lyon.int_decidim_awesome_proposal_extra_fields.testing_that_the_correct_xml_information_are_parsed": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {"unit_test.demo.stg_decidim_blogs_posts.resource_type_definition": {"model": "stg_decidim_blogs_posts", "given": [{"input": "source('decidim', 'decidim_blogs_posts')", "rows": [{"id": 1}], "format": "dict", "fixture": null}], "expect": {"rows": [{"resource_type": "Decidim::Blogs::Post"}], "format": "dict", "fixture": null}, "name": "resource_type_definition", "resource_type": "unit_test", "package_name": "demo", "path": "staging/decidim/blogs_posts/schema.yml", "original_file_path": "models/staging/decidim/blogs_posts/schema.yml", "unique_id": "unit_test.demo.stg_decidim_blogs_posts.resource_type_definition", "fqn": ["demo", "staging", "decidim", "blogs_posts", "stg_decidim_blogs_posts", "resource_type_definition"], "description": "Checks that the resource type is properly defined", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_blogs_posts"]}, "config": {"tags": [], "meta": {}}, "checksum": "eb7438e26f14fb031c02d2388338d2ed2a0cab11ff0a98b10675c9e7304c9a37", "schema": "prod", "created_at": 1727441769.783929, "versions": null, "version": null}, "unit_test.demo.stg_decidim_debates.resource_type_definition": {"model": "stg_decidim_debates", "given": [{"input": "source('decidim', 'decidim_debates_debates')", "rows": [{"id": 1}], "format": "dict", "fixture": null}], "expect": {"rows": [{"resource_type": "Decidim::Debates::Debate"}], "format": "dict", "fixture": null}, "name": "resource_type_definition", "resource_type": "unit_test", "package_name": "demo", "path": "staging/decidim/debates/schema.yml", "original_file_path": "models/staging/decidim/debates/schema.yml", "unique_id": "unit_test.demo.stg_decidim_debates.resource_type_definition", "fqn": ["demo", "staging", "decidim", "debates", "stg_decidim_debates", "resource_type_definition"], "description": "Checks that the resource type is properly defined", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_debates"]}, "config": {"tags": [], "meta": {}}, "checksum": "17f10a03ce0eb3d75b3d757c7c0fd8a921bf6a1359393294b42a49ba31bfea02", "schema": "prod", "created_at": 1727441769.7915819, "versions": null, "version": null}, "unit_test.demo.stg_decidim_budgets_projects.resource_type_definition": {"model": "stg_decidim_budgets_projects", "given": [{"input": "source('decidim', 'decidim_budgets_projects')", "rows": [{"id": 1}], "format": "dict", "fixture": null}], "expect": {"rows": [{"resource_type": "Decidim::Budgets::Project"}], "format": "dict", "fixture": null}, "name": "resource_type_definition", "resource_type": "unit_test", "package_name": "demo", "path": "staging/decidim/budgets/schema.yml", "original_file_path": "models/staging/decidim/budgets/schema.yml", "unique_id": "unit_test.demo.stg_decidim_budgets_projects.resource_type_definition", "fqn": ["demo", "staging", "decidim", "budgets", "stg_decidim_budgets_projects", "resource_type_definition"], "description": "Checks that the resource type is properly defined", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_budgets_projects"]}, "config": {"tags": [], "meta": {}}, "checksum": "36df33d78ce20b3b36c751e7c28eaabddaff81942da7dc7c61d5c55e75b8efad", "schema": "prod", "created_at": 1727441769.80553, "versions": null, "version": null}, "unit_test.demo.stg_decidim_proposals.resource_type_definition": {"model": "stg_decidim_proposals", "given": [{"input": "source('decidim', 'decidim_proposals_proposals')", "rows": [{"id": 1}], "format": "dict", "fixture": null}], "expect": {"rows": [{"resource_type": "Decidim::Proposals::Proposal"}], "format": "dict", "fixture": null}, "name": "resource_type_definition", "resource_type": "unit_test", "package_name": "demo", "path": "staging/decidim/proposals/schema.yml", "original_file_path": "models/staging/decidim/proposals/schema.yml", "unique_id": "unit_test.demo.stg_decidim_proposals.resource_type_definition", "fqn": ["demo", "staging", "decidim", "proposals", "stg_decidim_proposals", "resource_type_definition"], "description": "Checks that the resource type is properly defined", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.stg_decidim_proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "053664ae8043289103cdc4ecc00f79758bc69b6b82f93f5b57b9a3c0b1ad3a0d", "schema": "prod", "created_at": 1727441769.812192, "versions": null, "version": null}, "unit_test.demo.blogs_posts.test_url_concatenation": {"model": "blogs_posts", "given": [{"input": "ref('stg_decidim_blogs_posts')", "rows": [{"id": 1, "decidim_component_id": 42}, {"id": 2, "decidim_component_id": 43}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"organization_host": "host1.com", "ps_space_type_slug": "foo", "ps_slug": "bar", "id": 42}, {"organization_host": "host2.com", "ps_space_type_slug": "type", "ps_slug": "space", "id": 43}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "post_url": "https://host1.com/foo/bar/f/42/posts/1"}, {"id": 2, "post_url": "https://host2.com/type/space/f/43/posts/2"}], "format": "dict", "fixture": null}, "name": "test_url_concatenation", "resource_type": "unit_test", "package_name": "demo", "path": "marts/blogs_posts/schema.yml", "original_file_path": "models/marts/blogs_posts/schema.yml", "unique_id": "unit_test.demo.blogs_posts.test_url_concatenation", "fqn": ["demo", "marts", "blogs_posts", "blogs_posts", "test_url_concatenation"], "description": "Check URL concatenation logic", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.blogs_posts"]}, "config": {"tags": [], "meta": {}}, "checksum": "c43e4202437c012524105287c529b6a46e29ebae4d732a254b44378506ad494a", "schema": "prod", "created_at": 1727441769.818351, "versions": null, "version": null}, "unit_test.demo.components.test_ps_type": {"model": "components", "given": [{"input": "ref('stg_decidim_assemblies')", "rows": [{"id": 1, "title": "Assembly 1", "published_at": "2023-01-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_participatory_processes')", "rows": [{"id": 2, "title": "Process 1", "published_at": "2023-02-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('int_components')", "rows": [{"id": 41, "participatory_space_id": 1, "participatory_space_type": "Decidim::Assembly", "published_at": "2024-01-01"}, {"id": 42, "participatory_space_id": 2, "participatory_space_type": "Decidim::ParticipatoryProcess", "published_at": "2024-02-01"}], "format": "dict", "fixture": null}, {"input": "ref('int_organizations')", "rows": [{"id": 101}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 41, "ps_type": "Decidim::Assembly"}, {"id": 42, "ps_type": "Decidim::ParticipatoryProcess"}], "format": "dict", "fixture": null}, "name": "test_ps_type", "resource_type": "unit_test", "package_name": "demo", "path": "marts/components/schema.yml", "original_file_path": "models/marts/components/schema.yml", "unique_id": "unit_test.demo.components.test_ps_type", "fqn": ["demo", "marts", "components", "components", "test_ps_type"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.components"]}, "config": {"tags": [], "meta": {}}, "checksum": "9817ee9c96b6f98c0133b23d4d955eefa1e9392d8ea5a2ddff76e2d87a819f7c", "schema": "prod", "created_at": 1727441769.825293, "versions": null, "version": null}, "unit_test.demo.components.test_ps_space_type_slug": {"model": "components", "given": [{"input": "ref('stg_decidim_assemblies')", "rows": [{"id": 1, "title": "Assembly 1", "slug": "slug1", "published_at": "2023-01-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_participatory_processes')", "rows": [{"id": 2, "title": "Process 1", "slug": "slug2", "published_at": "2023-02-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('int_components')", "rows": [{"id": 41, "participatory_space_id": 1, "participatory_space_type": "Decidim::Assembly", "published_at": "2024-01-01"}, {"id": 42, "participatory_space_id": 2, "participatory_space_type": "Decidim::ParticipatoryProcess", "published_at": "2024-02-01"}], "format": "dict", "fixture": null}, {"input": "ref('int_organizations')", "rows": [{"id": 101}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 41, "ps_space_type_slug": "assemblies"}, {"id": 42, "ps_space_type_slug": "processes"}], "format": "dict", "fixture": null}, "name": "test_ps_space_type_slug", "resource_type": "unit_test", "package_name": "demo", "path": "marts/components/schema.yml", "original_file_path": "models/marts/components/schema.yml", "unique_id": "unit_test.demo.components.test_ps_space_type_slug", "fqn": ["demo", "marts", "components", "components", "test_ps_space_type_slug"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.components"]}, "config": {"tags": [], "meta": {}}, "checksum": "e2ed42f87f27b1fc3ffdd2fc572399accf84e98cbf9050878a35286e880da5ad", "schema": "prod", "created_at": 1727441769.826292, "versions": null, "version": null}, "unit_test.demo.components.test_no_null_published_at": {"model": "components", "given": [{"input": "ref('stg_decidim_assemblies')", "rows": [{"id": 1, "published_at": "2023-01-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_participatory_processes')", "rows": [{"id": 2, "published_at": "2023-02-01", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, {"input": "ref('int_components')", "rows": [{"id": 41, "participatory_space_id": 1, "participatory_space_type": "Decidim::Assembly", "published_at": "2024-01-01"}, {"id": 42, "participatory_space_id": 2, "participatory_space_type": "Decidim::ParticipatoryProcess", "published_at": "2024-02-01"}, {"id": 43, "participatory_space_id": 1, "participatory_space_type": "Decidim::Assembly", "published_at": null}, {"id": 44, "participatory_space_id": 2, "participatory_space_type": "Decidim::ParticipatoryProcess", "published_at": "2024-02-01"}], "format": "dict", "fixture": null}, {"input": "ref('int_organizations')", "rows": [{"id": 101}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 41, "published_at": "2024-01-01"}, {"id": 42, "published_at": "2024-02-01"}, {"id": 43, "published_at": null}, {"id": 44, "published_at": "2024-02-01"}], "format": "dict", "fixture": null}, "name": "test_no_null_published_at", "resource_type": "unit_test", "package_name": "demo", "path": "marts/components/schema.yml", "original_file_path": "models/marts/components/schema.yml", "unique_id": "unit_test.demo.components.test_no_null_published_at", "fqn": ["demo", "marts", "components", "components", "test_no_null_published_at"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.components"]}, "config": {"tags": [], "meta": {}}, "checksum": "78c010a0b4ce617ea1bbf3459e78f04b6331a0b13aff30f6e621ad45230055c3", "schema": "prod", "created_at": 1727441769.826802, "versions": null, "version": null}, "unit_test.demo.components.test_take_only_assemblies_and_participatory_processes": {"model": "components", "given": [{"input": "ref('stg_decidim_assemblies')", "rows": [{"id": 1, "published_at": "2023-01-01", "decidim_organization_id": 101, "slug": "assemblies1"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_participatory_processes')", "rows": [{"id": 2, "published_at": "2023-01-15", "decidim_organization_id": 101, "slug": "process1"}], "format": "dict", "fixture": null}, {"input": "ref('int_components')", "rows": [{"id": 42, "participatory_space_type": "Decidim::Assembly", "participatory_space_id": 1, "published_at": "2024-01-01"}, {"id": 43, "participatory_space_type": "Decidim::ParticipatoryProcess", "participatory_space_id": 2, "published_at": "2024-02-01"}, {"id": 44, "participatory_space_type": "Decidim::Votations", "participatory_space_id": 3, "published_at": "2024-03-01"}], "format": "dict", "fixture": null}, {"input": "ref('int_organizations')", "rows": [{"id": 101}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 42, "decidim_organization_id": 101}, {"id": 43, "decidim_organization_id": 101}], "format": "dict", "fixture": null}, "name": "test_take_only_assemblies_and_participatory_processes", "resource_type": "unit_test", "package_name": "demo", "path": "marts/components/schema.yml", "original_file_path": "models/marts/components/schema.yml", "unique_id": "unit_test.demo.components.test_take_only_assemblies_and_participatory_processes", "fqn": ["demo", "marts", "components", "components", "test_take_only_assemblies_and_participatory_processes"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.components"]}, "config": {"tags": [], "meta": {}}, "checksum": "8264dbbdd5756c971a8c974089d1e7df0f3516e41821e115fe4e044631d9f684", "schema": "prod", "created_at": 1727441769.82778, "versions": null, "version": null}, "unit_test.demo.components.test_url_creation": {"model": "components", "given": [{"input": "ref('stg_decidim_assemblies')", "rows": [{"id": 1, "published_at": "2023-01-01", "decidim_organization_id": 101, "slug": "assemblies1"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_participatory_processes')", "rows": [{"id": 2, "published_at": "2023-01-15", "decidim_organization_id": 101, "slug": "process1"}], "format": "dict", "fixture": null}, {"input": "ref('int_components')", "rows": [{"id": 42, "participatory_space_type": "Decidim::Assembly", "participatory_space_id": 1, "published_at": "2024-01-01"}, {"id": 43, "participatory_space_type": "Decidim::ParticipatoryProcess", "participatory_space_id": 2, "published_at": "2024-02-01"}], "format": "dict", "fixture": null}, {"input": "ref('int_organizations')", "rows": [{"id": 101, "host": "organization1"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 42, "component_url": "https://organization1/assemblies/assemblies1/f/42", "ps_id": 1, "ps_url": "https://organization1/assemblies/assemblies1/", "decidim_organization_id": 101}, {"id": 43, "component_url": "https://organization1/processes/process1/f/43", "ps_id": 2, "ps_url": "https://organization1/processes/process1/", "decidim_organization_id": 101}], "format": "dict", "fixture": null}, "name": "test_url_creation", "resource_type": "unit_test", "package_name": "demo", "path": "marts/components/schema.yml", "original_file_path": "models/marts/components/schema.yml", "unique_id": "unit_test.demo.components.test_url_creation", "fqn": ["demo", "marts", "components", "components", "test_url_creation"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.components"]}, "config": {"tags": [], "meta": {}}, "checksum": "1b9184ef66b0dcb7f869cd343f184046a9e383147473a249586bada597df6789", "schema": "prod", "created_at": 1727441769.828757, "versions": null, "version": null}, "unit_test.demo.categorizations.testing_that_main_categories_are_properly_processed": {"model": "categorizations", "given": [{"input": "ref('stg_decidim_categories')", "rows": [{"id": 1, "name": "Environment"}, {"id": 2, "name": "Public Affairs"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_categorizations')", "rows": [{"decidim_category_id": 1, "categorizable_id": 23, "categorizable_type": "Decidim::Proposals::Proposal"}, {"decidim_category_id": 2, "categorizable_id": 25, "categorizable_type": "Decidim::Budgets::Project"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "category_name": "Environment", "child_id": 0, "child_name": "", "categorizable_id": 23, "categorizable_type": "Decidim::Proposals::Proposal"}, {"id": 2, "category_name": "Public Affairs", "child_id": 0, "child_name": "", "categorizable_id": 25, "categorizable_type": "Decidim::Budgets::Project"}], "format": "dict", "fixture": null}, "name": "testing_that_main_categories_are_properly_processed", "resource_type": "unit_test", "package_name": "demo", "path": "marts/categorizations/schema.yml", "original_file_path": "models/marts/categorizations/schema.yml", "unique_id": "unit_test.demo.categorizations.testing_that_main_categories_are_properly_processed", "fqn": ["demo", "marts", "categorizations", "categorizations", "testing_that_main_categories_are_properly_processed"], "description": "Checks that main categories has the correct infos ", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.categorizations"]}, "config": {"tags": [], "meta": {}}, "checksum": "161f8eeaf91497b4de33349be26b11f4e9372db26288bdcd2a487e92174f16c1", "schema": "prod", "created_at": 1727441769.829823, "versions": null, "version": null}, "unit_test.demo.categorizations.testing_that_sub_categories_are_properly_processed": {"model": "categorizations", "given": [{"input": "ref('stg_decidim_categories')", "rows": [{"id": 1, "name": "Environment", "parent_id": null}, {"id": 2, "name": "Public Affairs", "parent_id": null}, {"id": 101, "name": "Green public spaces", "parent_id": 1}, {"id": 102, "name": "Pollution", "parent_id": 1}, {"id": 201, "name": "Administration", "parent_id": 2}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_categorizations')", "rows": [{"decidim_category_id": 1, "categorizable_id": 23, "categorizable_type": "Decidim::Proposals::Proposal"}, {"decidim_category_id": 2, "categorizable_id": 25, "categorizable_type": "Decidim::Budgets::Project"}, {"decidim_category_id": 101, "categorizable_id": 1001, "categorizable_type": "Decidim::Proposals::Proposal"}, {"decidim_category_id": 102, "categorizable_id": 1002, "categorizable_type": "Decidim::Proposals::Proposal"}, {"decidim_category_id": 201, "categorizable_id": 2001, "categorizable_type": "Decidim::Budgets::Project"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "category_name": "Environment", "child_id": 0, "child_name": "", "categorizable_id": 23, "categorizable_type": "Decidim::Proposals::Proposal"}, {"id": 2, "category_name": "Public Affairs", "child_id": 0, "child_name": "", "categorizable_id": 25, "categorizable_type": "Decidim::Budgets::Project"}, {"id": 1, "category_name": "Environment", "child_id": 101, "child_name": "Green public spaces", "categorizable_id": 1001, "categorizable_type": "Decidim::Proposals::Proposal"}, {"id": 1, "category_name": "Environment", "child_id": 102, "child_name": "Pollution", "categorizable_id": 1002, "categorizable_type": "Decidim::Proposals::Proposal"}, {"id": 2, "category_name": "Public Affairs", "child_id": 201, "child_name": "Administration", "categorizable_id": 2001, "categorizable_type": "Decidim::Budgets::Project"}], "format": "dict", "fixture": null}, "name": "testing_that_sub_categories_are_properly_processed", "resource_type": "unit_test", "package_name": "demo", "path": "marts/categorizations/schema.yml", "original_file_path": "models/marts/categorizations/schema.yml", "unique_id": "unit_test.demo.categorizations.testing_that_sub_categories_are_properly_processed", "fqn": ["demo", "marts", "categorizations", "categorizations", "testing_that_sub_categories_are_properly_processed"], "description": "Checks that sub categories has the correct infos ", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.categorizations"]}, "config": {"tags": [], "meta": {}}, "checksum": "b83934eb842ec29d283ef2dccc073ec4937184614b3c2080d3fc17685dd922d1", "schema": "prod", "created_at": 1727441769.830809, "versions": null, "version": null}, "unit_test.demo.endorsements.moderations-check": {"model": "endorsements", "given": [{"input": "ref('stg_decidim_endorsements')", "rows": [{"id": 1, "resource_id": 1, "resource_type": "Decidim::Proposals::Proposal"}, {"id": 2, "resource_id": 2, "resource_type": "Decidim::Proposals::Proposal"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{"decidim_reportable_id": 1, "decidim_reportable_type": "Decidim::Proposals::Proposal", "hidden_at": "2024-07-22"}, {"decidim_reportable_id": 2, "decidim_reportable_type": "Decidim::Proposals::Proposal", "hidden_at": null}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals')", "rows": [{"id": 1, "resource_type": "Decidim::Proposals::Proposal"}, {"id": 2, "resource_type": "Decidim::Proposals::Proposal"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_debates')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_blogs_posts')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 2}], "format": "dict", "fixture": null}, "name": "moderations-check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/endorsements/schema.yml", "original_file_path": "models/marts/endorsements/schema.yml", "unique_id": "unit_test.demo.endorsements.moderations-check", "fqn": ["demo", "marts", "endorsements", "endorsements", "moderations-check"], "description": "Check if endorsements to moderated proposals/debates/blog posts are properly ignored", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.endorsements"]}, "config": {"tags": [], "meta": {}}, "checksum": "3a11fa2d068270a1dedcf90e5cdee22503ba67c1a023b97fdd2c64758a884880", "schema": "prod", "created_at": 1727441769.8319411, "versions": null, "version": null}, "unit_test.demo.endorsements.endorsements-component-check": {"model": "endorsements", "given": [{"input": "ref('stg_decidim_endorsements')", "rows": [{"id": 1, "resource_id": 42, "resource_type": "Decidim::Proposals::Proposal"}, {"id": 2, "resource_id": 42, "resource_type": "Decidim::Debates::Debate"}, {"id": 3, "resource_id": 42, "resource_type": "Decidim::Blogs::Post"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals')", "rows": [{"id": 42, "resource_type": "Decidim::Proposals::Proposal", "decidim_component_id": 100}, {"id": 91, "resource_type": "Decidim::Proposals::Proposal", "decidim_component_id": 991}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_debates')", "rows": [{"id": 42, "resource_type": "Decidim::Debates::Debate", "decidim_component_id": 200}, {"id": 92, "resource_type": "Decidim::Debates::Debate", "decidim_component_id": 992}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_blogs_posts')", "rows": [{"id": 42, "resource_type": "Decidim::Blogs::Post", "decidim_component_id": 300}, {"id": 93, "resource_type": "Decidim::Blogs::Post", "decidim_component_id": 993}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "decidim_component_id": 100}, {"id": 2, "decidim_component_id": 200}, {"id": 3, "decidim_component_id": 300}], "format": "dict", "fixture": null}, "name": "endorsements-component-check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/endorsements/schema.yml", "original_file_path": "models/marts/endorsements/schema.yml", "unique_id": "unit_test.demo.endorsements.endorsements-component-check", "fqn": ["demo", "marts", "endorsements", "endorsements", "endorsements-component-check"], "description": "Check if endorsements are properly matched to their components", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.endorsements"]}, "config": {"tags": [], "meta": {}}, "checksum": "74fe535402ddaf5bbd14ae3f26c12f98e068c078258c75873ccfd1b8bac66202", "schema": "prod", "created_at": 1727441769.832486, "versions": null, "version": null}, "unit_test.demo.meetings.test_url_concatenation": {"model": "meetings", "given": [{"input": "ref('int_meetings')", "rows": [{"decidim_component_id": 1, "id": 100}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"organization_host": "host1", "ps_space_type_slug": "space_type_slug1", "ps_slug": "ps_slug1", "id": 1, "manifest_name": "meetings"}], "format": "dict", "fixture": null}, {"input": "ref(\"categorizations\")", "rows": [{"categorizable_id": 100}], "format": "dict", "fixture": null}], "expect": {"rows": [{"meeting_url": "https://host1/space_type_slug1/ps_slug1/f/1/meetings/100"}], "format": "dict", "fixture": null}, "name": "test_url_concatenation", "resource_type": "unit_test", "package_name": "demo", "path": "marts/meetings/schema.yml", "original_file_path": "models/marts/meetings/schema.yml", "unique_id": "unit_test.demo.meetings.test_url_concatenation", "fqn": ["demo", "marts", "meetings", "meetings", "test_url_concatenation"], "description": "Check URL concatenation logic", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.meetings"]}, "config": {"tags": [], "meta": {}}, "checksum": "e56762e868e7f9ed2a622429c34e91c3e5a0ff87f9087907d1db360ed294e140", "schema": "prod", "created_at": 1727441769.843999, "versions": null, "version": null}, "unit_test.demo.meetings.test_manifest_name_is_meetings": {"model": "meetings", "given": [{"input": "ref('int_meetings')", "rows": [{"decidim_component_id": 1, "id": 100}, {"decidim_component_id": 2, "id": 200}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"id": 1, "manifest_name": "meetings"}, {"id": 2, "manifest_name": "foo"}], "format": "dict", "fixture": null}, {"input": "ref(\"categorizations\")", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 100}], "format": "dict", "fixture": null}, "name": "test_manifest_name_is_meetings", "resource_type": "unit_test", "package_name": "demo", "path": "marts/meetings/schema.yml", "original_file_path": "models/marts/meetings/schema.yml", "unique_id": "unit_test.demo.meetings.test_manifest_name_is_meetings", "fqn": ["demo", "marts", "meetings", "meetings", "test_manifest_name_is_meetings"], "description": "Check that manifest name filters on meetings", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.meetings"]}, "config": {"tags": [], "meta": {}}, "checksum": "9671543d8da01650b69dc3130e626c7107ea62e2c2818d5ec2cbb201430efdd7", "schema": "prod", "created_at": 1727441769.8445408, "versions": null, "version": null}, "unit_test.demo.proposals.withdrawn_proposals_check": {"model": "proposals", "given": [{"input": "ref('int_users')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_coauthorships')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals_votes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_proposals')", "rows": [{"id": 41, "state": "submitted", "published_at": "2023-01-01", "decidim_component_id": 100}, {"id": 42, "state": "withdrawn", "published_at": "2023-01-02", "decidim_component_id": 100}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"id": 100}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_scopes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('categorizations')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 41, "state": "submitted"}], "format": "dict", "fixture": null}, "name": "withdrawn_proposals_check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/proposals/schema.yml", "original_file_path": "models/marts/proposals/schema.yml", "unique_id": "unit_test.demo.proposals.withdrawn_proposals_check", "fqn": ["demo", "marts", "proposals", "proposals", "withdrawn_proposals_check"], "description": "Check if withdrawn proposals are properly removed", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "46bf72c0d7e701298d97608f5efe66874fb73cf2e9c011a9d900e148d532e678", "schema": "prod", "created_at": 1727441769.8505101, "versions": null, "version": null}, "unit_test.demo.proposals.moderations_proposals_check": {"model": "proposals", "given": [{"input": "ref('int_users')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_coauthorships')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals_votes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_proposals')", "rows": [{"id": 43, "state": "submitted", "published_at": "2023-01-03", "decidim_component_id": 100}, {"id": 44, "state": "submitted", "published_at": "2023-01-03", "decidim_component_id": 100}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"id": 100}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{"decidim_reportable_id": 43, "decidim_reportable_type": "Decidim::Proposals::Proposal", "hidden_at": "2024-07-22"}], "format": "dict", "fixture": null}, {"input": "ref('int_scopes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('categorizations')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 44}], "format": "dict", "fixture": null}, "name": "moderations_proposals_check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/proposals/schema.yml", "original_file_path": "models/marts/proposals/schema.yml", "unique_id": "unit_test.demo.proposals.moderations_proposals_check", "fqn": ["demo", "marts", "proposals", "proposals", "moderations_proposals_check"], "description": "Check if proposals are properly ignored due to 'hidden_at' date and other moderation conditions", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "c95871be5e14969c07bd0da8f47391df026e1e773e13289644d94847d72886b9", "schema": "prod", "created_at": 1727441769.8511739, "versions": null, "version": null}, "unit_test.demo.proposals.conflict_on_decidim_reportable_type_check": {"model": "proposals", "given": [{"input": "ref('int_users')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_coauthorships')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals_votes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_proposals')", "rows": [{"id": 43, "state": "submitted", "published_at": "2023-01-03", "decidim_component_id": 100}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"id": 100}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{"decidim_reportable_id": 43, "decidim_reportable_type": "Decidim::Debates::Debate", "hidden_at": null}, {"decidim_reportable_id": 43, "decidim_reportable_type": "Decidim::Proposals::Proposal", "hidden_at": null}], "format": "dict", "fixture": null}, {"input": "ref('int_scopes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('categorizations')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 43}], "format": "dict", "fixture": null}, "name": "conflict_on_decidim_reportable_type_check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/proposals/schema.yml", "original_file_path": "models/marts/proposals/schema.yml", "unique_id": "unit_test.demo.proposals.conflict_on_decidim_reportable_type_check", "fqn": ["demo", "marts", "proposals", "proposals", "conflict_on_decidim_reportable_type_check"], "description": "Check if there is no conflict in moderation table on id if there is a decidim_reportable_type that is not a proposal and has the same id", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "ca3008534822d18f38caa2f819e4782a2c0eabe9518b375f5fe6e277fc86a272", "schema": "prod", "created_at": 1727441769.851716, "versions": null, "version": null}, "unit_test.demo.proposals.published_at_check": {"model": "proposals", "given": [{"input": "ref('int_users')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_coauthorships')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_proposals_votes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_proposals')", "rows": [{"id": 43, "state": "submitted", "published_at": "2023-01-03", "decidim_component_id": 100}, {"id": 44, "state": "submitted", "published_at": null, "decidim_component_id": 100}], "format": "dict", "fixture": null}, {"input": "ref('components')", "rows": [{"id": 100}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_moderations')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('int_scopes')", "rows": [{}], "format": "dict", "fixture": null}, {"input": "ref('categorizations')", "rows": [{}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 43}], "format": "dict", "fixture": null}, "name": "published_at_check", "resource_type": "unit_test", "package_name": "demo", "path": "marts/proposals/schema.yml", "original_file_path": "models/marts/proposals/schema.yml", "unique_id": "unit_test.demo.proposals.published_at_check", "fqn": ["demo", "marts", "proposals", "proposals", "published_at_check"], "description": "Check if proposals are properly ignored if 'published_at' is null", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "f3c4d2acc441595bef57899b0f9da3d27b11417154d8c704024f2b825ddf6a50", "schema": "prod", "created_at": 1727441769.852256, "versions": null, "version": null}, "unit_test.demo.int_organizations.test_filter_by_host": {"model": "int_organizations", "given": [{"input": "ref('stg_decidim_organizations')", "rows": [{"id": 1, "host": "host1.com"}, {"id": 2, "host": "host2.com"}, {"id": 3, "host": "host3.com"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "host": "host1.com"}], "format": "dict", "fixture": null}, "name": "test_filter_by_host", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/organizations/schema.yml", "original_file_path": "models/intermediate/organizations/schema.yml", "unique_id": "unit_test.demo.int_organizations.test_filter_by_host", "fqn": ["demo", "intermediate", "organizations", "int_organizations", "test_filter_by_host"], "description": "Test that the model only includes records with the specified host.", "overrides": {"macros": {}, "vars": {}, "env_vars": {"PARTICIPATION_HOST_NAME": "host1.com"}}, "depends_on": {"macros": [], "nodes": ["model.demo.int_organizations"]}, "config": {"tags": [], "meta": {}}, "checksum": "3ffd43912cc818e1cdd9a02af9d1c2baa07004dfa076ae0308ab5df4dc19d6bb", "schema": "prod", "created_at": 1727441769.853934, "versions": null, "version": null}, "unit_test.demo.int_organizations.test_regex_clean_description": {"model": "int_organizations", "given": [{"input": "ref('stg_decidim_organizations')", "rows": [{"id": 1, "description": "{\"fr\": \"<p>Welcome to &amp;Decidim</p>\"}", "host": "host1.com"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "description": "Welcome to Decidim"}], "format": "dict", "fixture": null}, "name": "test_regex_clean_description", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/organizations/schema.yml", "original_file_path": "models/intermediate/organizations/schema.yml", "unique_id": "unit_test.demo.int_organizations.test_regex_clean_description", "fqn": ["demo", "intermediate", "organizations", "int_organizations", "test_regex_clean_description"], "description": "Test that the regex properly cleans the description field by removing HTML tags and entities.", "overrides": {"macros": {}, "vars": {}, "env_vars": {"PARTICIPATION_HOST_NAME": "host1.com"}}, "depends_on": {"macros": [], "nodes": ["model.demo.int_organizations"]}, "config": {"tags": [], "meta": {}}, "checksum": "1aa4927763e93ab0d202c2f7b1590b5d5811c5a87f4341b9f02aaccfe0fc344d", "schema": "prod", "created_at": 1727441769.854413, "versions": null, "version": null}, "unit_test.demo.int_forms_answers.int_forms_answers_author_status_check": {"model": "int_forms_answers", "given": [{"input": "ref('stg_decidim_forms_answers')", "rows": [{"decidim_user_id": 1}, {"decidim_user_id": null}], "format": "dict", "fixture": null}], "expect": {"rows": [{"author_status": "Inscrit et connect\u00e9"}, {"author_status": "Non connect\u00e9"}], "format": "dict", "fixture": null}, "name": "int_forms_answers_author_status_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.int_forms_answers.int_forms_answers_author_status_check", "fqn": ["demo", "intermediate", "forms", "int_forms_answers", "int_forms_answers_author_status_check"], "description": "Check that the author status is correctly detected", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_forms_answers"]}, "config": {"tags": [], "meta": {}}, "checksum": "30fbbbdc10405bc7c3cf35461d1e3d7e920736f21e27a27c367725ccf742e898", "schema": "prod", "created_at": 1727441769.8553119, "versions": null, "version": null}, "unit_test.demo.answers_short_and_long_answer.answers_short_and_long_answer_check": {"model": "answers_short_and_long_answer", "given": [{"input": "ref('int_forms_answers')", "rows": [{"id": 1, "decidim_question_id": 41, "body": "Answer 1"}, {"id": 2, "decidim_question_id": 42, "body": null}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_questions')", "rows": [{"id": 41, "decidim_questionnaire_id": 101, "body": "{\"fr\": \"Question 1\"}", "position": 1, "question_type": "short_answer"}, {"id": 42, "decidim_questionnaire_id": 101, "body": "{\"fr\": \"Question 2\"}", "position": 2, "question_type": "long_answer"}], "format": "dict", "fixture": null}, {"input": "ref('forms')", "rows": [{"id": 101}], "format": "dict", "fixture": null}], "expect": {"rows": [{"answer": "Answer 1", "sub_matrix_question": "", "custom_body": "", "sorting_position": -1, "decidim_questionnaire_id": 101, "position": 1}, {"answer": "Pas de r\u00e9ponse", "sub_matrix_question": "", "custom_body": "", "sorting_position": -1, "decidim_questionnaire_id": 101, "position": 2}], "format": "dict", "fixture": null}, "name": "answers_short_and_long_answer_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.answers_short_and_long_answer.answers_short_and_long_answer_check", "fqn": ["demo", "intermediate", "forms", "answers_short_and_long_answer", "answers_short_and_long_answer_check"], "description": "Check if option and sorting answers are correctly processed in the answers_short_and_long_answer CTE", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.answers_short_and_long_answer"]}, "config": {"tags": [], "meta": {}}, "checksum": "27662a116e5bd624cb2423e0197f7b8b6d7ac197ffce93f37b136cb057d6ee9b", "schema": "prod", "created_at": 1727441769.856771, "versions": null, "version": null}, "unit_test.demo.answers_matrix.answers_matrix_check": {"model": "answers_matrix", "given": [{"input": "ref('int_forms_answers')", "rows": [{"id": 901, "decidim_question_id": 41}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_questions')", "rows": [{"id": 41, "decidim_questionnaire_id": 101, "body": "How often do you go there ?", "question_type": "matrix_single"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_answer_choices')", "rows": [{"decidim_answer_id": 901, "body": "Rarely", "decidim_question_matrix_row_id": 1}, {"decidim_answer_id": 901, "body": "Never", "decidim_question_matrix_row_id": 2}, {"decidim_answer_id": 901, "body": "Often", "decidim_question_matrix_row_id": 3}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_question_matrix_rows')", "rows": [{"id": 1, "body": "Place 1"}, {"id": 2, "body": "Place 2"}, {"id": 3, "body": "Place 3"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"body": "How often do you go there ?", "answer": "Rarely", "sub_matrix_question": "Place 1", "sorting_position": -1, "decidim_questionnaire_id": 101, "custom_body": "", "question_type": "matrix_single"}, {"body": "How often do you go there ?", "answer": "Never", "sub_matrix_question": "Place 2", "sorting_position": -1, "decidim_questionnaire_id": 101, "custom_body": "", "question_type": "matrix_single"}, {"body": "How often do you go there ?", "answer": "Often", "sub_matrix_question": "Place 3", "sorting_position": -1, "decidim_questionnaire_id": 101, "custom_body": "", "question_type": "matrix_single"}], "format": "dict", "fixture": null}, "name": "answers_matrix_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.answers_matrix.answers_matrix_check", "fqn": ["demo", "intermediate", "forms", "answers_matrix", "answers_matrix_check"], "description": "Check if matrix answers are correctly processed", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.answers_matrix"]}, "config": {"tags": [], "meta": {}}, "checksum": "556bc9bc1bed125883a476da395cda9394c83fb1a94fc69d6fd557aeb5e8d1d7", "schema": "prod", "created_at": 1727441769.8585112, "versions": null, "version": null}, "unit_test.demo.answers_option_and_sorting.answers_option_and_sorting_check_on_question_type": {"model": "answers_option_and_sorting", "given": [{"input": "ref('int_forms_answers')", "rows": [{"id": 901, "decidim_question_id": 41}, {"id": 902, "decidim_question_id": 42}, {"id": 903, "decidim_question_id": 43}, {"id": 904, "decidim_question_id": 44}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_questions')", "rows": [{"id": 41, "question_type": "single_option"}, {"id": 42, "question_type": "multiple_option"}, {"id": 43, "question_type": "sorting"}, {"id": 44, "question_type": "matrix_single"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_answer_choices')", "rows": [{"decidim_answer_id": 901}, {"decidim_answer_id": 902}, {"decidim_answer_id": 903}, {"decidim_answer_id": 904}], "format": "dict", "fixture": null}], "expect": {"rows": [{"question_type": "single_option"}, {"question_type": "multiple_option"}, {"question_type": "sorting"}], "format": "dict", "fixture": null}, "name": "answers_option_and_sorting_check_on_question_type", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.answers_option_and_sorting.answers_option_and_sorting_check_on_question_type", "fqn": ["demo", "intermediate", "forms", "answers_option_and_sorting", "answers_option_and_sorting_check_on_question_type"], "description": "Check that question_type is correctly taken into account", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.answers_option_and_sorting"]}, "config": {"tags": [], "meta": {}}, "checksum": "29d207b693231893bc29f409bc074e036c6eb7e187e34ca9dbfc0f3e5b8f7f9e", "schema": "prod", "created_at": 1727441769.8593931, "versions": null, "version": null}, "unit_test.demo.answers_short_and_long_answer.short_and_long_answer_check_on_question_type": {"model": "answers_short_and_long_answer", "given": [{"input": "ref('int_forms_answers')", "rows": [{"id": 901, "decidim_question_id": 41}, {"id": 902, "decidim_question_id": 42}, {"id": 903, "decidim_question_id": 43}, {"id": 904, "decidim_question_id": 44}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_questions')", "rows": [{"id": 41, "question_type": "short_answer"}, {"id": 42, "question_type": "long_answer"}, {"id": 43, "question_type": "sorting"}, {"id": 44, "question_type": "matrix_single"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"question_type": "short_answer"}, {"question_type": "long_answer"}], "format": "dict", "fixture": null}, "name": "short_and_long_answer_check_on_question_type", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.answers_short_and_long_answer.short_and_long_answer_check_on_question_type", "fqn": ["demo", "intermediate", "forms", "answers_short_and_long_answer", "short_and_long_answer_check_on_question_type"], "description": "Check that question_type is correctly taken into account", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.answers_short_and_long_answer"]}, "config": {"tags": [], "meta": {}}, "checksum": "b3553f57599f4bcc0997a33d0f7158e00c4e326a0a3c9d87434041aa6783da06", "schema": "prod", "created_at": 1727441769.8597991, "versions": null, "version": null}, "unit_test.demo.answers_matrix.answers_matrix_check_on_question_type": {"model": "answers_matrix", "given": [{"input": "ref('int_forms_answers')", "rows": [{"id": 901, "decidim_question_id": 41}, {"id": 902, "decidim_question_id": 42}, {"id": 903, "decidim_question_id": 43}, {"id": 904, "decidim_question_id": 44}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_questions')", "rows": [{"id": 41, "question_type": "short_answer"}, {"id": 42, "question_type": "long_answer"}, {"id": 43, "question_type": "matrix_multiple"}, {"id": 44, "question_type": "matrix_single"}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_answer_choices')", "rows": [{"decidim_answer_id": 903, "decidim_question_matrix_row_id": 1}, {"decidim_answer_id": 904, "decidim_question_matrix_row_id": 2}], "format": "dict", "fixture": null}, {"input": "ref('stg_decidim_forms_question_matrix_rows')", "rows": [{"id": 1}, {"id": 2}, {"id": 3}], "format": "dict", "fixture": null}], "expect": {"rows": [{"question_type": "matrix_multiple"}, {"question_type": "matrix_single"}], "format": "dict", "fixture": null}, "name": "answers_matrix_check_on_question_type", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/forms/schema.yml", "original_file_path": "models/intermediate/forms/schema.yml", "unique_id": "unit_test.demo.answers_matrix.answers_matrix_check_on_question_type", "fqn": ["demo", "intermediate", "forms", "answers_matrix", "answers_matrix_check_on_question_type"], "description": "Check that question_type is correctly taken into account", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.answers_matrix"]}, "config": {"tags": [], "meta": {}}, "checksum": "824c413a3cf2f73558cf4b203a42542cdcb695fdd70abab16e1f59c644f66686", "schema": "prod", "created_at": 1727441769.860398, "versions": null, "version": null}, "unit_test.demo.int_components.test_translated_manifest_name": {"model": "int_components", "given": [{"input": "ref('stg_decidim_components')", "rows": [{"id": 1, "manifest_name": "accountability"}, {"id": 2, "manifest_name": "pages"}, {"id": 3, "manifest_name": "budgets"}, {"id": 4, "manifest_name": "meetings"}, {"id": 5, "manifest_name": "proposals"}, {"id": 6, "manifest_name": "surveys"}, {"id": 7, "manifest_name": "blogs"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "translated_manifest_name": "Suivi"}, {"id": 2, "translated_manifest_name": "Page"}, {"id": 3, "translated_manifest_name": "Budgets"}, {"id": 4, "translated_manifest_name": "Rencontres"}, {"id": 5, "translated_manifest_name": "Propositions"}, {"id": 6, "translated_manifest_name": "Enqu\u00eates"}, {"id": 7, "translated_manifest_name": "Blogs"}], "format": "dict", "fixture": null}, "name": "test_translated_manifest_name", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/components/schema.yml", "original_file_path": "models/intermediate/components/schema.yml", "unique_id": "unit_test.demo.int_components.test_translated_manifest_name", "fqn": ["demo", "intermediate", "components", "int_components", "test_translated_manifest_name"], "description": "", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_components"]}, "config": {"tags": [], "meta": {}}, "checksum": "ef0147cb1b03f6ccaab1db45b7b72dc773046c25fab2a661f02e72b1161d22c6", "schema": "prod", "created_at": 1727441769.863044, "versions": null, "version": null}, "unit_test.demo.int_users.deleted_users_check": {"model": "int_users", "given": [{"input": "ref('stg_decidim_users')", "rows": [{"id": 1, "deleted_at": "2024-07-17", "type": "Decidim::User"}, {"id": 2, "deleted_at": null, "type": "Decidim::User"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 2}], "format": "dict", "fixture": null}, "name": "deleted_users_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/users/schema.yml", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "unit_test.demo.int_users.deleted_users_check", "fqn": ["demo", "intermediate", "users", "int_users", "deleted_users_check"], "description": "Check that no deleted users are retrieved", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_users"]}, "config": {"tags": [], "meta": {}}, "checksum": "d9c03269fac281530a3935d59e3433f531d771356b3e28f1ddc2910a1d9d0d76", "schema": "prod", "created_at": 1727441769.866791, "versions": null, "version": null}, "unit_test.demo.int_users.type_check": {"model": "int_users", "given": [{"input": "ref('stg_decidim_users')", "rows": [{"id": 1, "type": "Decidim::User"}, {"id": 2, "type": "Decidim::Admin"}, {"id": 3, "type": "Decidim::Admin, Decidim::User"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1}], "format": "dict", "fixture": null}, "name": "type_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/users/schema.yml", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "unit_test.demo.int_users.type_check", "fqn": ["demo", "intermediate", "users", "int_users", "type_check"], "description": "Check that the type contains Decidim::User", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_users"]}, "config": {"tags": [], "meta": {}}, "checksum": "70fed1350b42b9929a9a7f7584487c58e07b99c676aac775602ff673a788ed71", "schema": "prod", "created_at": 1727441769.8673239, "versions": null, "version": null}, "unit_test.demo.int_users.sign_in_frequency_check": {"model": "int_users", "given": [{"input": "ref('stg_decidim_users')", "rows": [{"sign_in_count": 0, "type": "Decidim::User"}, {"sign_in_count": 1, "type": "Decidim::User"}, {"sign_in_count": 2, "type": "Decidim::User"}, {"sign_in_count": 3, "type": "Decidim::User"}, {"sign_in_count": 4, "type": "Decidim::User"}, {"sign_in_count": 5, "type": "Decidim::User"}, {"sign_in_count": 6, "type": "Decidim::User"}, {"sign_in_count": 7, "type": "Decidim::User"}, {"sign_in_count": 8, "type": "Decidim::User"}, {"sign_in_count": 9, "type": "Decidim::User"}, {"sign_in_count": 10, "type": "Decidim::User"}, {"sign_in_count": 11, "type": "Decidim::User"}, {"sign_in_count": 100, "type": "Decidim::User"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"sign_in_frequency": "Jamais"}, {"sign_in_frequency": "Une seule fois"}, {"sign_in_frequency": "Deux fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Entre 2 et 10 fois"}, {"sign_in_frequency": "Plus de 10 fois"}, {"sign_in_frequency": "Plus de 10 fois"}], "format": "dict", "fixture": null}, "name": "sign_in_frequency_check", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/users/schema.yml", "original_file_path": "models/intermediate/users/schema.yml", "unique_id": "unit_test.demo.int_users.sign_in_frequency_check", "fqn": ["demo", "intermediate", "users", "int_users", "sign_in_frequency_check"], "description": "Check that the sign in frequency is properly calculated", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_users"]}, "config": {"tags": [], "meta": {}}, "checksum": "6a820ca405c9eb1ea0e0eff4a300a42d2bfad0ae5c2985c25021b2310682354d", "schema": "prod", "created_at": 1727441769.868347, "versions": null, "version": null}, "unit_test.demo.int_budgets_orders.vote_finished_test": {"model": "int_budgets_orders", "given": [{"input": "ref('stg_decidim_budgets_orders')", "rows": [{"id": 1, "checked_out_at": "2024-04-03"}, {"id": 2, "checked_out_at": null}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "vote_finished": true}, {"id": 2, "vote_finished": false}], "format": "dict", "fixture": null}, "name": "vote_finished_test", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/budgets/schema.yml", "original_file_path": "models/intermediate/budgets/schema.yml", "unique_id": "unit_test.demo.int_budgets_orders.vote_finished_test", "fqn": ["demo", "intermediate", "budgets", "int_budgets_orders", "vote_finished_test"], "description": "Checks that the boolean is properly set to True only if there is a checked_out_at timestamp", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_budgets_orders"]}, "config": {"tags": [], "meta": {}}, "checksum": "d70b7d78fdbe2bccee166df639e81431ddea02bdb41280ef3df91af064e17737", "schema": "prod", "created_at": 1727441769.869021, "versions": null, "version": null}, "unit_test.demo.int_budgets_projects.is_selected_test": {"model": "int_budgets_projects", "given": [{"input": "ref('stg_decidim_budgets_projects')", "rows": [{"id": 1, "selected_at": "2024-04-03"}, {"id": 2, "selected_at": null}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "is_selected": true}, {"id": 2, "is_selected": false}], "format": "dict", "fixture": null}, "name": "is_selected_test", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/budgets/schema.yml", "original_file_path": "models/intermediate/budgets/schema.yml", "unique_id": "unit_test.demo.int_budgets_projects.is_selected_test", "fqn": ["demo", "intermediate", "budgets", "int_budgets_projects", "is_selected_test"], "description": "Checks that the boolean is properly set to True only if there is a selected_at timestamp", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_budgets_projects"]}, "config": {"tags": [], "meta": {}}, "checksum": "bc0d0eda2b984b5fd6a997d8d00cefff68cb7df81fd8735d7bc1d3581e93f8b0", "schema": "prod", "created_at": 1727441769.869627, "versions": null, "version": null}, "unit_test.demo.int_proposals.test_default_state": {"model": "int_proposals", "given": [{"input": "ref('stg_decidim_proposals')", "rows": [{"id": 1, "published_at": "2024-08-12", "state": null}, {"id": 2, "published_at": "2024-08-12", "state": "rejected"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "state": "Pas d'\u00e9tat", "translated_state": "Pas d'\u00e9tat"}, {"id": 2, "state": "rejected", "translated_state": "Rejet\u00e9e"}], "format": "dict", "fixture": null}, "name": "test_default_state", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/proposals/schema.yml", "original_file_path": "models/intermediate/proposals/schema.yml", "unique_id": "unit_test.demo.int_proposals.test_default_state", "fqn": ["demo", "intermediate", "proposals", "int_proposals", "test_default_state"], "description": "Test that the state column correctly defaults to 'Pas d'\u00e9tat' if null", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "99d1bb435590a321f2dfe40852c9fc9f2ce8248a328ce6b64f8008bcc17f0e24", "schema": "prod", "created_at": 1727441769.8711412, "versions": null, "version": null}, "unit_test.demo.int_proposals.test_translated_state": {"model": "int_proposals", "given": [{"input": "ref('stg_decidim_proposals')", "rows": [{"id": 1, "published_at": "2024-08-12", "state": "evaluating"}, {"id": 2, "published_at": "2024-08-12", "state": "rejected"}, {"id": 3, "published_at": "2024-08-12", "state": "accepted"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "translated_state": "En cours d'\u00e9valuation"}, {"id": 2, "translated_state": "Rejet\u00e9e"}, {"id": 3, "translated_state": "Accept\u00e9e"}], "format": "dict", "fixture": null}, "name": "test_translated_state", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/proposals/schema.yml", "original_file_path": "models/intermediate/proposals/schema.yml", "unique_id": "unit_test.demo.int_proposals.test_translated_state", "fqn": ["demo", "intermediate", "proposals", "int_proposals", "test_translated_state"], "description": "Test that the state column is correctly translated", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "46e7cf3cc02dd0af985de431a877d98a41bf18854a1fd4de9dfd1b9a3def31d4", "schema": "prod", "created_at": 1727441769.871907, "versions": null, "version": null}, "unit_test.demo.int_proposals.test_default_address": {"model": "int_proposals", "given": [{"input": "ref('stg_decidim_proposals')", "rows": [{"id": 1, "published_at": "2024-08-12", "address": ""}, {"id": 2, "published_at": "2024-08-12", "address": "1 Place Hannah Arendt"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "address": "Pas d'adresse"}, {"id": 2, "address": "1 Place Hannah Arendt"}], "format": "dict", "fixture": null}, "name": "test_default_address", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/proposals/schema.yml", "original_file_path": "models/intermediate/proposals/schema.yml", "unique_id": "unit_test.demo.int_proposals.test_default_address", "fqn": ["demo", "intermediate", "proposals", "int_proposals", "test_default_address"], "description": "Test that the address column correctly defaults to 'Pas d'adresse' if empty", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "4b15bb31bd37d801158ffb6821c2efb44897a972db9e9fd773b47e756ed2ddc1", "schema": "prod", "created_at": 1727441769.872523, "versions": null, "version": null}, "unit_test.demo.int_proposals.test_published_at_not_null": {"model": "int_proposals", "given": [{"input": "ref('stg_decidim_proposals')", "rows": [{"id": 1, "published_at": "2023-01-01"}, {"id": 2, "published_at": null}, {"id": 3, "published_at": "2023-02-01"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "published_at": "2023-01-01"}, {"id": 3, "published_at": "2023-02-01"}], "format": "dict", "fixture": null}, "name": "test_published_at_not_null", "resource_type": "unit_test", "package_name": "demo", "path": "intermediate/proposals/schema.yml", "original_file_path": "models/intermediate/proposals/schema.yml", "unique_id": "unit_test.demo.int_proposals.test_published_at_not_null", "fqn": ["demo", "intermediate", "proposals", "int_proposals", "test_published_at_not_null"], "description": "Test that only rows with non-null published_at are included", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.demo.int_proposals"]}, "config": {"tags": [], "meta": {}}, "checksum": "e0807cc7eb3d4c87115af2388bd7d58ada8368b6a782f0e8b6ae5c0d2f8fb0e5", "schema": "prod", "created_at": 1727441769.87285, "versions": null, "version": null}, "unit_test.test_lyon.int_decidim_awesome_proposal_extra_fields.testing_that_the_correct_xml_information_are_parsed": {"model": "int_decidim_awesome_proposal_extra_fields", "given": [{"input": "ref('stg_decidim_awesome_proposal_extra_fields')", "rows": [{"id": 1, "proposal_id": 101, "private_body_clear": "<xml><dl class=\"decidim_awesome-custom_fields\" data-generator=\"decidim_awesome\" data-version=\"0.10.3\"><dt name=\"radio-group-1725003392539-0\">Cette id\u00e9e est d\u00e9pos\u00e9e \u00e0 titre :</dt><dd id=\"radio-group-1725003392539-0\" name=\"radio-group\"><div alt=\"individuel\">Individuel</div></dd><dt name=\"radio-group-1725003468065-0\">Votre tranche d'\u00e2ge :</dt><dd id=\"radio-group-1725003468065-0\" name=\"radio-group\"><div alt=\"1625\">16-25 ans</div></dd></dl></xml>"}], "format": "dict", "fixture": null}], "expect": {"rows": [{"id": 1, "proposal_id": 101, "private_field_description": "Cette id\u00e9e est d\u00e9pos\u00e9e \u00e0 titre :", "private_field_content": "Individuel"}, {"id": 1, "proposal_id": 101, "private_field_description": "Votre tranche d'\u00e2ge :", "private_field_content": "16-25 ans"}], "format": "dict", "fixture": null}, "name": "testing_that_the_correct_xml_information_are_parsed", "resource_type": "unit_test", "package_name": "test_lyon", "path": "intermediate/decidim_awesome/schema.yml", "original_file_path": "models/intermediate/decidim_awesome/schema.yml", "unique_id": "unit_test.test_lyon.int_decidim_awesome_proposal_extra_fields.testing_that_the_correct_xml_information_are_parsed", "fqn": ["test_lyon", "intermediate", "decidim_awesome", "int_decidim_awesome_proposal_extra_fields", "testing_that_the_correct_xml_information_are_parsed"], "description": "Checks that age matching fetches the correct infos ", "overrides": null, "depends_on": {"macros": [], "nodes": ["model.test_lyon.int_decidim_awesome_proposal_extra_fields"]}, "config": {"tags": [], "meta": {}}, "checksum": "e0b27182953e4023551ddfadb365b30f131b958c51aff139d3210bf258637f2e", "schema": "prod", "created_at": 1727446205.904194, "versions": null, "version": null}}}